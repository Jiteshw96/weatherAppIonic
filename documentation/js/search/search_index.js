var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,1.221,1,1.018]],["body/components/AppComponent.html",[0,2.037,1,1.522,2,2.463,3,0.359,4,0.359,5,1.808,6,1.808,7,1.808,8,1.808,9,0.28,10,1.407,11,0.788,12,2.665,13,2.665,14,3.165,15,1.463,16,3.492,17,0.968,18,2.665,19,3.165,20,2.665,21,2.665,22,0.544,23,0.968,24,3.492,25,1.352,26,1.808,27,4.221,28,3.34,29,3.34,30,0.968,31,1.808,32,2.665,33,0.657,34,0.072,35,1.149,36,0.657,37,0.657,38,1.808,39,2.665,40,2.665,41,2.665,42,0.657,43,1.143,44,0.693,45,0.28,46,0.657,47,1.684,48,1.143,49,1.407,50,1.143,51,1.407,52,0.359,53,0.359,54,1.379,55,2.463,56,1.808,57,1.808,58,1.808,59,1.808,60,2.073,61,4.404,62,4.292,63,0.788,64,2.665,65,2.665,66,1.808,67,3.492,68,1.808,69,1.808,70,0.945,71,1.407,72,1.808,73,1.808,74,0.027,75,0.039,76,0.027]],["title/modules/AppModule.html",[77,0.848,78,1.221]],["body/modules/AppModule.html",[1,1.94,3,0.378,4,0.378,9,0.295,15,0.693,28,2.156,29,2.156,34,0.072,44,0.899,45,0.295,46,0.693,47,1.751,48,1.205,49,1.484,50,1.205,51,1.484,52,0.378,53,0.378,63,0.831,74,0.028,75,0.041,76,0.028,77,0.693,78,2.436,79,0.693,80,0.831,81,2.063,82,2.063,83,2.063,84,0.997,85,1.484,86,1.484,87,1.484,88,1.484,89,1.484,90,1.658,91,1.73,92,1.73,93,1.73,94,1.73,95,1.73,96,1.751,97,1.205,98,1.205,99,1.907,100,1.751,101,1.751,102,2.771,103,1.484,104,1.205,105,2.771,106,0.997,107,1.484,108,2.771,109,1.907,110,1.907,111,1.907,112,1.907,113,1.484,114,1.907,115,1.907,116,1.907,117,1.907,118,1.907,119,1.907,120,1.205,121,0.997,122,1.205,123,1.907,124,1.907,125,1.907,126,1.907,127,1.907,128,1.907]],["title/modules/AppRoutingModule.html",[77,0.848,90,1.018]],["body/modules/AppRoutingModule.html",[3,0.579,4,0.579,9,0.452,34,0.072,44,0.734,45,0.452,52,0.579,53,0.579,71,2.881,74,0.043,75,0.055,76,0.043,79,1.059,84,1.525,90,1.613,100,1.843,101,2.34,106,1.525,129,2.917,130,2.917,131,3.702,132,2.881,133,2.126,134,1.271,135,2.881,136,2.917,137,2.917,138,2.917,139,2.917,140,2.917,141,2.917,142,2.917,143,2.917,144,2.917]],["title/modules/HomePageModule.html",[77,0.848,145,1.221]],["body/modules/HomePageModule.html",[0,1.412,3,0.536,4,0.536,9,0.418,34,0.072,44,0.877,45,0.418,46,0.981,52,0.536,53,0.536,63,1.177,70,2.354,74,0.04,75,0.052,76,0.04,77,0.981,79,0.981,80,1.177,81,2.478,82,1.707,83,1.707,84,1.412,96,2.227,97,1.707,98,1.707,100,1.707,101,2.227,106,1.412,107,2.741,132,2.102,135,2.102,145,2.311,146,2.102,147,2.102,148,2.701,149,3.523,150,2.102,151,3.523,152,2.102,153,2.701,154,2.701]],["title/injectables/OverLapGraphForWeatherPredictionService.html",[91,1.018,155,0.27]],["body/injectables/OverLapGraphForWeatherPredictionService.html",[3,0.276,4,0.276,9,0.216,11,0.952,15,0.794,17,0.979,22,0.658,23,0.794,25,0.506,30,0.506,33,0.506,34,0.072,35,0.506,36,0.506,37,0.506,42,0.506,43,0.881,44,0.434,45,0.216,52,0.276,53,0.276,54,1.66,63,0.607,74,0.021,75,0.032,76,0.021,91,0.952,120,1.381,121,2.137,122,1.93,134,1.175,155,0.252,156,0.506,157,1.701,158,1.084,159,1.143,160,1.175,161,2.185,162,1.393,163,2.696,164,3.053,165,3.053,166,3.317,167,3.519,168,3.053,169,3.053,170,1.393,171,1.701,172,2.696,173,3.053,174,2.376,175,2.185,176,2.185,177,2.185,178,2.185,179,3.519,180,2.185,181,2.696,182,3.053,183,1.084,184,0.607,185,0.728,186,1.393,187,1.393,188,1.084,189,1.393,190,1.393,191,3.519,192,3.049,193,1.393,194,1.393,195,1.084,196,1.393,197,1.393,198,1.393,199,1.393,200,1.393,201,1.393,202,1.393,203,1.393,204,1.393,205,1.393,206,1.393,207,1.393,208,1.393,209,1.393,210,1.393,211,1.393,212,1.393,213,1.393,214,1.393,215,1.393,216,1.393,217,1.084,218,2.098,219,1.393,220,1.393,221,1.393,222,1.393,223,2.185,224,2.185,225,2.185,226,2.185,227,2.098,228,1.393,229,1.393,230,1.393,231,2.581,232,1.393,233,1.393,234,1.393,235,1.393,236,2.185,237,2.185,238,2.185,239,1.393,240,1.393,241,1.393,242,1.393,243,1.393,244,1.393,245,1.393,246,1.393,247,1.393,248,1.393,249,1.393,250,2.696,251,1.393,252,1.393,253,1.393,254,1.393,255,1.393,256,1.393,257,1.393,258,1.393,259,1.393,260,1.393,261,1.393,262,2.185,263,1.393,264,1.084,265,1.393,266,1.393,267,1.393,268,1.393,269,1.393,270,1.393,271,1.393]],["title/injectables/RepositoryService.html",[92,1.018,155,0.27]],["body/injectables/RepositoryService.html",[3,0.369,4,0.369,9,0.288,11,1.715,15,0.988,17,1.169,22,0.56,23,0.988,25,1.169,30,1.286,33,1.169,34,0.072,35,1.169,36,1.286,37,1.169,42,1.286,44,0.54,45,0.288,52,0.369,53,0.369,54,1.402,74,0.027,75,0.04,76,0.027,92,1.186,113,2.755,134,1.186,155,0.314,156,0.676,159,1.423,160,1.186,174,2.755,184,0.811,185,0.973,218,2.118,272,1.448,273,1.72,274,3.768,275,3.063,276,2.721,277,2.721,278,1.86,279,3.936,280,1.86,281,1.86,282,2.755,283,1.86,284,2.721,285,2.755,286,2.755,287,3.541,288,3.768,289,3.936,290,1.86,291,1.86,292,2.721,293,2.721,294,1.86,295,1.86,296,1.448,297,1.86,298,2.721,299,1.86,300,3.063,301,2.721,302,2.721,303,2.721,304,1.86,305,1.86]],["title/injectables/TemperatureConverterService.html",[93,1.018,155,0.27]],["body/injectables/TemperatureConverterService.html",[3,0.592,4,0.592,9,0.462,17,1.084,22,0.899,23,1.364,25,1.493,30,1.364,33,1.084,34,0.07,35,1.084,37,1.084,42,1.084,44,0.592,45,0.462,52,0.592,53,0.592,74,0.044,75,0.055,76,0.044,93,1.637,155,0.433,156,1.084,160,1.791,184,1.301,286,2.923,300,2.323,306,3.199,307,2.323,308,3.756,309,2.985,310,3.756,311,2.985,312,2.985,313,2.985]],["title/injectables/UIServiceServiceService.html",[94,1.018,155,0.27]],["body/injectables/UIServiceServiceService.html",[3,0.343,4,0.343,9,0.268,11,1.593,15,0.937,17,1.12,22,0.521,23,0.937,25,1.12,30,1.328,33,0.937,34,0.072,35,0.937,36,1.12,37,0.937,42,0.937,43,1.63,44,0.512,45,0.268,46,1.12,52,0.343,53,0.343,54,1.124,55,2.983,74,0.025,75,0.038,76,0.025,94,1.124,134,0.754,155,0.298,156,0.628,159,1.349,160,1.67,171,2.66,184,0.754,185,0.905,192,2.4,231,2.007,273,1.63,282,2.4,285,1.346,314,2.983,315,1.346,316,3.656,317,3.084,318,3.418,319,2.579,320,1.73,321,3.656,322,1.73,323,4.31,324,1.73,325,2.579,326,3.834,327,2.579,328,1.73,329,2.845,330,2.579,331,2.579,332,1.73,333,2.579,334,2.579,335,1.73,336,1.73,337,2.579,338,1.73,339,1.73,340,3.418,341,1.73,342,1.73,343,1.73,344,3.418,345,1.73,346,1.73,347,1.73,348,1.73,349,1.73,350,1.73,351,2.579,352,1.73]],["title/injectables/UIToastService.html",[95,1.018,155,0.27]],["body/injectables/UIToastService.html",[3,0.381,4,0.381,9,0.298,11,1.566,15,1.012,17,1.19,22,0.578,23,1.012,25,1.19,30,1.306,33,0.698,34,0.072,35,0.698,36,1.012,37,0.698,42,1.012,44,0.553,45,0.298,46,1.306,52,0.381,53,0.553,54,0.837,60,1.495,74,0.028,75,0.041,76,0.028,95,1.214,134,1.214,155,0.321,156,0.698,159,1.457,160,1.832,184,0.837,185,1.005,273,1.761,275,3.097,296,1.495,329,2.168,353,1.495,354,4.41,355,3.595,356,3.595,357,1.921,358,1.921,359,1.921,360,3.278,361,3.278,362,4.205,363,1.921,364,2.786,365,1.921,366,2.786,367,2.786,368,1.921,369,1.921,370,1.921,371,1.921,372,2.786,373,2.786,374,1.921,375,1.921,376,1.921,377,1.921,378,1.921,379,1.921,380,1.921,381,1.921,382,2.786,383,1.921,384,2.786,385,1.921,386,2.786,387,1.921,388,1.921,389,1.921,390,1.921]],["title/coverage.html",[391,2.488]],["body/coverage.html",[0,1.95,1,1.286,9,0.457,10,2.296,34,0.069,36,1.072,70,1.543,74,0.043,75,0.055,76,0.043,91,1.286,92,1.286,93,1.286,94,1.286,95,1.286,120,1.865,121,1.543,122,1.865,155,0.511,157,2.296,158,2.296,188,2.296,195,2.902,272,2.296,306,2.296,307,2.296,314,2.296,315,2.296,353,2.296,391,2.296,392,2.95,393,2.95,394,2.95,395,4.43,396,2.95,397,2.95,398,2.95,399,2.95,400,3.729,401,2.95,402,2.95,403,2.95,404,2.95]],["title/dependencies.html",[80,1.225,405,1.946]],["body/dependencies.html",[34,0.072,45,0.461,46,1.08,47,2.593,48,1.879,50,1.879,74,0.044,75,0.055,76,0.044,80,1.296,103,2.916,104,2.368,106,1.555,150,2.314,152,2.314,183,2.314,217,2.314,406,4.534,407,2.973,408,2.973,409,3.747,410,2.973,411,3.747,412,2.973,413,2.973,414,2.973,415,2.973,416,2.973,417,2.973,418,2.973,419,2.973,420,2.973,421,2.973]],["title/index.html",[22,0.703,422,1.817]],["body/index.html",[1,1.955,2,2.072,34,0.069,63,1.16,70,2.036,74,0.039,75,0.051,76,0.039,77,0.967,78,2.515,79,0.967,80,1.16,81,1.683,82,1.683,83,1.683,84,1.392,85,2.072,86,2.072,87,2.072,88,2.072,89,2.072,90,1.697,91,1.697,92,1.697,93,1.697,94,1.697,95,1.697,96,2.206,97,1.683,98,1.683,133,1.392,145,2.161,146,2.072,147,2.072,156,0.967,227,2.716,264,2.072,422,2.072,423,2.663]],["title/modules.html",[79,1.161]],["body/modules.html",[34,0.061,74,0.052,75,0.061,76,0.052,78,1.841,79,1.279,90,1.534,104,2.625,121,1.841,145,1.841,424,4.154,425,4.154,426,4.419,427,3.52]],["title/routes.html",[133,1.672]],["body/routes.html",[34,0.064,74,0.055,75,0.064,76,0.055,133,1.967]]],"invertedIndex":[["",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"routes.html":{}}}],["0",{"_index":195,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["0.0",{"_index":255,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["0.1",{"_index":247,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["0.9.1",{"_index":421,"title":{},"body":{"dependencies.html":{}}}],["0/3",{"_index":401,"title":{},"body":{"coverage.html":{}}}],["0/37",{"_index":398,"title":{},"body":{"coverage.html":{}}}],["000",{"_index":221,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["1",{"_index":262,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["1.9.0",{"_index":419,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":225,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["100",{"_index":395,"title":{},"body":{"coverage.html":{}}}],["1200",{"_index":369,"title":{},"body":{"injectables/UIToastService.html":{}}}],["2",{"_index":227,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"index.html":{}}}],["2.5.4",{"_index":415,"title":{},"body":{"dependencies.html":{}}}],["2.9.3",{"_index":412,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":399,"title":{},"body":{"coverage.html":{}}}],["273.15",{"_index":313,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["3",{"_index":423,"title":{},"body":{"index.html":{}}}],["3/3",{"_index":396,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":264,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"index.html":{}}}],["5.0.0",{"_index":411,"title":{},"body":{"dependencies.html":{}}}],["5.0.7",{"_index":409,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":400,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":352,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["6",{"_index":228,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["6.5.1",{"_index":417,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":402,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":205,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["8.2.14",{"_index":406,"title":{},"body":{"dependencies.html":{}}}],["actual_component",{"_index":73,"title":{},"body":{"components/AppComponent.html":{}}}],["angular/common",{"_index":150,"title":{},"body":{"modules/HomePageModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"injectables/RepositoryService.html":{}}}],["angular/core",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":152,"title":{},"body":{"modules/HomePageModule.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"dependencies.html":{}}}],["animation",{"_index":196,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["animationduration",{"_index":194,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["app",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["app.component",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":21,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":19,"title":{},"body":{"components/AppComponent.html":{}}}],["app/over",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["app/repository.service",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["app/temperature",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["app/uiservice",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["app/uitoast.service",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"coverage.html":{},"index.html":{}}}],["appcomponent.ts",{"_index":32,"title":{},"body":{"components/AppComponent.html":{}}}],["application",{"_index":40,"title":{},"body":{"components/AppComponent.html":{}}}],["appmodule",{"_index":78,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["approutingmodule",{"_index":90,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"index.html":{},"modules.html":{}}}],["approutingmodule,httpclientmodule",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["array",{"_index":177,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["async",{"_index":275,"title":{},"body":{"injectables/RepositoryService.html":{},"injectables/UIToastService.html":{}}}],["available",{"_index":427,"title":{},"body":{"modules.html":{}}}],["await",{"_index":366,"title":{},"body":{"injectables/UIToastService.html":{}}}],["backgroundcolor",{"_index":248,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bar",{"_index":217,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"dependencies.html":{}}}],["bar._model.x",{"_index":224,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bar._model.y",{"_index":226,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bar/ngx",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["beginatzero",{"_index":240,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["beginning",{"_index":41,"title":{},"body":{"components/AppComponent.html":{}}}],["bootstrap",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["bordercapstyle",{"_index":251,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bordercolor",{"_index":249,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["borderdash",{"_index":253,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["borderdashoffset",{"_index":254,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["borderjoinstyle",{"_index":256,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bottom",{"_index":211,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["browse",{"_index":426,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browsermodule",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["butt",{"_index":252,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["buttons",{"_index":378,"title":{},"body":{"injectables/UIToastService.html":{}}}],["cancel",{"_index":389,"title":{},"body":{"injectables/UIToastService.html":{}}}],["canvas",{"_index":175,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["center",{"_index":209,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart",{"_index":173,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart(linecanvas.nativeelement",{"_index":189,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart.defaults.global.defaultfontfamily",{"_index":207,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart.defaults.global.defaultfontstyle",{"_index":206,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart.helpers.fontstring",{"_index":204,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart.js",{"_index":183,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"dependencies.html":{}}}],["chartinstance",{"_index":199,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chartinstance.controller.getdatasetmeta(i",{"_index":215,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chartinstance.ctx",{"_index":202,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["cityname",{"_index":287,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["class",{"_index":53,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["clearinterval(interval",{"_index":351,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["click",{"_index":374,"title":{},"body":{"injectables/UIToastService.html":{}}}],["clicked",{"_index":386,"title":{},"body":{"injectables/UIToastService.html":{}}}],["close",{"_index":375,"title":{},"body":{"injectables/UIToastService.html":{}}}],["cluster_appmodule",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_bootstrap",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_declarations",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_homepagemodule",{"_index":146,"title":{},"body":{"modules/HomePageModule.html":{},"index.html":{}}}],["cluster_homepagemodule_declarations",{"_index":147,"title":{},"body":{"modules/HomePageModule.html":{},"index.html":{}}}],["color",{"_index":167,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["commonmodule",{"_index":149,"title":{},"body":{"modules/HomePageModule.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/HomePageModule.html":{},"coverage.html":{}}}],["component_template",{"_index":68,"title":{},"body":{"components/AppComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["configuration",{"_index":13,"title":{},"body":{"components/AppComponent.html":{}}}],["console.log('cancel",{"_index":390,"title":{},"body":{"injectables/UIToastService.html":{}}}],["console.log('favorite",{"_index":385,"title":{},"body":{"injectables/UIToastService.html":{}}}],["console.log(err",{"_index":302,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["const",{"_index":134,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["constructor",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["constructor(http",{"_index":278,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["constructor(loading",{"_index":320,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["constructor(platform",{"_index":26,"title":{},"body":{"components/AppComponent.html":{}}}],["constructor(private",{"_index":339,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["constructor(public",{"_index":296,"title":{},"body":{"injectables/RepositoryService.html":{},"injectables/UIToastService.html":{}}}],["constructor(toastcontroller",{"_index":357,"title":{},"body":{"injectables/UIToastService.html":{}}}],["continue",{"_index":337,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["converter.service",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["converter.service.ts",{"_index":307,"title":{},"body":{"injectables/TemperatureConverterService.html":{},"coverage.html":{}}}],["converter.service.ts:10",{"_index":311,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["converter.service.ts:6",{"_index":309,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["core",{"_index":413,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":391,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":334,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["cssclass:\"toast",{"_index":370,"title":{},"body":{"injectables/UIToastService.html":{}}}],["ctx",{"_index":201,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["ctx.fillstyle",{"_index":220,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["ctx.filltext(data",{"_index":223,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["ctx.font",{"_index":203,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["ctx.textalign",{"_index":208,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["ctx.textbaseline",{"_index":210,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["current",{"_index":284,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["data",{"_index":218,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{}}}],["dataset",{"_index":213,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["dataset.data[index",{"_index":219,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["datasets",{"_index":245,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["date",{"_index":176,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["days",{"_index":293,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["declarations",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["default",{"_index":335,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["defined",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["dependencies",{"_index":80,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["dialog",{"_index":326,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["directive",{"_index":66,"title":{},"body":{"components/AppComponent.html":{}}}],["directives",{"_index":72,"title":{},"body":{"components/AppComponent.html":{}}}],["dismiss",{"_index":325,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["dismissloading",{"_index":318,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["display",{"_index":191,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["documentation",{"_index":392,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AppComponent.html":{}}}],["done",{"_index":387,"title":{},"body":{"injectables/UIToastService.html":{}}}],["drawonchartarea",{"_index":237,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["duration",{"_index":368,"title":{},"body":{"injectables/UIToastService.html":{}}}],["dynamic",{"_index":407,"title":{},"body":{"dependencies.html":{}}}],["element",{"_index":65,"title":{},"body":{"components/AppComponent.html":{}}}],["enabled",{"_index":230,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["entrycomponents",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":301,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["error",{"_index":289,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["export",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["exports",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["false",{"_index":192,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/UIServiceServiceService.html":{}}}],["favorite",{"_index":383,"title":{},"body":{"injectables/UIToastService.html":{}}}],["fff",{"_index":260,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{}}}],["fill",{"_index":181,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["five",{"_index":292,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["formsmodule",{"_index":151,"title":{},"body":{"modules/HomePageModule.html":{}}}],["full",{"_index":138,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["function",{"_index":198,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["getweathervaluecurrent",{"_index":276,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluecurrent(params",{"_index":281,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluecurrent(params:string",{"_index":304,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluefivedays",{"_index":277,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluefivedays(params",{"_index":290,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluefivedays(params:string",{"_index":297,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["graph",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{},"modules.html":{}}}],["gridlines",{"_index":236,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["handler",{"_index":384,"title":{},"body":{"injectables/UIToastService.html":{}}}],["header",{"_index":373,"title":{},"body":{"injectables/UIToastService.html":{}}}],["home",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{}}}],["home.page",{"_index":153,"title":{},"body":{"modules/HomePageModule.html":{}}}],["homepage",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"modules/HomePageModule.html":{},"coverage.html":{},"index.html":{}}}],["homepagemodule",{"_index":145,"title":{"modules/HomePageModule.html":{}},"body":{"modules/HomePageModule.html":{},"index.html":{},"modules.html":{}}}],["hoover",{"_index":180,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["hover",{"_index":193,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["html",{"_index":64,"title":{},"body":{"components/AppComponent.html":{}}}],["htmlionloadingelement",{"_index":331,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["http",{"_index":274,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["httpclient",{"_index":279,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["httpclientmodule",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["icon",{"_index":380,"title":{},"body":{"injectables/UIToastService.html":{}}}],["identifier",{"_index":393,"title":{},"body":{"coverage.html":{}}}],["if(index!=5",{"_index":222,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["ignore",{"_index":186,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["import",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["import('./home/home.module').then",{"_index":140,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["imports",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["initialize",{"_index":39,"title":{},"body":{"components/AppComponent.html":{}}}],["initializeapp",{"_index":24,"title":{},"body":{"components/AppComponent.html":{}}}],["inject",{"_index":159,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["injectable",{"_index":155,"title":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{}}}],["injectables",{"_index":156,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"index.html":{}}}],["interval",{"_index":347,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["ionic",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["ionic/angular",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/HomePageModule.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"dependencies.html":{}}}],["ionicmodule",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{}}}],["ionicmodule.forroot",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["ionicroutestrategy",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["issue",{"_index":361,"title":{},"body":{"injectables/UIToastService.html":{}}}],["item",{"_index":62,"title":{},"body":{"components/AppComponent.html":{}}}],["js",{"_index":414,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":288,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["json.stringify(mvalue",{"_index":303,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["kelvintocelcius",{"_index":308,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["kelvintocelcius(params",{"_index":310,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["label",{"_index":166,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["labels",{"_index":244,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["lap",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["legend",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"index.html":{}}}],["line",{"_index":243,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["linecanvas",{"_index":163,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["linechart",{"_index":172,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["linetension",{"_index":246,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["load",{"_index":345,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["load.present().then",{"_index":346,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["loadchildren",{"_index":139,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["loader",{"_index":316,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["loaderloading",{"_index":317,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["loading",{"_index":323,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["loadingcontroller",{"_index":321,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["m",{"_index":141,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["m.homepagemodule",{"_index":142,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["maintainaspectratio",{"_index":233,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["matching",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"routes.html":{}}}],["max",{"_index":242,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["mdate",{"_index":164,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["mdatetemp",{"_index":165,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["menu",{"_index":61,"title":{},"body":{"components/AppComponent.html":{}}}],["message",{"_index":329,"title":{},"body":{"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["meta",{"_index":214,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["meta.data.foreach(function",{"_index":216,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["metadata",{"_index":14,"title":{},"body":{"components/AppComponent.html":{}}}],["methods",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["min",{"_index":241,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["minimum",{"_index":182,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["minumun",{"_index":178,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["module",{"_index":77,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["modules",{"_index":79,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"index.html":{},"modules.html":{}}}],["mvalue=await",{"_index":298,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["name",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["native/core",{"_index":408,"title":{},"body":{"dependencies.html":{}}}],["native/splash",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["native/status",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["network",{"_index":360,"title":{},"body":{"injectables/UIToastService.html":{}}}],["new",{"_index":188,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["ngmodule",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{}}}],["nstace",{"_index":333,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["null",{"_index":350,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["number",{"_index":312,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["object",{"_index":174,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{}}}],["oncomplete",{"_index":197,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["option",{"_index":364,"title":{},"body":{"injectables/UIToastService.html":{}}}],["optional",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["options",{"_index":190,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["out",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["overlapgraphforweatherpredictionservice",{"_index":91,"title":{"injectables/OverLapGraphForWeatherPredictionService.html":{}},"body":{"modules/AppModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{},"index.html":{}}}],["overview",{"_index":422,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":405,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["parameters",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["params",{"_index":286,"title":{},"body":{"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{}}}],["path",{"_index":135,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{}}}],["pathmatch",{"_index":137,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["platform",{"_index":27,"title":{},"body":{"components/AppComponent.html":{}}}],["pointbackgroundcolor",{"_index":259,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointbordercolor",{"_index":258,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointborderwidth",{"_index":261,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhitradius",{"_index":270,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhoverbackgroundcolor",{"_index":265,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhoverbordercolor",{"_index":266,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhoverborderwidth",{"_index":268,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhoverradius",{"_index":263,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointradius",{"_index":269,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["position",{"_index":376,"title":{},"body":{"injectables/UIToastService.html":{}}}],["prediction.service",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["prediction.service.ts",{"_index":158,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["prediction.service.ts:30",{"_index":170,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["preloadallmodules",{"_index":131,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["preloadingstrategy",{"_index":144,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["presenttoast",{"_index":355,"title":{},"body":{"injectables/UIToastService.html":{}}}],["presenttoastwithoptions",{"_index":356,"title":{},"body":{"injectables/UIToastService.html":{}}}],["private",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"injectables/UIServiceServiceService.html":{}}}],["properties",{"_index":273,"title":{},"body":{"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["provide",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["providedin",{"_index":184,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["providers",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["public",{"_index":160,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["redirectto",{"_index":136,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["repositoryservice",{"_index":92,"title":{"injectables/RepositoryService.html":{}},"body":{"modules/AppModule.html":{},"injectables/RepositoryService.html":{},"coverage.html":{},"index.html":{}}}],["reset",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["responsive",{"_index":232,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["result",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"routes.html":{}}}],["results",{"_index":76,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"routes.html":{}}}],["return",{"_index":300,"title":{},"body":{"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{}}}],["returns",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["rgba(220,220,220,1",{"_index":267,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["rgba(75,192,192,1",{"_index":250,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["role",{"_index":388,"title":{},"body":{"injectables/UIToastService.html":{}}}],["root",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["root'},{'name",{"_index":69,"title":{},"body":{"components/AppComponent.html":{}}}],["round",{"_index":257,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["routereusestrategy",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["routermodule",{"_index":132,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{}}}],["routermodule.forchild",{"_index":154,"title":{},"body":{"modules/HomePageModule.html":{}}}],["routermodule.forroot(routes",{"_index":143,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":133,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"index.html":{},"routes.html":{}}}],["routing.module",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":130,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["rxjs",{"_index":416,"title":{},"body":{"dependencies.html":{}}}],["scales",{"_index":234,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["screen",{"_index":410,"title":{},"body":{"dependencies.html":{}}}],["screen/ngx",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["selector",{"_index":16,"title":{},"body":{"components/AppComponent.html":{}}}],["service",{"_index":185,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["service.service",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["service.service.ts",{"_index":315,"title":{},"body":{"injectables/UIServiceServiceService.html":{},"coverage.html":{}}}],["service.service.ts:13",{"_index":322,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["service.service.ts:24",{"_index":332,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["service.service.ts:29",{"_index":336,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["service.service.ts:35",{"_index":328,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["service.service.ts:49",{"_index":324,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["setinterval",{"_index":348,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["show",{"_index":171,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/UIServiceServiceService.html":{}}}],["showbackdrop",{"_index":342,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["showgrapg",{"_index":161,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["showgrapg(linechart",{"_index":162,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["showgrapg(linechart,linecanvas,mdate,mdatetemp,label,color,yaxismin,yaxismax",{"_index":187,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["showloading",{"_index":319,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["showloading(message",{"_index":327,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["side",{"_index":379,"title":{},"body":{"injectables/UIToastService.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["spangaps",{"_index":271,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["splashscreen",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["src/app/app",{"_index":129,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:17",{"_index":31,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:35",{"_index":38,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/home/home.module.ts",{"_index":148,"title":{},"body":{"modules/HomePageModule.html":{}}}],["src/app/home/home.page.ts",{"_index":397,"title":{},"body":{"coverage.html":{}}}],["src/app/over",{"_index":157,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["src/app/repository.service.ts",{"_index":272,"title":{},"body":{"injectables/RepositoryService.html":{},"coverage.html":{}}}],["src/app/repository.service.ts:12",{"_index":280,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["src/app/repository.service.ts:19",{"_index":294,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["src/app/repository.service.ts:27",{"_index":291,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["src/app/repository.service.ts:45",{"_index":283,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["src/app/temperature",{"_index":306,"title":{},"body":{"injectables/TemperatureConverterService.html":{},"coverage.html":{}}}],["src/app/uiservice",{"_index":314,"title":{},"body":{"injectables/UIServiceServiceService.html":{},"coverage.html":{}}}],["src/app/uitoast.service.ts",{"_index":353,"title":{},"body":{"injectables/UIToastService.html":{},"coverage.html":{}}}],["src/app/uitoast.service.ts:14",{"_index":358,"title":{},"body":{"injectables/UIToastService.html":{}}}],["src/app/uitoast.service.ts:21",{"_index":365,"title":{},"body":{"injectables/UIToastService.html":{}}}],["src/app/uitoast.service.ts:26",{"_index":359,"title":{},"body":{"injectables/UIToastService.html":{}}}],["src/app/uitoast.service.ts:38",{"_index":363,"title":{},"body":{"injectables/UIToastService.html":{}}}],["star",{"_index":381,"title":{},"body":{"injectables/UIToastService.html":{}}}],["start",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"injectables/UIToastService.html":{}}}],["statements",{"_index":394,"title":{},"body":{"coverage.html":{}}}],["statusbar",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["string",{"_index":282,"title":{},"body":{"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AppComponent.html":{}}}],["styleurls",{"_index":18,"title":{},"body":{"components/AppComponent.html":{}}}],["supplies",{"_index":12,"title":{},"body":{"components/AppComponent.html":{}}}],["support",{"_index":424,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":425,"title":{},"body":{"modules.html":{}}}],["table",{"_index":404,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":403,"title":{},"body":{"coverage.html":{}}}],["temperatureconverterservice",{"_index":93,"title":{"injectables/TemperatureConverterService.html":{}},"body":{"modules/AppModule.html":{},"injectables/TemperatureConverterService.html":{},"coverage.html":{},"index.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{}}}],["templateurl",{"_index":20,"title":{},"body":{"components/AppComponent.html":{}}}],["temprature",{"_index":179,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["text",{"_index":382,"title":{},"body":{"injectables/UIToastService.html":{}}}],["then(load",{"_index":343,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.chart",{"_index":200,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["this.data.datasets.foreach(function",{"_index":212,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["this.http.get('http://api.openweathermap.org/data/2.5//weather?q='+params+'&appid=d994b85acc1528b1a51fb0273b7ca7c4').topromise().then(data",{"_index":305,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["this.http.get('http://api.openweathermap.org/data/2.5/forecast?q='+params+'&appid=d994b85acc1528b1a51fb0273b7ca7c4').topromise().then(data",{"_index":299,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["this.initializeapp",{"_index":56,"title":{},"body":{"components/AppComponent.html":{}}}],["this.loader",{"_index":344,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.loader.dismiss().then",{"_index":349,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.loaderloading",{"_index":340,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.loading.create",{"_index":341,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.platform.ready().then",{"_index":57,"title":{},"body":{"components/AppComponent.html":{}}}],["this.splashscreen.hide",{"_index":59,"title":{},"body":{"components/AppComponent.html":{}}}],["this.statusbar.styledefault",{"_index":58,"title":{},"body":{"components/AppComponent.html":{}}}],["this.toastcontroller.create",{"_index":367,"title":{},"body":{"injectables/UIToastService.html":{}}}],["ticks",{"_index":238,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["toast",{"_index":362,"title":{},"body":{"injectables/UIToastService.html":{}}}],["toast.present",{"_index":372,"title":{},"body":{"injectables/UIToastService.html":{}}}],["toastcontroller",{"_index":354,"title":{},"body":{"injectables/UIToastService.html":{}}}],["tooltips",{"_index":229,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["top",{"_index":377,"title":{},"body":{"injectables/UIToastService.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AppComponent.html":{}}}],["true",{"_index":231,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/UIServiceServiceService.html":{}}}],["tslib",{"_index":418,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{}}}],["ui",{"_index":330,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["uiloading",{"_index":338,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["uiserviceserviceservice",{"_index":94,"title":{"injectables/UIServiceServiceService.html":{}},"body":{"modules/AppModule.html":{},"injectables/UIServiceServiceService.html":{},"coverage.html":{},"index.html":{}}}],["uitoastservice",{"_index":95,"title":{"injectables/UIToastService.html":{}},"body":{"modules/AppModule.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"index.html":{}}}],["url",{"_index":295,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["useclass",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["value",{"_index":285,"title":{},"body":{"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{}}}],["var",{"_index":67,"title":{},"body":{"components/AppComponent.html":{}}}],["void",{"_index":43,"title":{},"body":{"components/AppComponent.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/UIServiceServiceService.html":{}}}],["weather",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["width",{"_index":371,"title":{},"body":{"injectables/UIToastService.html":{}}}],["xaxes",{"_index":235,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["yaxes",{"_index":239,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["yaxismax",{"_index":169,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["yaxismin",{"_index":168,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["zone.js",{"_index":420,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        Supplies configuration metadata for an App component.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                app.component.scss\n            \n\n\n\n            \n                templateUrl\n                app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                initializeApp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(platform: Platform, splashScreen: SplashScreen, statusBar: StatusBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor of AppComponent.ts\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        platform\n                                                  \n                                                        \n                                                                    Platform\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        splashScreen\n                                                  \n                                                        \n                                                                    SplashScreen\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusBar\n                                                  \n                                                        \n                                                                    StatusBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            initializeApp\n                        \n                        \n                    \n                \n            \n            \n                \ninitializeApp()\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:35\n                \n            \n\n\n            \n                \n                    Initialize Application at beginning\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\nimport { Platform } from '@ionic/angular';\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\n/**\n * Supplies configuration metadata for an App component.\n*/\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss']\n})\n/**\n * Components of platform, splashScreen, statusBar\n*/\nexport class AppComponent {\n/**\n * Constructor of AppComponent.ts\n * @constructor for App Component\n * @param {Platform} platform\n * @param {SplashScreen} splashScreen\n * @param {StatusBar} statusBar\n*/\n  constructor(\n    private platform: Platform,\n    private splashScreen: SplashScreen,\n    private statusBar: StatusBar\n  ) {\n    this.initializeApp();\n  }\n/**\n * Initialize Application at beginning\n*/\n  initializeApp() {\n    this.platform.ready().then(() => {\n      this.statusBar.styleDefault();\n      this.splashScreen.hide();\n    });\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        Start Menu\n      \n    \n    \n      \n        Menu Item\n        Menu Item\n        Menu Item\n        Menu Item\n        Menu Item\n      \n    \n  \n  \n\n\n    \n\n    \n                \n                    app.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Start Menu                            Menu Item        Menu Item        Menu Item        Menu Item        Menu Item              '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'HomePage', 'selector': 'app-home'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nOverLapGraphForWeatherPredictionService\n\nOverLapGraphForWeatherPredictionService\n\nAppModule -->\n\nOverLapGraphForWeatherPredictionService->AppModule\n\n\n\n\n\nRepositoryService\n\nRepositoryService\n\nAppModule -->\n\nRepositoryService->AppModule\n\n\n\n\n\nTemperatureConverterService\n\nTemperatureConverterService\n\nAppModule -->\n\nTemperatureConverterService->AppModule\n\n\n\n\n\nUIServiceServiceService\n\nUIServiceServiceService\n\nAppModule -->\n\nUIServiceServiceService->AppModule\n\n\n\n\n\nUIToastService\n\nUIToastService\n\nAppModule -->\n\nUIToastService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            OverLapGraphForWeatherPredictionService\n                        \n                        \n                            RepositoryService\n                        \n                        \n                            TemperatureConverterService\n                        \n                        \n                            UIServiceServiceService\n                        \n                        \n                            UIToastService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\n\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { RepositoryService } from '../app/repository.service';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { UIServiceServiceService } from '../app/uiservice-service.service';\nimport { UIToastService } from '../app/uitoast.service';\nimport { TemperatureConverterService } from '../app/temperature-converter.service';\nimport { OverLapGraphForWeatherPredictionService } from '../app/over-lap-graph-for-weather-prediction.service';\n\n@NgModule({\n  declarations: [AppComponent],\n  entryComponents: [],\n  imports: [BrowserModule, IonicModule.forRoot(), AppRoutingModule,HttpClientModule],\n  providers: [\n    StatusBar,\n    SplashScreen,\n    RepositoryService,\n    UIServiceServiceService,\n    UIToastService,\n    TemperatureConverterService,\n    OverLapGraphForWeatherPredictionService,\n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'home', pathMatch: 'full' },\n  { path: 'home', loadChildren: () => \"import('./home/home.module').then( m => m.HomePageModule)\"},\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomePageModule.html":{"url":"modules/HomePageModule.html","title":"module - HomePageModule","body":"\n                   \n\n\n\n\n    Modules\n    HomePageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HomePageModule\n\n\n\ncluster_HomePageModule_declarations\n\n\n\n\nHomePage\n\nHomePage\n\n\n\nHomePageModule\n\nHomePageModule\n\nHomePageModule -->\n\nHomePage->HomePageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/home/home.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            HomePage\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { HomePage } from './home.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        component: HomePage\n      }\n    ])\n  ],\n  declarations: [HomePage]\n})\nexport class HomePageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OverLapGraphForWeatherPredictionService.html":{"url":"injectables/OverLapGraphForWeatherPredictionService.html","title":"injectable - OverLapGraphForWeatherPredictionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OverLapGraphForWeatherPredictionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/over-lap-graph-for-weather-prediction.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                showGrapg\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            showGrapg\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showGrapg(lineChart, lineCanvas, mDate, mDateTemp, label, color, yAxisMin, yAxisMax)\n                \n            \n\n\n            \n                \n                    Defined in src/app/over-lap-graph-for-weather-prediction.service.ts:30\n                \n            \n\n\n            \n                \n                    Show Weather Graph\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    lineChart\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Chart object\n\n                                    \n                                \n                                \n                                    lineCanvas\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Canvas object\n\n                                    \n                                \n                                \n                                    mDate\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Date array\n\n                                    \n                                \n                                \n                                    mDateTemp\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Minumun temprature\n\n                                    \n                                \n                                \n                                    label\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        For hoover\n\n                                    \n                                \n                                \n                                    color\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Fill color of graph\n\n                                    \n                                \n                                \n                                    yAxisMin\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Minimum temprature of graph\n\n                                    \n                                \n                                \n                                    yAxisMax\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Minimum temprature of graph\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Chart } from 'chart.js';\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service for Graph\n*/\nexport class OverLapGraphForWeatherPredictionService {\n\n/**\n * @ignore\n */\n  constructor() { }\n\n/**\n * Show Weather Graph\n * @param {Chart} lineChart Chart object\n * @param lineCanvas Canvas object\n * @param mDate Date array\n * @param mDateTemp Minumun temprature\n * @param label For hoover\n * @param color Fill color of graph\n * @param yAxisMin Minimum temprature of graph\n * @param yAxisMax Minimum temprature of graph\n */\n  public showGrapg(lineChart,lineCanvas,mDate,mDateTemp,label,color,yAxisMin,yAxisMax) {\n    lineChart = new Chart(lineCanvas.nativeElement,\n      {\n        options: {\n          legend: {\n            display: false\n          },\n          hover: {\n            animationDuration: 0\n          },\n          animation: {\n            onComplete: function () {\n              const chartInstance = this.chart,\n                ctx = chartInstance.ctx;\n\n              ctx.font = Chart.helpers.fontString(\n                8,\n                Chart.defaults.global.defaultFontStyle,\n                Chart.defaults.global.defaultFontFamily\n              );\n              ctx.textAlign = \"center\";\n              ctx.textBaseline = \"bottom\";\n\n              this.data.datasets.forEach(function (dataset, i) {\n                const meta = chartInstance.controller.getDatasetMeta(i);\n                meta.data.forEach(function (bar, index) {\n                  const data = dataset.data[index];\n                  ctx.fillStyle = \"#000\";\n                  if(index!=5)\n                  ctx.fillText(data, bar._model.x +10, bar._model.y - 2);\n                  else\n                  ctx.fillText(data, bar._model.x -6, bar._model.y - 2);\n                });\n              });\n            }\n          },\n          tooltips: {\n            enabled: true\n          },\n          responsive: true, \n          maintainAspectRatio: false,\n          scales: {\n            xAxes: [\n              {\n                display: false,\n                gridLines: {\n                  drawOnChartArea: false\n                },\n                ticks: {\n                  display: false\n                }\n              }\n            ],\n            yAxes: [\n              {\n                display: true,\n                gridLines: {\n                  drawOnChartArea: false,\n                  display: false\n                },\n                ticks: {\n                  // beginAtZero: true,\n                  min: yAxisMin,\n                  max: yAxisMax,\n                  display: false\n                }\n              }\n            ]\n          }\n        },\n        type: 'line',\n        data: {\n          labels: mDate,\n          datasets: [\n\n            {\n              label: label,\n              fill: true,\n              lineTension: 0.1,\n              backgroundColor: color,\n              borderColor: 'rgba(75,192,192,1)',\n              borderCapStyle: 'butt',\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: 'round',\n              pointBorderColor: 'rgba(75,192,192,1)',\n              pointBackgroundColor: '#fff',\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n              pointHoverBorderColor: 'rgba(220,220,220,1)',\n              pointHoverBorderWidth: 2,\n              pointRadius: 1,\n              pointHitRadius: 10,\n              data: mDateTemp,\n              spanGaps: false,\n            }\n\n          ]\n        }\n      });\n\n\n\n\n\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepositoryService.html":{"url":"injectables/RepositoryService.html","title":"injectable - RepositoryService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RepositoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/repository.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                http\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getWeatherValueCurrent\n                            \n                            \n                                    Async\n                                getWeatherValueFiveDays\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/repository.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor description\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                From angular/common/http\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getWeatherValueCurrent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeatherValueCurrent(params: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/repository.service.ts:45\n                \n            \n\n\n            \n                \n                    Get Current value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        CityName\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        JSON Object or 'Error'\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getWeatherValueFiveDays\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeatherValueFiveDays(params: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/repository.service.ts:27\n                \n            \n\n\n            \n                \n                    Get five days Value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        CityName\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        JSON Object or 'Error'\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            http\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HttpClient\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/repository.service.ts:19\n                            \n                        \n\n                \n                    \n                        From angular/common/http\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service for Get JSON from URL\n*/\nexport class RepositoryService {  \n  \n\n /**\n * Constructor description\n * @param {HttpClient} http From angular/common/http\n */\n  constructor(public http: HttpClient) { }\n\n\n/**\n * Get five days Value\n * @param params CityName\n * @returns JSON Object or 'Error'\n */\n  async getWeatherValueFiveDays(params:string) {  \n\n    const mValue=await this.http.get('http://api.openweathermap.org/data/2.5/forecast?q='+params+'&APPID=d994b85acc1528b1a51fb0273b7ca7c4').toPromise().then(data => {      \n      return data\n    }, err => {\n      console.log(err);\n      return \"Error\"\n    });\n\n    return JSON.stringify(mValue)   \n  \n  }\n\n  /**\n   * Get Current value\n   * @param params CityName\n   * @returns JSON Object or 'Error'\n   */\n  async getWeatherValueCurrent(params:string) {  \n\n    const mValue=await this.http.get('http://api.openweathermap.org/data/2.5//weather?q='+params+'&APPID=d994b85acc1528b1a51fb0273b7ca7c4').toPromise().then(data => {      \n      return data\n    }, err => {\n      console.log(err);\n      return \"Error\"\n    });\n\n    return JSON.stringify(mValue)   \n  \n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TemperatureConverterService.html":{"url":"injectables/TemperatureConverterService.html","title":"injectable - TemperatureConverterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TemperatureConverterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/temperature-converter.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                kelvinToCelcius\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/temperature-converter.service.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            kelvinToCelcius\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    kelvinToCelcius(params)\n                \n            \n\n\n            \n                \n                    Defined in src/app/temperature-converter.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TemperatureConverterService {\n\n  constructor() { }\n\n  public kelvinToCelcius(params){\n    return (params-273.15)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UIServiceServiceService.html":{"url":"injectables/UIServiceServiceService.html","title":"injectable - UIServiceServiceService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UIServiceServiceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/uiservice-service.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                loader\n                            \n                            \n                                    Private\n                                loaderLoading\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dismissLoading\n                            \n                            \n                                    Public\n                                showLoading\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loading: LoadingController)\n                    \n                \n                        \n                            \n                                Defined in src/app/uiservice-service.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor description\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        loading\n                                                  \n                                                        \n                                                                    LoadingController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                From ionic/angular\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            dismissLoading\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    dismissLoading()\n                \n            \n\n\n            \n                \n                    Defined in src/app/uiservice-service.service.ts:49\n                \n            \n\n\n            \n                \n                    Dismiss Loading Dialog\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            showLoading\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showLoading(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/uiservice-service.service.ts:35\n                \n            \n\n\n            \n                \n                    Show Loading Dialog\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        UI Loading Message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loader\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLIonLoadingElement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/uiservice-service.service.ts:24\n                            \n                        \n\n                \n                    \n                        Loader nstace create\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loaderLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/uiservice-service.service.ts:29\n                            \n                        \n\n                \n                    \n                        Continue show loading dialog\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { LoadingController } from '@ionic/angular';\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n\n/**\n * Service for UILoading\n*/\nexport class UIServiceServiceService {\n\n/**\n * Constructor description\n * @param {LoadingController} loading From ionic/angular\n */\n  constructor(private loading: LoadingController) { }\n\n/**\n * Loader nstace create\n */\n  private loader: HTMLIonLoadingElement;\n\n/**\n * Continue show loading dialog\n */\n  private loaderLoading = false;\n\n  /**\n   * Show Loading Dialog\n   * @param message UI Loading Message\n   */\n  public showLoading(message: string) {\n      this.loaderLoading = true;\n      this.loading.create({\n          message,\n          showBackdrop: true\n      }).then(load => {\n          this.loader = load;\n          load.present().then(() => { this.loaderLoading = false; });\n      });\n  }\n\n  /**\n   * Dismiss Loading Dialog\n   */\n  public dismissLoading() {\n      const interval = setInterval(() => {\n          if (this.loader || !this.loaderLoading) {\n              this.loader.dismiss().then(() => { this.loader = null; clearInterval(interval)});\n          } else if (!this.loader && !this.loaderLoading) {\n              clearInterval(interval);\n          }\n      }, 500);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UIToastService.html":{"url":"injectables/UIToastService.html","title":"injectable - UIToastService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UIToastService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/uitoast.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toastController\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                presentToast\n                            \n                            \n                                    Public\n                                    Async\n                                presentToastWithOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(toastController: ToastController)\n                    \n                \n                        \n                            \n                                Defined in src/app/uitoast.service.ts:14\n                            \n                        \n\n                \n                    \n                            Constructor description\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        toastController\n                                                  \n                                                        \n                                                                    ToastController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                From ionic/angular\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            presentToast\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    presentToast()\n                \n            \n\n\n            \n                \n                    Defined in src/app/uitoast.service.ts:26\n                \n            \n\n\n            \n                \n                    Network issue Toast\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            presentToastWithOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    presentToastWithOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/uitoast.service.ts:38\n                \n            \n\n\n            \n                \n                    Toast With Option\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toastController\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ToastController\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/uitoast.service.ts:21\n                            \n                        \n\n                \n                    \n                        From ionic/angular\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ToastController } from '@ionic/angular';\n\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n\n/**\n * Service for Toast\n*/\nexport class UIToastService {\n  \n\n /**\n * Constructor description\n * @param {ToastController} toastController From ionic/angular\n */\n  constructor(public toastController: ToastController) { }\n\n/**\n* Network issue Toast\n*/\n  public async presentToast() {\n    const toast = await this.toastController.create({\n      message: 'Network issue ...',\n      duration: 1200,\n      cssClass:\"toast-width-class\"\n    });\n    toast.present();\n  }\n\n/**\n* Toast With Option\n*/\n  public async presentToastWithOptions() {\n    const toast = await this.toastController.create({\n      header: 'Toast header',\n      message: 'Click to Close',\n      position: 'top',\n      buttons: [\n        {\n          side: 'start',\n          icon: 'star',\n          text: 'Favorite',\n          handler: () => {\n            console.log('Favorite clicked');\n          }\n        }, {\n          text: 'Done',\n          role: 'cancel',\n          handler: () => {\n            console.log('Cancel clicked');\n          }\n        }\n      ]\n    });\n    toast.present();\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/home/home.page.ts\n            \n            component\n            HomePage\n            \n                0 %\n                (0/37)\n            \n        \n        \n            \n                \n                src/app/over-lap-graph-for-weather-prediction.service.ts\n            \n            injectable\n            OverLapGraphForWeatherPredictionService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/repository.service.ts\n            \n            injectable\n            RepositoryService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/temperature-converter.service.ts\n            \n            injectable\n            TemperatureConverterService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/uiservice-service.service.ts\n            \n            injectable\n            UIServiceServiceService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/uitoast.service.ts\n            \n            injectable\n            UIToastService\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/common : ~8.2.14\n        \n            @angular/core : ~8.2.14\n        \n            @angular/forms : ~8.2.14\n        \n            @angular/platform-browser : ~8.2.14\n        \n            @angular/platform-browser-dynamic : ~8.2.14\n        \n            @angular/router : ~8.2.14\n        \n            @ionic-native/core : ^5.0.7\n        \n            @ionic-native/splash-screen : ^5.0.0\n        \n            @ionic-native/status-bar : ^5.0.0\n        \n            @ionic/angular : ^5.0.7\n        \n            chart.js : ^2.9.3\n        \n            core-js : ^2.5.4\n        \n            rxjs : ~6.5.1\n        \n            tslib : ^1.9.0\n        \n            zone.js : ~0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_HomePageModule\n\n\n\ncluster_HomePageModule_declarations\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nOverLapGraphForWeatherPredictionService\n\nOverLapGraphForWeatherPredictionService\n\nAppModule -->\n\nOverLapGraphForWeatherPredictionService->AppModule\n\n\n\n\n\nRepositoryService\n\nRepositoryService\n\nAppModule -->\n\nRepositoryService->AppModule\n\n\n\n\n\nTemperatureConverterService\n\nTemperatureConverterService\n\nAppModule -->\n\nTemperatureConverterService->AppModule\n\n\n\n\n\nUIServiceServiceService\n\nUIServiceServiceService\n\nAppModule -->\n\nUIServiceServiceService->AppModule\n\n\n\n\n\nUIToastService\n\nUIToastService\n\nAppModule -->\n\nUIToastService->AppModule\n\n\n\n\n\nHomePage\n\nHomePage\n\n\n\nHomePageModule\n\nHomePageModule\n\nHomePageModule -->\n\nHomePage->HomePageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        2 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomePageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
