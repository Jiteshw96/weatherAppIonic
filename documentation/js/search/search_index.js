var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,1.403,1,1.2]],["body/components/AppComponent.html",[0,2.47,1,1.929,2,2.956,3,0.333,4,0.333,5,2.27,6,2.27,7,2.27,8,2.27,9,0.263,10,1.803,11,0.8,12,3.208,13,3.208,14,3.72,15,1.603,16,4.043,17,0.825,18,3.208,19,3.72,20,3.208,21,3.208,22,0.492,23,0.825,24,4.043,25,1.097,26,1.496,27,3.115,28,3.807,29,3.807,30,0.825,31,2.27,32,3.208,33,0.584,34,0.06,35,0.671,36,0.584,37,0.584,38,2.27,39,3.208,40,3.208,41,3.208,42,0.584,43,1.496,44,0.593,45,0.263,46,0.685,47,1.531,48,1.496,49,1.803,50,1.496,51,1.803,52,0.333,53,0.333,54,1.311,55,2.076,56,2.27,57,2.27,58,2.27,59,2.27,60,2.549,61,3.208,62,1.083,63,3.208,64,3.208,65,2.27,66,3.212,67,2.27,68,2.27,69,1.266,70,1.803,71,2.27,72,2.27,73,0.026,74,0.036,75,0.026]],["title/modules/AppModule.html",[76,1.031,77,1.403]],["body/modules/AppModule.html",[1,2.282,3,0.295,4,0.295,9,0.233,15,0.708,28,2.336,29,2.336,34,0.06,35,0.363,44,0.736,45,0.233,46,0.607,47,1.824,48,1.325,49,1.597,50,1.325,51,1.597,52,0.295,53,0.295,62,0.959,73,0.023,74,0.033,75,0.023,76,0.824,77,2.854,78,0.824,79,0.959,80,2.291,81,2.291,82,2.291,83,1.122,84,1.597,85,1.597,86,1.597,87,1.597,88,1.597,89,1.941,90,2.028,91,2.028,92,2.028,93,2.028,94,2.028,95,1.742,96,2.028,97,2.028,98,1.938,99,1.325,100,1.325,101,2.011,102,1.938,103,1.938,104,2.94,105,1.597,106,1.325,107,2.94,108,1.122,109,1.597,110,2.94,111,2.011,112,2.011,113,2.011,114,2.011,115,1.597,116,2.011,117,2.011,118,2.011,119,2.011,120,2.011,121,1.597,122,1.597,123,2.011,124,1.325,125,1.122,126,1.122,127,2.011,128,1.64,129,1.325,130,1.64,131,1.325,132,1.122,133,1.325,134,1.325,135,1.325,136,2.011,137,1.325,138,2.011,139,2.011,140,2.011,141,2.011,142,2.011,143,2.011]],["title/modules/AppRoutingModule.html",[76,1.031,89,1.2]],["body/modules/AppRoutingModule.html",[3,0.485,4,0.485,9,0.383,34,0.06,44,0.605,45,0.383,52,0.485,53,0.485,70,3.274,73,0.037,74,0.047,75,0.037,78,1.355,83,1.845,89,1.966,102,2.179,103,2.716,108,1.845,144,3.307,145,3.307,146,4.121,147,3.274,148,2.504,149,1.578,150,2.716,151,3.307,152,3.307,153,3.307,154,3.307,155,3.307,156,3.307,157,3.307,158,3.307,159,3.307]],["title/injectables/BuisnessLogicService.html",[90,1.2,160,0.029]],["body/injectables/BuisnessLogicService.html",[3,0.237,4,0.237,9,0.187,11,1.207,17,0.416,22,0.351,23,0.642,25,0.416,30,1.006,33,0.952,34,0.061,35,0.668,36,0.881,37,0.952,42,0.881,44,0.366,45,0.187,52,0.237,53,0.237,54,0.879,66,2.941,73,0.018,74,0.028,75,0.018,90,1.19,95,1.404,121,1.284,122,1.284,126,1.911,150,2.258,160,0.028,161,0.416,162,3.24,163,1.284,164,1.023,165,1.411,166,3.047,167,2.495,168,2.495,169,2.495,170,2.495,171,1.616,172,1.616,173,1.616,174,3.047,175,1.616,176,1.982,177,2.495,178,1.616,179,2.495,180,2.606,181,1.616,182,3.426,183,3.913,184,2.495,185,1.616,186,1.616,187,0.488,188,0.771,189,1.616,190,2.495,191,4.828,192,1.616,193,1.616,194,2.343,195,2.495,196,4.885,197,1.616,198,3.047,199,1.616,200,1.616,201,1.616,202,1.616,203,1.616,204,1.616,205,2.495,206,1.616,207,1.616,208,1.616,209,1.616,210,2.495,211,2.495,212,1.644,213,1.616,214,2.495,215,1.616,216,1.616,217,1.616,218,1.616,219,1.616,220,1.616,221,1.616,222,1.616,223,1.616,224,1.616,225,1.616,226,1.616,227,1.616,228,1.616,229,1.616,230,1.616,231,1.616,232,1.616,233,1.616,234,1.616,235,2.495,236,1.616,237,1.616,238,1.616,239,1.616,240,1.616,241,1.644,242,2.495,243,1.616,244,1.616,245,1.616,246,1.616,247,1.616,248,1.616,249,1.616,250,1.616,251,1.616]],["title/injectables/GetCityNameGeocoderService.html",[91,1.2,160,0.029]],["body/injectables/GetCityNameGeocoderService.html",[3,0.315,4,0.315,9,0.248,17,0.552,22,0.466,23,0.793,25,0.552,26,1.414,27,3.074,30,1.118,33,0.928,34,0.06,35,0.854,36,1.014,37,0.928,42,0.793,44,0.578,45,0.248,46,0.648,47,1.471,52,0.315,53,0.315,55,1.72,73,0.024,74,0.035,75,0.024,91,1.471,128,2.498,129,1.414,130,2.498,131,2.377,132,1.197,133,1.414,137,2.951,160,0.035,161,0.552,164,1.263,165,1.261,180,1.197,187,0.648,188,1.024,194,1.721,212,1.414,252,2.951,253,1.705,254,3.082,255,2.865,256,3.082,257,2.012,258,2.449,259,3.082,260,3.082,261,2.146,262,3.082,263,2.146,264,3.607,265,2.146,266,2.146,267,1.705,268,1.414,269,3.082,270,2.031,271,3.082,272,2.449,273,2.146,274,2.146,275,2.449,276,2.146,277,2.146,278,1.414,279,2.146,280,2.146,281,2.146,282,2.865,283,2.146,284,2.146,285,1.705,286,1.414,287,2.146,288,2.146,289,3.607,290,3.082,291,2.146,292,2.146,293,2.146,294,3.082,295,2.146,296,2.146,297,2.146,298,1.414]],["title/injectables/GetLocationLatLonService.html",[92,1.2,160,0.029]],["body/injectables/GetLocationLatLonService.html",[3,0.348,4,0.348,9,0.274,17,0.61,22,0.514,23,0.85,25,0.61,26,1.562,27,3.146,30,1.155,33,0.61,34,0.06,35,0.427,36,1.115,37,0.61,42,0.61,44,0.605,45,0.274,46,0.716,47,1.578,52,0.348,53,0.348,55,1.845,73,0.027,74,0.037,75,0.027,92,1.578,128,2.57,129,1.562,130,2.57,131,1.562,132,1.322,133,1.562,134,3.097,135,3.036,160,0.037,161,0.61,164,1.355,165,0.998,187,0.716,188,1.131,194,1.817,252,3.036,257,2.125,258,3.025,267,1.883,275,1.883,278,1.562,282,1.883,285,1.883,286,2.51,299,1.883,300,3.307,301,3.808,302,3.808,303,3.307,304,2.37,305,3.443,306,2.37,307,2.37,308,2.37,309,2.37,310,2.37,311,2.37,312,2.37,313,2.37,314,2.37,315,2.37,316,2.37,317,2.37,318,2.37,319,2.37,320,2.37,321,2.37,322,2.37,323,2.37]],["title/modules/HomePageModule.html",[76,1.031,324,1.403]],["body/modules/HomePageModule.html",[0,1.727,3,0.454,4,0.454,9,0.358,34,0.06,44,0.711,45,0.358,46,0.935,52,0.454,53,0.454,62,1.477,69,2.749,73,0.035,74,0.045,75,0.035,76,1.269,78,1.269,79,1.477,80,2.87,81,2.04,82,2.04,83,1.727,98,2.605,99,2.04,100,2.04,102,2.04,103,2.605,108,1.727,109,3.141,147,2.46,150,2.04,324,2.705,325,2.46,326,2.46,327,3.096,328,3.953,329,2.46,330,3.953,331,2.46,332,3.096,333,3.096]],["title/injectables/OverLapGraphForWeatherPredictionService.html",[93,1.2,160,0.029]],["body/injectables/OverLapGraphForWeatherPredictionService.html",[3,0.253,4,0.253,9,0.199,11,0.923,15,0.923,17,0.815,22,0.568,23,0.674,25,0.443,30,0.443,33,0.443,34,0.06,35,0.311,36,0.443,37,0.443,42,0.443,43,1.135,44,0.384,45,0.199,52,0.253,53,0.253,54,1.515,62,0.822,73,0.02,74,0.03,75,0.02,93,1.25,124,1.726,125,2.547,126,1.976,149,1.512,160,0.03,161,0.443,165,0.957,176,2.814,187,0.52,241,1.135,255,1.368,270,2.511,272,1.368,298,1.726,334,2.081,335,1.368,336,1.25,337,2.62,338,1.723,339,3.17,340,3.542,341,3.81,342,4.013,343,3.542,344,3.542,345,1.723,346,2.081,347,3.17,348,3.542,349,2.814,350,2.62,351,2.62,352,2.62,353,2.62,354,4.013,355,2.62,356,3.17,357,3.542,358,1.368,359,0.822,360,1.368,361,1.723,362,1.368,363,1.723,364,4.013,365,3.498,366,1.723,367,1.723,368,1.723,369,1.723,370,1.723,371,1.723,372,1.723,373,1.723,374,1.723,375,1.723,376,1.723,377,1.368,378,1.723,379,1.723,380,1.723,381,1.723,382,1.723,383,1.723,384,1.723,385,1.723,386,1.723,387,1.723,388,1.723,389,1.368,390,2.518,391,1.723,392,1.723,393,2.62,394,2.62,395,2.62,396,2.62,397,1.723,398,1.723,399,1.723,400,1.723,401,1.723,402,1.723,403,1.723,404,2.62,405,2.62,406,2.62,407,1.723,408,1.723,409,1.723,410,1.723,411,1.723,412,1.723,413,1.723,414,1.723,415,1.723,416,1.723,417,1.723,418,3.17,419,1.723,420,1.723,421,1.723,422,1.723,423,1.723,424,1.723,425,1.723,426,1.723,427,1.723,428,1.723,429,1.723,430,3.17,431,1.723,432,1.723,433,1.723,434,1.723,435,1.723,436,1.723,437,1.723,438,1.723]],["title/injectables/RepositoryService.html",[94,1.2,160,0.029]],["body/injectables/RepositoryService.html",[3,0.327,4,0.327,9,0.258,11,1.551,15,1.116,17,0.948,22,0.484,23,0.815,25,0.948,30,1.032,33,0.948,34,0.06,35,0.664,36,1.032,37,0.948,42,1.032,44,0.465,45,0.258,52,0.327,53,0.327,54,1.298,73,0.025,74,0.036,75,0.025,94,1.512,115,3.187,149,1.512,160,0.036,161,0.574,164,1.299,165,0.957,180,2.238,187,0.673,188,1.064,194,2.1,257,2.456,268,2.644,286,2.901,336,1.512,349,3.187,359,1.064,390,2.517,439,1.772,440,4.237,441,3.168,442,3.168,443,2.23,444,4.402,445,2.23,446,2.23,447,2.23,448,3.168,449,3.187,450,4.012,451,4.237,452,2.23,453,2.23,454,3.168,455,3.168,456,2.23,457,2.23,458,2.23,459,3.168,460,2.23,461,3.168,462,3.168,463,3.168,464,2.23,465,2.23]],["title/injectables/TemperatureConverterService.html",[95,1.031,160,0.029]],["body/injectables/TemperatureConverterService.html",[3,0.448,4,0.448,9,0.353,11,1.379,15,1.379,17,1.112,22,0.662,23,1.007,25,0.784,30,0.784,33,0.784,34,0.06,35,0.55,37,0.784,42,0.784,44,0.448,45,0.353,52,0.448,53,0.448,54,1.074,73,0.035,74,0.044,75,0.035,95,1.605,160,0.044,161,0.784,165,1.306,187,0.921,194,1.455,305,2.423,336,1.868,359,1.455,360,2.423,449,3.435,466,3.11,467,2.423,468,3.915,469,3.915,470,3.05,471,3.915,472,4.563,473,3.915,474,4.324,475,3.05,476,3.05]],["title/injectables/UIServiceServiceService.html",[96,1.2,160,0.029]],["body/injectables/UIServiceServiceService.html",[3,0.307,4,0.307,9,0.242,11,1.455,15,1.065,17,0.914,22,0.453,23,0.777,25,0.914,30,1.062,33,0.777,34,0.061,35,0.545,36,0.914,37,0.777,42,0.777,43,1.992,44,0.444,45,0.242,46,1.073,52,0.307,53,0.307,54,1.065,55,2.402,73,0.024,74,0.034,75,0.024,96,1.442,149,0.997,160,0.034,161,0.537,164,1.239,165,1.3,180,1.982,187,0.631,212,1.377,268,1.377,270,1.992,336,1.442,346,3.093,359,0.997,365,2.822,477,3.421,478,1.66,479,4.131,480,3.552,481,3.893,482,3.023,483,2.089,484,4.131,485,2.089,486,4.766,487,2.089,488,3.023,489,4.306,490,3.023,491,2.089,492,3.282,493,3.023,494,3.023,495,2.089,496,3.023,497,3.023,498,2.089,499,3.023,500,2.089,501,2.089,502,3.893,503,2.089,504,2.089,505,2.089,506,3.893,507,2.089,508,2.089,509,2.089,510,2.089,511,2.089,512,2.089,513,3.023,514,2.089]],["title/injectables/UIToastService.html",[97,1.2,160,0.029]],["body/injectables/UIToastService.html",[3,0.337,4,0.337,9,0.266,11,1.432,15,1.139,17,0.963,22,0.498,23,0.832,25,0.963,30,1.045,33,0.59,34,0.06,35,0.414,36,0.832,37,0.59,42,0.832,44,0.474,45,0.266,46,1.227,52,0.337,53,0.474,54,0.809,60,1.824,73,0.026,74,0.037,75,0.026,97,1.543,149,1.543,160,0.037,161,0.59,164,1.325,165,1.408,187,0.693,188,1.095,257,2.479,278,2.131,336,1.543,359,1.095,492,2.569,515,1.824,516,4.857,517,4.063,518,4.063,519,2.296,520,2.296,521,2.296,522,3.743,523,3.743,524,4.662,525,2.296,526,3.233,527,2.296,528,3.233,529,2.296,530,2.296,531,2.296,532,2.296,533,3.233,534,3.233,535,2.296,536,2.296,537,2.296,538,2.296,539,2.296,540,2.296,541,2.296,542,2.296,543,3.233,544,2.296,545,3.233,546,2.296,547,3.233,548,2.296,549,2.296,550,2.296,551,2.296]],["title/coverage.html",[552,2.736]],["body/coverage.html",[0,2.201,1,1.473,9,0.357,10,2.452,34,0.058,35,0.557,36,0.794,69,1.722,73,0.035,74,0.045,75,0.035,90,1.473,91,1.473,92,1.473,93,1.473,94,1.473,95,1.265,96,1.473,97,1.473,124,2.034,125,1.722,126,1.722,134,2.034,135,2.034,137,2.034,160,0.057,162,2.452,163,2.452,241,2.6,252,2.6,253,2.452,299,2.452,334,2.452,335,2.452,362,2.452,439,2.452,466,2.452,467,2.452,477,2.452,478,2.452,515,2.452,552,2.452,553,3.087,554,3.087,555,3.087,556,4.844,557,3.087,558,3.087,559,3.087,560,3.946,561,3.087,562,3.087,563,3.087,564,3.946,565,3.946,566,3.087,567,3.087,568,3.087]],["title/dependencies.html",[79,1.445,569,2.093]],["body/dependencies.html",[34,0.06,45,0.352,46,0.918,47,2.249,48,2.004,50,2.004,73,0.034,74,0.044,75,0.034,79,1.451,105,3.104,106,2.575,108,1.696,128,1.696,130,1.696,132,1.696,329,2.416,331,2.416,358,2.416,389,2.416,570,4.825,571,3.041,572,3.041,573,4.318,574,3.041,575,3.041,576,3.041,577,3.908,578,3.041,579,3.908,580,3.041,581,3.041,582,3.908,583,3.041,584,4.318,585,3.041,586,3.041,587,3.908,588,3.041,589,3.041,590,3.041,591,3.041,592,3.041,593,3.041,594,3.041,595,3.041,596,3.041,597,3.041,598,3.041]],["title/index.html",[22,0.545,599,1.997]],["body/index.html",[1,2.316,2,2.306,34,0.058,62,1.385,69,2.356,73,0.033,74,0.043,75,0.033,76,1.19,77,2.937,78,1.19,79,1.385,80,1.913,81,1.913,82,1.913,83,1.619,84,2.306,85,2.306,86,2.306,87,2.306,88,2.306,89,2.015,90,2.015,91,2.015,92,2.015,93,2.015,94,2.015,95,1.731,96,2.015,97,2.015,98,2.499,99,1.913,100,1.913,148,1.619,161,0.746,298,2.499,324,2.498,325,2.306,326,2.306,377,2.306,599,2.306,600,2.902]],["title/modules.html",[78,1.412]],["body/modules.html",[34,0.051,73,0.044,74,0.051,75,0.044,77,2.159,78,1.587,89,1.847,106,2.987,125,2.159,324,2.159,601,4.532,602,4.532,603,4.806,604,3.871]],["title/routes.html",[148,1.922]],["body/routes.html",[34,0.053,73,0.046,74,0.053,75,0.046,148,2.28]]],"invertedIndex":[["",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"routes.html":{}}}],["0",{"_index":241,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["0.0",{"_index":423,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["0.1",{"_index":415,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["0.9.1",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["0/7",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["01d",{"_index":213,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["02d",{"_index":215,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["03d",{"_index":217,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["04d",{"_index":219,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["09d",{"_index":221,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["1",{"_index":430,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["1.9.0",{"_index":596,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":395,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["100",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["10d",{"_index":223,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["11d",{"_index":225,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["1200",{"_index":530,"title":{},"body":{"injectables/UIToastService.html":{}}}],["13d",{"_index":227,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["2",{"_index":298,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"index.html":{}}}],["2.0.1",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["2.5.4",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["2.9.3",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["2/7",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["273.15",{"_index":476,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["28",{"_index":558,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":600,"title":{},"body":{"index.html":{}}}],["3.4.0",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["30/36",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["4.0.2",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":272,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["5.0.0",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["5.0.7",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["5.24.0",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":514,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["50d",{"_index":229,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["6",{"_index":397,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["6.5.1",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":377,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"index.html":{}}}],["8.1.0",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["8.2.14",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["actual_component",{"_index":72,"title":{},"body":{"components/AppComponent.html":{}}}],["address",{"_index":289,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["address.slice(0",{"_index":297,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["addressobj",{"_index":262,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["android",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":329,"title":{},"body":{"modules/HomePageModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"injectables/RepositoryService.html":{}}}],["angular/core",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":331,"title":{},"body":{"modules/HomePageModule.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"dependencies.html":{}}}],["animation",{"_index":368,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["animationduration",{"_index":367,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["app",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["app.component",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":21,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":19,"title":{},"body":{"components/AppComponent.html":{}}}],["app/buisness",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["app/over",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["app/repository.service",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["app/temperature",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{}}}],["app/uiservice",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["app/uitoast.service",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"coverage.html":{},"index.html":{}}}],["appcomponent.ts",{"_index":32,"title":{},"body":{"components/AppComponent.html":{}}}],["application",{"_index":40,"title":{},"body":{"components/AppComponent.html":{}}}],["appmodule",{"_index":77,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["approutingmodule",{"_index":89,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"index.html":{},"modules.html":{}}}],["approutingmodule,httpclientmodule",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["array",{"_index":352,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["assets/images/01d.png",{"_index":214,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/02d.png",{"_index":216,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/03d.png",{"_index":218,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/04d.png",{"_index":220,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/09d.png",{"_index":222,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/10d.png",{"_index":224,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/11d.png",{"_index":226,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/13d.png",{"_index":228,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/50d.png",{"_index":230,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/broken_clouds.png",{"_index":203,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/clear_sky.png",{"_index":195,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/few_clouds.png",{"_index":199,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/mist.png",{"_index":211,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/rain.png",{"_index":207,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/scattered_clouds.png",{"_index":201,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/shower_rain.png",{"_index":206,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/snow.png",{"_index":209,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["async",{"_index":257,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/RepositoryService.html":{},"injectables/UIToastService.html":{}}}],["available",{"_index":604,"title":{},"body":{"modules.html":{}}}],["await",{"_index":278,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/UIToastService.html":{}}}],["backgroundcolor",{"_index":416,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bar",{"_index":389,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"dependencies.html":{}}}],["bar._model.x",{"_index":394,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bar._model.y",{"_index":396,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bar/ngx",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["beginatzero",{"_index":408,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["beginning",{"_index":41,"title":{},"body":{"components/AppComponent.html":{}}}],["bootstrap",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["bordercapstyle",{"_index":419,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bordercolor",{"_index":417,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["borderdash",{"_index":421,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["borderdashoffset",{"_index":422,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["borderjoinstyle",{"_index":424,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bottom",{"_index":383,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["break",{"_index":196,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["broken",{"_index":202,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["browse",{"_index":603,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browsermodule",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["buisnesslogicservice",{"_index":90,"title":{"injectables/BuisnessLogicService.html":{}},"body":{"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{},"coverage.html":{},"index.html":{}}}],["butt",{"_index":420,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["buttons",{"_index":539,"title":{},"body":{"injectables/UIToastService.html":{}}}],["cancel",{"_index":550,"title":{},"body":{"injectables/UIToastService.html":{}}}],["canvas",{"_index":350,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["capacitor/android",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["capacitor/core",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["capacitor/ios",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["case",{"_index":191,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["catch((error",{"_index":285,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["celcius",{"_index":473,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["center",{"_index":381,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart",{"_index":348,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart(linecanvas.nativeelement",{"_index":363,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart.defaults.global.defaultfontfamily",{"_index":379,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart.defaults.global.defaultfontstyle",{"_index":378,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart.helpers.fontstring",{"_index":376,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart.js",{"_index":358,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"dependencies.html":{}}}],["chartinstance",{"_index":371,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chartinstance.controller.getdatasetmeta(i",{"_index":387,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chartinstance.ctx",{"_index":374,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["city",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"coverage.html":{}}}],["cityname",{"_index":450,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["class",{"_index":53,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["clear",{"_index":192,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["clearinterval(interval",{"_index":513,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["click",{"_index":535,"title":{},"body":{"injectables/UIToastService.html":{}}}],["clicked",{"_index":547,"title":{},"body":{"injectables/UIToastService.html":{}}}],["close",{"_index":536,"title":{},"body":{"injectables/UIToastService.html":{}}}],["clouds",{"_index":198,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["cluster_appmodule",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_bootstrap",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_declarations",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_homepagemodule",{"_index":325,"title":{},"body":{"modules/HomePageModule.html":{},"index.html":{}}}],["cluster_homepagemodule_declarations",{"_index":326,"title":{},"body":{"modules/HomePageModule.html":{},"index.html":{}}}],["color",{"_index":342,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["comma",{"_index":287,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["commonmodule",{"_index":328,"title":{},"body":{"modules/HomePageModule.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/HomePageModule.html":{},"coverage.html":{}}}],["component_template",{"_index":67,"title":{},"body":{"components/AppComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["configuration",{"_index":13,"title":{},"body":{"components/AppComponent.html":{}}}],["console.log('cancel",{"_index":551,"title":{},"body":{"injectables/UIToastService.html":{}}}],["console.log('favorite",{"_index":546,"title":{},"body":{"injectables/UIToastService.html":{}}}],["console.log(err",{"_index":462,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["console.log(this.mtemperatureconverterservice.kelvintocelcius(mheigh",{"_index":247,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["const",{"_index":149,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["constructor",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["constructor(http",{"_index":443,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["constructor(loading",{"_index":483,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["constructor(mtemperatureconverterservice",{"_index":171,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["constructor(platform",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["constructor(private",{"_index":501,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["constructor(public",{"_index":188,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/RepositoryService.html":{},"injectables/UIToastService.html":{}}}],["constructor(toastcontroller",{"_index":519,"title":{},"body":{"injectables/UIToastService.html":{}}}],["continue",{"_index":499,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["convert",{"_index":471,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["converter",{"_index":475,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["converter.service",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{}}}],["converter.service.ts",{"_index":467,"title":{},"body":{"injectables/TemperatureConverterService.html":{},"coverage.html":{}}}],["converter.service.ts:22",{"_index":470,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["cordova",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["core",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":552,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":497,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["cssclass:\"toast",{"_index":531,"title":{},"body":{"injectables/UIToastService.html":{}}}],["ctx",{"_index":373,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["ctx.filltext(data",{"_index":393,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["ctx.font",{"_index":375,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["ctx.textalign",{"_index":380,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["ctx.textbaseline",{"_index":382,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["current",{"_index":448,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["data",{"_index":390,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{}}}],["dataset",{"_index":385,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["dataset.data[index",{"_index":391,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["datasets",{"_index":413,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["date",{"_index":351,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["day",{"_index":240,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["days",{"_index":455,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["declarations",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["default",{"_index":212,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/UIServiceServiceService.html":{}}}],["defined",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["dependencies",{"_index":79,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["dialog",{"_index":489,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["directive",{"_index":65,"title":{},"body":{"components/AppComponent.html":{}}}],["directives",{"_index":71,"title":{},"body":{"components/AppComponent.html":{}}}],["dismiss",{"_index":488,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["dismissloading",{"_index":481,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["display",{"_index":364,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["documentation",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AppComponent.html":{}}}],["done",{"_index":548,"title":{},"body":{"injectables/UIToastService.html":{}}}],["drawonchartarea",{"_index":405,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["duration",{"_index":529,"title":{},"body":{"injectables/UIToastService.html":{}}}],["dynamic",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":239,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["element",{"_index":64,"title":{},"body":{"components/AppComponent.html":{}}}],["enabled",{"_index":399,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["entrycomponents",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":461,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["error",{"_index":286,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/RepositoryService.html":{}}}],["export",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["exports",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["false",{"_index":365,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/UIServiceServiceService.html":{}}}],["favorite",{"_index":544,"title":{},"body":{"injectables/UIToastService.html":{}}}],["few",{"_index":197,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["fff",{"_index":428,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{}}}],["fill",{"_index":356,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["five",{"_index":454,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["formsmodule",{"_index":330,"title":{},"body":{"modules/HomePageModule.html":{}}}],["full",{"_index":153,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["function",{"_index":370,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["generateaddress",{"_index":256,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["generateaddress(addressobj",{"_index":260,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geoaccuracy",{"_index":300,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["geoaccuracy:number",{"_index":309,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["geoaddress",{"_index":254,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geoaddress:string",{"_index":276,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geocoder",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["geocoder.service",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["geocoder.service.ts",{"_index":253,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"coverage.html":{}}}],["geocoder.service.ts:12",{"_index":259,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geocoder.service.ts:14",{"_index":274,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geocoder.service.ts:18",{"_index":273,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geocoder.service.ts:23",{"_index":265,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geocoder.service.ts:43",{"_index":261,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geocoder/ngx",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["geolatitude",{"_index":301,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["geolocation",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"dependencies.html":{}}}],["geolongitude",{"_index":302,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["getcitynamegeocoderservice",{"_index":91,"title":{"injectables/GetCityNameGeocoderService.html":{}},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"coverage.html":{},"index.html":{}}}],["getfivedaysvalueinformat",{"_index":167,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getfivedaysvalueinformat(mdate",{"_index":173,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getfivedaysvalueinformat(mdate,mfivedaysvalue",{"_index":231,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getgeolocation",{"_index":258,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["getgeolocation():promise",{"_index":310,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["getgeolocation(latitude",{"_index":263,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["getgeolocation(latitude,longitude):promise",{"_index":277,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["gethigh",{"_index":236,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getlocationlatlonservice",{"_index":92,"title":{"injectables/GetLocationLatLonService.html":{}},"body":{"modules/AppModule.html":{},"injectables/GetLocationLatLonService.html":{},"coverage.html":{},"index.html":{}}}],["getnoofdays",{"_index":168,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getnoofdays(mfivedaysvalue",{"_index":177,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getting",{"_index":320,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["getweatherbannericonfromassetfolder",{"_index":169,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getweatherbannericonfromassetfolder(mweathertype",{"_index":179,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getweatherforcasticonfromassetfolder",{"_index":170,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getweatherforcasticonfromassetfolder(mweathertype",{"_index":184,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getweathervaluecurrent",{"_index":441,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluecurrent(params",{"_index":446,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluecurrent(params:string",{"_index":464,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluefivedays",{"_index":442,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluefivedays(params",{"_index":452,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluefivedays(params:string",{"_index":458,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["graph",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{},"modules.html":{}}}],["gridlines",{"_index":404,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["handler",{"_index":545,"title":{},"body":{"injectables/UIToastService.html":{}}}],["header",{"_index":534,"title":{},"body":{"injectables/UIToastService.html":{}}}],["home",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{}}}],["home.page",{"_index":332,"title":{},"body":{"modules/HomePageModule.html":{}}}],["homepage",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"modules/HomePageModule.html":{},"coverage.html":{},"index.html":{}}}],["homepagemodule",{"_index":324,"title":{"modules/HomePageModule.html":{}},"body":{"modules/HomePageModule.html":{},"index.html":{},"modules.html":{}}}],["hoover",{"_index":355,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["hover",{"_index":366,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["html",{"_index":63,"title":{},"body":{"components/AppComponent.html":{}}}],["htmlionloadingelement",{"_index":494,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["http",{"_index":440,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["httpclient",{"_index":444,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["httpclientmodule",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["icon",{"_index":541,"title":{},"body":{"injectables/UIToastService.html":{}}}],["identifier",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["if(index!=5",{"_index":392,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["if(obj[val].length",{"_index":295,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["ignore",{"_index":360,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/TemperatureConverterService.html":{}}}],["image",{"_index":182,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["import",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["import('./home/home.module').then",{"_index":155,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["imports",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["initialize",{"_index":39,"title":{},"body":{"components/AppComponent.html":{}}}],["initializeapp",{"_index":24,"title":{},"body":{"components/AppComponent.html":{}}}],["inject",{"_index":336,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["injectable",{"_index":160,"title":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{}}}],["injectables",{"_index":161,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"index.html":{}}}],["interval",{"_index":509,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["ionic",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"dependencies.html":{}}}],["ionic/angular",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"dependencies.html":{}}}],["ionicmodule",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{}}}],["ionicmodule.forroot",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["ionicroutestrategy",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["issue",{"_index":523,"title":{},"body":{"injectables/UIToastService.html":{}}}],["js",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":451,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["json.parse(mfivedaysvalue).list[j].main.temp_min",{"_index":242,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["json.stringify(error",{"_index":321,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["json.stringify(mvalue",{"_index":463,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["kelvin",{"_index":472,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["kelvintocelcius",{"_index":468,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["kelvintocelcius(params",{"_index":469,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["key",{"_index":291,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["label",{"_index":341,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["labels",{"_index":412,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["lap",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["lat",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetLocationLatLonService.html":{},"coverage.html":{}}}],["latitude",{"_index":266,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["legend",{"_index":62,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"index.html":{}}}],["line",{"_index":411,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["linecanvas",{"_index":339,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["linechart",{"_index":347,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["linetension",{"_index":414,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["load",{"_index":507,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["load.present().then",{"_index":508,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["loadchildren",{"_index":154,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["loader",{"_index":479,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["loaderloading",{"_index":480,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["loading",{"_index":486,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["loadingcontroller",{"_index":484,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["location",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetLocationLatLonService.html":{},"coverage.html":{}}}],["log",{"_index":237,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["logic.service.ts",{"_index":163,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"coverage.html":{}}}],["logic.service.ts:123",{"_index":175,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:15",{"_index":181,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:177",{"_index":178,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:7",{"_index":172,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:73",{"_index":185,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:9",{"_index":186,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["lon.service",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["lon.service.ts",{"_index":299,"title":{},"body":{"injectables/GetLocationLatLonService.html":{},"coverage.html":{}}}],["lon.service.ts:11",{"_index":306,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["lon.service.ts:12",{"_index":307,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["lon.service.ts:13",{"_index":303,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["lon.service.ts:15",{"_index":308,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["lon.service.ts:19",{"_index":304,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["longitude",{"_index":264,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["m",{"_index":156,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["m.homepagemodule",{"_index":157,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["maintainaspectratio",{"_index":401,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["matching",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"routes.html":{}}}],["max",{"_index":410,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["maxresults",{"_index":271,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["mdate",{"_index":176,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["mdatetemp",{"_index":340,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["mdatetempmax",{"_index":232,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mdatetempmax.push(math.floor(this.mtemperatureconverterservice.kelvintocelcius(mheigh",{"_index":244,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mdatetempmin",{"_index":233,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mdatetempmin.push(math.floor(this.mtemperatureconverterservice.kelvintocelcius(mlow",{"_index":245,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["menu",{"_index":61,"title":{},"body":{"components/AppComponent.html":{}}}],["message",{"_index":492,"title":{},"body":{"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["meta",{"_index":386,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["meta.data.foreach(function",{"_index":388,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["metadata",{"_index":14,"title":{},"body":{"components/AppComponent.html":{}}}],["methods",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["mfivedaysvalue",{"_index":174,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mfivedaysweathericon",{"_index":234,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mfivedaysweathericon.push(mweathericon",{"_index":246,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["min",{"_index":409,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["minimum",{"_index":357,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["minumun",{"_index":353,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["mist",{"_index":210,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mlow",{"_index":243,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["module",{"_index":76,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["modules",{"_index":78,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"index.html":{},"modules.html":{}}}],["mtemperatureconverterservice",{"_index":166,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mtemperatureconverterservice:temperatureconverterservice",{"_index":189,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mvalue=await",{"_index":459,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["mweathertype",{"_index":183,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["name",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{}}}],["native/core",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["native/geolocation",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["native/geolocation/ngx",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["native/native",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"dependencies.html":{}}}],["native/splash",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["native/status",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["nativegeocoder",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"dependencies.html":{}}}],["nativegeocoderoptions",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["nativegeocoderresult",{"_index":275,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["network",{"_index":522,"title":{},"body":{"injectables/UIToastService.html":{}}}],["new",{"_index":362,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["ngmodule",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{}}}],["nstace",{"_index":496,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["null",{"_index":512,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["number",{"_index":305,"title":{},"body":{"injectables/GetLocationLatLonService.html":{},"injectables/TemperatureConverterService.html":{}}}],["obj",{"_index":290,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["obj.push(addressobj[key",{"_index":292,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["obj.reverse",{"_index":293,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["obj[val",{"_index":296,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["object",{"_index":349,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{}}}],["oncomplete",{"_index":369,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["option",{"_index":526,"title":{},"body":{"injectables/UIToastService.html":{}}}],["optional",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["options",{"_index":255,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["out",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["overlapgraphforweatherpredictionservice",{"_index":93,"title":{"injectables/OverLapGraphForWeatherPredictionService.html":{}},"body":{"modules/AppModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{},"index.html":{}}}],["overview",{"_index":599,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":569,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["parameters",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["params",{"_index":449,"title":{},"body":{"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{}}}],["path",{"_index":150,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"modules/HomePageModule.html":{}}}],["pathmatch",{"_index":152,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["platform",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["plugin",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["pointbackgroundcolor",{"_index":427,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointbordercolor",{"_index":426,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointborderwidth",{"_index":429,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhitradius",{"_index":437,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhoverbackgroundcolor",{"_index":432,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhoverbordercolor",{"_index":433,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhoverborderwidth",{"_index":435,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhoverradius",{"_index":431,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointradius",{"_index":436,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["position",{"_index":537,"title":{},"body":{"injectables/UIToastService.html":{}}}],["prediction.service",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["prediction.service.ts",{"_index":335,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["prediction.service.ts:30",{"_index":345,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["preloadallmodules",{"_index":146,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["preloadingstrategy",{"_index":159,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["presenttoast",{"_index":517,"title":{},"body":{"injectables/UIToastService.html":{}}}],["presenttoastwithoptions",{"_index":518,"title":{},"body":{"injectables/UIToastService.html":{}}}],["private",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/UIServiceServiceService.html":{}}}],["promise",{"_index":267,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["properties",{"_index":164,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["provide",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["providedin",{"_index":187,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["providers",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["public",{"_index":165,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["rain",{"_index":205,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["redirectto",{"_index":151,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["repositoryservice",{"_index":94,"title":{"injectables/RepositoryService.html":{}},"body":{"modules/AppModule.html":{},"injectables/RepositoryService.html":{},"coverage.html":{},"index.html":{}}}],["reset",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["resp.coords.accuracy",{"_index":319,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["resp.coords.latitude",{"_index":315,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["resp.coords.longitude",{"_index":317,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["responsive",{"_index":400,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["result",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"routes.html":{}}}],["result[0].countrycode",{"_index":284,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["result[0].locality",{"_index":283,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["results",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"routes.html":{}}}],["return",{"_index":194,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{}}}],["returns",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["rgba(220,220,220,1",{"_index":434,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["rgba(75,192,192,1",{"_index":418,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["role",{"_index":549,"title":{},"body":{"injectables/UIToastService.html":{}}}],["root",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["root'},{'name",{"_index":68,"title":{},"body":{"components/AppComponent.html":{}}}],["round",{"_index":425,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["routereusestrategy",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["routermodule",{"_index":147,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{}}}],["routermodule.forchild",{"_index":333,"title":{},"body":{"modules/HomePageModule.html":{}}}],["routermodule.forroot(routes",{"_index":158,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":148,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"index.html":{},"routes.html":{}}}],["routing.module",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":145,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["rxjs",{"_index":593,"title":{},"body":{"dependencies.html":{}}}],["saperated",{"_index":288,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["scales",{"_index":402,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["scattered",{"_index":200,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["screen",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["screen/ngx",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["selector",{"_index":16,"title":{},"body":{"components/AppComponent.html":{}}}],["service",{"_index":359,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["service.service",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["service.service.ts",{"_index":478,"title":{},"body":{"injectables/UIServiceServiceService.html":{},"coverage.html":{}}}],["service.service.ts:13",{"_index":485,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["service.service.ts:24",{"_index":495,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["service.service.ts:29",{"_index":498,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["service.service.ts:35",{"_index":491,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["service.service.ts:49",{"_index":487,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["setinterval",{"_index":510,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["show",{"_index":346,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/UIServiceServiceService.html":{}}}],["showbackdrop",{"_index":504,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["shower",{"_index":204,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["showgrapg",{"_index":337,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["showgrapg(linechart",{"_index":338,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["showgrapg(linechart,linecanvas,mdate,mdatetemp,label,color,yaxismin,yaxismax",{"_index":361,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["showloading",{"_index":482,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["showloading(message",{"_index":490,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["side",{"_index":540,"title":{},"body":{"injectables/UIToastService.html":{}}}],["sky",{"_index":193,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["snow",{"_index":208,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["spangaps",{"_index":438,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["splashscreen",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["src/app/app",{"_index":144,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:17",{"_index":31,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:35",{"_index":38,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/buisness",{"_index":162,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"coverage.html":{}}}],["src/app/get",{"_index":252,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"coverage.html":{}}}],["src/app/home/home.module.ts",{"_index":327,"title":{},"body":{"modules/HomePageModule.html":{}}}],["src/app/home/home.page.ts",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["src/app/over",{"_index":334,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["src/app/repository.service.ts",{"_index":439,"title":{},"body":{"injectables/RepositoryService.html":{},"coverage.html":{}}}],["src/app/repository.service.ts:12",{"_index":445,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["src/app/repository.service.ts:19",{"_index":456,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["src/app/repository.service.ts:27",{"_index":453,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["src/app/repository.service.ts:45",{"_index":447,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["src/app/temperature",{"_index":466,"title":{},"body":{"injectables/TemperatureConverterService.html":{},"coverage.html":{}}}],["src/app/uiservice",{"_index":477,"title":{},"body":{"injectables/UIServiceServiceService.html":{},"coverage.html":{}}}],["src/app/uitoast.service.ts",{"_index":515,"title":{},"body":{"injectables/UIToastService.html":{},"coverage.html":{}}}],["src/app/uitoast.service.ts:14",{"_index":520,"title":{},"body":{"injectables/UIToastService.html":{}}}],["src/app/uitoast.service.ts:21",{"_index":527,"title":{},"body":{"injectables/UIToastService.html":{}}}],["src/app/uitoast.service.ts:26",{"_index":521,"title":{},"body":{"injectables/UIToastService.html":{}}}],["src/app/uitoast.service.ts:38",{"_index":525,"title":{},"body":{"injectables/UIToastService.html":{}}}],["star",{"_index":542,"title":{},"body":{"injectables/UIToastService.html":{}}}],["start",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"injectables/UIToastService.html":{}}}],["statements",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["statusbar",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["string",{"_index":180,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AppComponent.html":{}}}],["styleurls",{"_index":18,"title":{},"body":{"components/AppComponent.html":{}}}],["supplies",{"_index":12,"title":{},"body":{"components/AppComponent.html":{}}}],["support",{"_index":601,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":602,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":190,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["table",{"_index":568,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["temp",{"_index":238,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["temperature",{"_index":474,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["temperatureconverterservice",{"_index":95,"title":{"injectables/TemperatureConverterService.html":{}},"body":{"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/TemperatureConverterService.html":{},"coverage.html":{},"index.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{}}}],["templateurl",{"_index":20,"title":{},"body":{"components/AppComponent.html":{}}}],["temprature",{"_index":354,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["text",{"_index":543,"title":{},"body":{"injectables/UIToastService.html":{}}}],["then((result",{"_index":281,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["then(load",{"_index":505,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.chart",{"_index":372,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["this.data.datasets.foreach(function",{"_index":384,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["this.geoaccuracy",{"_index":318,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.geoaddress",{"_index":282,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["this.geolatitude",{"_index":314,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.geolatitude).tostring",{"_index":322,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.geolocation.getcurrentposition().then((resp",{"_index":313,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.geolongitude",{"_index":316,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.geolongitude).tostring",{"_index":323,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.http.get('http://api.openweathermap.org/data/2.5//weather?q='+params+'&appid=d994b85acc1528b1a51fb0273b7ca7c4').topromise().then(data",{"_index":465,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["this.http.get('http://api.openweathermap.org/data/2.5/forecast?q='+params+'&appid=d994b85acc1528b1a51fb0273b7ca7c4').topromise().then(data",{"_index":460,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["this.initializeapp",{"_index":56,"title":{},"body":{"components/AppComponent.html":{}}}],["this.loader",{"_index":506,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.loader.dismiss().then",{"_index":511,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.loaderloading",{"_index":502,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.loading.create",{"_index":503,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.mtemperatureconverterservice.kelvintocelcius(mlow",{"_index":248,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["this.nativegeocoder.reversegeocode(latitude",{"_index":279,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["this.options",{"_index":280,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["this.platform.is('android",{"_index":311,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.platform.is('ios",{"_index":312,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.platform.ready().then",{"_index":57,"title":{},"body":{"components/AppComponent.html":{}}}],["this.splashscreen.hide",{"_index":59,"title":{},"body":{"components/AppComponent.html":{}}}],["this.statusbar.styledefault",{"_index":58,"title":{},"body":{"components/AppComponent.html":{}}}],["this.toastcontroller.create",{"_index":528,"title":{},"body":{"injectables/UIToastService.html":{}}}],["ticks",{"_index":406,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["toast",{"_index":524,"title":{},"body":{"injectables/UIToastService.html":{}}}],["toast.present",{"_index":533,"title":{},"body":{"injectables/UIToastService.html":{}}}],["toastcontroller",{"_index":516,"title":{},"body":{"injectables/UIToastService.html":{}}}],["tooltips",{"_index":398,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["top",{"_index":538,"title":{},"body":{"injectables/UIToastService.html":{}}}],["totlreturn",{"_index":235,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["totlreturn.push(mdatetempmax",{"_index":249,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["totlreturn.push(mdatetempmin",{"_index":250,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["totlreturn.push(mfivedaysweathericon",{"_index":251,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AppComponent.html":{}}}],["true",{"_index":270,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/UIServiceServiceService.html":{}}}],["tslib",{"_index":595,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{}}}],["ui",{"_index":493,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["uiloading",{"_index":500,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["uiserviceserviceservice",{"_index":96,"title":{"injectables/UIServiceServiceService.html":{}},"body":{"modules/AppModule.html":{},"injectables/UIServiceServiceService.html":{},"coverage.html":{},"index.html":{}}}],["uitoastservice",{"_index":97,"title":{"injectables/UIToastService.html":{}},"body":{"modules/AppModule.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"index.html":{}}}],["url",{"_index":457,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["useclass",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["uselocale",{"_index":269,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["val",{"_index":294,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["value",{"_index":268,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{}}}],["var",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{}}}],["void",{"_index":43,"title":{},"body":{"components/AppComponent.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/UIServiceServiceService.html":{}}}],["weather",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["width",{"_index":532,"title":{},"body":{"injectables/UIToastService.html":{}}}],["xaxes",{"_index":403,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["yaxes",{"_index":407,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["yaxismax",{"_index":344,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["yaxismin",{"_index":343,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["zone.js",{"_index":597,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        Supplies configuration metadata for an App component.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                app.component.scss\n            \n\n\n\n            \n                templateUrl\n                app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                initializeApp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(platform: Platform, splashScreen: SplashScreen, statusBar: StatusBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor of AppComponent.ts\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        platform\n                                                  \n                                                        \n                                                                    Platform\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        splashScreen\n                                                  \n                                                        \n                                                                    SplashScreen\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusBar\n                                                  \n                                                        \n                                                                    StatusBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            initializeApp\n                        \n                        \n                    \n                \n            \n            \n                \ninitializeApp()\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:35\n                \n            \n\n\n            \n                \n                    Initialize Application at beginning\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\nimport { Platform } from '@ionic/angular';\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\n/**\n * Supplies configuration metadata for an App component.\n*/\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss']\n})\n/**\n * Components of platform, splashScreen, statusBar\n*/\nexport class AppComponent {\n/**\n * Constructor of AppComponent.ts\n * @constructor for App Component\n * @param {Platform} platform\n * @param {SplashScreen} splashScreen\n * @param {StatusBar} statusBar\n*/\n  constructor(\n    private platform: Platform,\n    private splashScreen: SplashScreen,\n    private statusBar: StatusBar\n  ) {\n    this.initializeApp();\n  }\n/**\n * Initialize Application at beginning\n*/\n  initializeApp() {\n    this.platform.ready().then(() => {\n      this.statusBar.styleDefault();\n      this.splashScreen.hide();\n    });\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        Start Menu\n      \n    \n    \n      \n        \n      \n    \n  \n  \n\n\n    \n\n    \n                \n                    app.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Start Menu                                          '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'HomePage', 'selector': 'app-home'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nBuisnessLogicService\n\nBuisnessLogicService\n\nAppModule -->\n\nBuisnessLogicService->AppModule\n\n\n\n\n\nGetCityNameGeocoderService\n\nGetCityNameGeocoderService\n\nAppModule -->\n\nGetCityNameGeocoderService->AppModule\n\n\n\n\n\nGetLocationLatLonService\n\nGetLocationLatLonService\n\nAppModule -->\n\nGetLocationLatLonService->AppModule\n\n\n\n\n\nOverLapGraphForWeatherPredictionService\n\nOverLapGraphForWeatherPredictionService\n\nAppModule -->\n\nOverLapGraphForWeatherPredictionService->AppModule\n\n\n\n\n\nRepositoryService\n\nRepositoryService\n\nAppModule -->\n\nRepositoryService->AppModule\n\n\n\n\n\nTemperatureConverterService\n\nTemperatureConverterService\n\nAppModule -->\n\nTemperatureConverterService->AppModule\n\n\n\n\n\nUIServiceServiceService\n\nUIServiceServiceService\n\nAppModule -->\n\nUIServiceServiceService->AppModule\n\n\n\n\n\nUIToastService\n\nUIToastService\n\nAppModule -->\n\nUIToastService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            BuisnessLogicService\n                        \n                        \n                            GetCityNameGeocoderService\n                        \n                        \n                            GetLocationLatLonService\n                        \n                        \n                            OverLapGraphForWeatherPredictionService\n                        \n                        \n                            RepositoryService\n                        \n                        \n                            TemperatureConverterService\n                        \n                        \n                            UIServiceServiceService\n                        \n                        \n                            UIToastService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\n\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { RepositoryService } from '../app/repository.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BuisnessLogicService } from '../app/buisness-logic.service';\nimport { UIServiceServiceService } from '../app/uiservice-service.service';\nimport { UIToastService } from '../app/uitoast.service';\nimport { TemperatureConverterService } from '../app/temperature-converter.service';\nimport { OverLapGraphForWeatherPredictionService } from '../app/over-lap-graph-for-weather-prediction.service';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { NativeGeocoder, NativeGeocoderOptions } from '@ionic-native/native-geocoder/ngx';\nimport { GetLocationLatLonService } from './get-location-lat-lon.service';\nimport { GetCityNameGeocoderService } from './get-city-name-geocoder.service';\n\n@NgModule({\n  declarations: [AppComponent],\n  entryComponents: [],\n  imports: [BrowserModule, IonicModule.forRoot(), AppRoutingModule,HttpClientModule],\n  providers: [\n    StatusBar,\n    SplashScreen,\n    Geolocation,\n    NativeGeocoder,    \n    RepositoryService,\n    UIServiceServiceService,\n    UIToastService,\n    BuisnessLogicService,\n    TemperatureConverterService,\n    GetLocationLatLonService,\n    GetCityNameGeocoderService,\n    OverLapGraphForWeatherPredictionService,\n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'home', pathMatch: 'full' },\n  { path: 'home', loadChildren: () => \"import('./home/home.module').then( m => m.HomePageModule)\"},\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BuisnessLogicService.html":{"url":"injectables/BuisnessLogicService.html","title":"injectable - BuisnessLogicService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  BuisnessLogicService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/buisness-logic.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                mTemperatureConverterService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getFiveDaysValueInFormat\n                            \n                            \n                                    Public\n                                getNoOfDays\n                            \n                            \n                                    Public\n                                getWeatherBannerIconFromAssetFolder\n                            \n                            \n                                    Public\n                                getWeatherForcastIconFromAssetFolder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mTemperatureConverterService: TemperatureConverterService)\n                    \n                \n                        \n                            \n                                Defined in src/app/buisness-logic.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mTemperatureConverterService\n                                                  \n                                                        \n                                                                        TemperatureConverterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getFiveDaysValueInFormat\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFiveDaysValueInFormat(mDate, mFiveDaysValue)\n                \n            \n\n\n            \n                \n                    Defined in src/app/buisness-logic.service.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mDate\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mFiveDaysValue\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getNoOfDays\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNoOfDays(mFiveDaysValue)\n                \n            \n\n\n            \n                \n                    Defined in src/app/buisness-logic.service.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mFiveDaysValue\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getWeatherBannerIconFromAssetFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeatherBannerIconFromAssetFolder(mWeatherType: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/buisness-logic.service.ts:15\n                \n            \n\n\n            \n                \n                    Get image path from weather description string \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mWeatherType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getWeatherForcastIconFromAssetFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeatherForcastIconFromAssetFolder(mWeatherType: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/buisness-logic.service.ts:73\n                \n            \n\n\n            \n                \n                    Get image path from weather description string \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mWeatherType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            mTemperatureConverterService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TemperatureConverterService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/buisness-logic.service.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { TemperatureConverterService } from '../app/temperature-converter.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BuisnessLogicService {\n\n  constructor(public mTemperatureConverterService:TemperatureConverterService) { }\n\n  /**\n  * Get image path from weather description string \n  * @param mWeatherType \n  */\n  public getWeatherBannerIconFromAssetFolder(mWeatherType: string): string {\n\n    switch (mWeatherType) {\n      case \"clear sky\": {\n        return \"../../assets/images/clear_sky.png\";\n        break;\n      }\n\n      case \"few clouds\": {\n        return \"../../assets/images/few_clouds.png\";\n        break;\n      }\n\n      case \"scattered clouds\": {\n        return \"../../assets/images/scattered_clouds.png\";\n        break;\n      }\n\n      case \"broken clouds\": {\n        return \"../../assets/images/broken_clouds.png\";\n        break;\n      }\n      case \"shower rain\": {\n        return \"../../assets/images/shower_rain.png\";\n        break;\n      }\n      case \"rain\": {\n        return \"../../assets/images/rain.png\";\n        break;\n      }\n      case \"snow\": {\n        return \"../../assets/images/snow.png\";\n        break;\n      }\n\n      case \"mist\": {\n        return \"../../assets/images/mist.png\";\n        break;\n      }\n      case \"mist\": {\n        return \"../../assets/images/mist.png\";\n        break;\n      }\n\n\n      default: {\n        return \"../../assets/images/clear_sky.png\";\n        break;\n      }\n    }\n\n  }\n\n\n   /**\n  * Get image path from weather description string \n  * @param mWeatherType \n  */\n public getWeatherForcastIconFromAssetFolder(mWeatherType: string): string {\n\n  switch (mWeatherType) {\n   \n    case \"01d\": {\n      return \"../../assets/images/01d.png\";\n      break;\n    }\n\n    case \"02d\": {\n      return \"../../assets/images/02d.png\";\n      break;\n    }\n    case \"03d\": {\n      return \"../../assets/images/03d.png\";\n      break;\n    }\n\n    case \"04d\": {\n      return \"../../assets/images/04d.png\";\n      break;\n    }\n    case \"09d\": {\n      return \"../../assets/images/09d.png\";\n      break;\n    }\n    case \"10d\": {\n      return \"../../assets/images/10d.png\";\n      break;\n    }\n    case \"11d\": {\n      return \"../../assets/images/11d.png\";\n      break;\n    }\n    case \"13d\": {\n      return \"../../assets/images/13d.png\";\n      break;\n    }\n    case \"50d\": {\n      return \"../../assets/images/50d.png\";\n      break;\n    }\n    default: {\n      return \"../../assets/images/01d.png\";\n      break;\n    }\n  }\n\n}\n\npublic getFiveDaysValueInFormat(mDate,mFiveDaysValue){\n  var mDateTempMax = [];\n  var mDateTempMin = [];\n  var mFiveDaysWeatherIcon=[];\n\n  var totlReturn=[];\n        /////// getHigh Log Temp Of Each Day /////\n        for (let i = 0; i  JSON.parse(mFiveDaysValue).list[j].main.temp_min) {\n                  mLow = JSON.parse(mFiveDaysValue).list[j].main.temp_min;\n                }\n              }\n\n            }\n\n          }\n\n          mDateTempMax.push(Math.floor(this.mTemperatureConverterService.kelvinToCelcius(mHeigh)));\n          mDateTempMin.push(Math.floor(this.mTemperatureConverterService.kelvinToCelcius(mLow)));\n          mFiveDaysWeatherIcon.push(mWeatherIcon);\n\n          // console.log(this.mTemperatureConverterService.kelvinToCelcius(mHeigh)\n          //   + \"     \" + this.mTemperatureConverterService.kelvinToCelcius(mLow));\n\n\n        }\n\n        totlReturn.push(mDateTempMax);\n        totlReturn.push(mDateTempMin);\n        totlReturn.push(mFiveDaysWeatherIcon);\n\n        return totlReturn;\n}\n\npublic getNoOfDays(mFiveDaysValue){\n  var mDate = [];\n  for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetCityNameGeocoderService.html":{"url":"injectables/GetCityNameGeocoderService.html","title":"injectable - GetCityNameGeocoderService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GetCityNameGeocoderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/get-city-name-geocoder.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                geoAddress\n                            \n                            \n                                options\n                            \n                            \n                                    Public\n                                platform\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                generateAddress\n                            \n                            \n                                    Async\n                                getGeolocation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(platform: Platform, geolocation: Geolocation, nativeGeocoder: NativeGeocoder)\n                    \n                \n                        \n                            \n                                Defined in src/app/get-city-name-geocoder.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        platform\n                                                  \n                                                        \n                                                                    Platform\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        geolocation\n                                                  \n                                                        \n                                                                    Geolocation\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nativeGeocoder\n                                                  \n                                                        \n                                                                    NativeGeocoder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            generateAddress\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateAddress(addressObj)\n                \n            \n\n\n            \n                \n                    Defined in src/app/get-city-name-geocoder.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    addressObj\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getGeolocation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getGeolocation(latitude, longitude)\n                \n            \n\n\n            \n                \n                    Defined in src/app/get-city-name-geocoder.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    latitude\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    longitude\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            geoAddress\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-city-name-geocoder.service.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     NativeGeocoderOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n      useLocale: true,\n      maxResults: 5\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-city-name-geocoder.service.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            platform\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Platform\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-city-name-geocoder.service.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { NativeGeocoder, NativeGeocoderResult, NativeGeocoderOptions } from '@ionic-native/native-geocoder/ngx';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GetCityNameGeocoderService {\n\n  geoAddress:string;\n\n  constructor(public platform: Platform,\n    private geolocation: Geolocation,\n    private nativeGeocoder: NativeGeocoder) { }\n\n    options: NativeGeocoderOptions = {\n      useLocale: true,\n      maxResults: 5\n    };\n\n    async getGeolocation(latitude,longitude):Promise {     \n   \n        await this.nativeGeocoder.reverseGeocode(latitude, longitude, this.options)\n        .then((result: NativeGeocoderResult[]) => {\n          this.geoAddress = result[0].locality+','+\n          result[0].countryCode;         \n        })\n        .catch((error: any) => {\n          this.geoAddress ='Error'; \n        });\n    \n\n  \n         return this.geoAddress;\n        \n      }\n\n\n      \n  //Return Comma saperated address\n  public generateAddress(addressObj){\n    let obj = [];\n    let address = \"\";\n    for (let key in addressObj) {\n      obj.push(addressObj[key]);\n    }\n    obj.reverse();\n    for (let val in obj) {\n      if(obj[val].length)\n      address += val+' '+obj[val]+', ';\n    }\n  return address.slice(0, -2);\n}\n        \n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetLocationLatLonService.html":{"url":"injectables/GetLocationLatLonService.html","title":"injectable - GetLocationLatLonService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GetLocationLatLonService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/get-location-lat-lon.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                geoAccuracy\n                            \n                            \n                                geoLatitude\n                            \n                            \n                                geoLongitude\n                            \n                            \n                                    Public\n                                platform\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getGeolocation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(platform: Platform, geolocation: Geolocation, nativeGeocoder: NativeGeocoder)\n                    \n                \n                        \n                            \n                                Defined in src/app/get-location-lat-lon.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        platform\n                                                  \n                                                        \n                                                                    Platform\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        geolocation\n                                                  \n                                                        \n                                                                    Geolocation\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nativeGeocoder\n                                                  \n                                                        \n                                                                    NativeGeocoder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getGeolocation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getGeolocation()\n                \n            \n\n\n            \n                \n                    Defined in src/app/get-location-lat-lon.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            geoAccuracy\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-location-lat-lon.service.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            geoLatitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-location-lat-lon.service.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            geoLongitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-location-lat-lon.service.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            platform\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Platform\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-location-lat-lon.service.ts:15\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { NativeGeocoder, NativeGeocoderResult, NativeGeocoderOptions } from '@ionic-native/native-geocoder/ngx';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GetLocationLatLonService {\n  geoLatitude: number;\n  geoLongitude: number;\n  geoAccuracy:number;\n\n  constructor(public platform: Platform,\n    private geolocation: Geolocation,\n    private nativeGeocoder: NativeGeocoder) { }\n\n   async getGeolocation():Promise {\n    if (this.platform.is('android') || this.platform.is('ios')) {\n      await this.geolocation.getCurrentPosition().then((resp) => {\n        this.geoLatitude = resp.coords.latitude;\n        this.geoLongitude = resp.coords.longitude; \n        this.geoAccuracy = resp.coords.accuracy;       \n       }).catch((error) => {\n       // this.geoAddress ='Error getting location'+ JSON.stringify(error);  \n       return  'Error';\n       });\n      }\n      else{\n        return 'Error';\n      }\n\n       return (this.geoLatitude).toString()+\"---\"+(this.geoLongitude).toString();\n      \n    }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomePageModule.html":{"url":"modules/HomePageModule.html","title":"module - HomePageModule","body":"\n                   \n\n\n\n\n    Modules\n    HomePageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HomePageModule\n\n\n\ncluster_HomePageModule_declarations\n\n\n\n\nHomePage\n\nHomePage\n\n\n\nHomePageModule\n\nHomePageModule\n\nHomePageModule -->\n\nHomePage->HomePageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/home/home.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            HomePage\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { HomePage } from './home.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        component: HomePage\n      }\n    ])\n  ],\n  declarations: [HomePage]\n})\nexport class HomePageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OverLapGraphForWeatherPredictionService.html":{"url":"injectables/OverLapGraphForWeatherPredictionService.html","title":"injectable - OverLapGraphForWeatherPredictionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OverLapGraphForWeatherPredictionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/over-lap-graph-for-weather-prediction.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                showGrapg\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            showGrapg\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showGrapg(lineChart, lineCanvas, mDate, mDateTemp, label, color, yAxisMin, yAxisMax)\n                \n            \n\n\n            \n                \n                    Defined in src/app/over-lap-graph-for-weather-prediction.service.ts:30\n                \n            \n\n\n            \n                \n                    Show Weather Graph\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    lineChart\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Chart object\n\n                                    \n                                \n                                \n                                    lineCanvas\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Canvas object\n\n                                    \n                                \n                                \n                                    mDate\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Date array\n\n                                    \n                                \n                                \n                                    mDateTemp\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Minumun temprature\n\n                                    \n                                \n                                \n                                    label\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        For hoover\n\n                                    \n                                \n                                \n                                    color\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Fill color of graph\n\n                                    \n                                \n                                \n                                    yAxisMin\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Minimum temprature of graph\n\n                                    \n                                \n                                \n                                    yAxisMax\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Minimum temprature of graph\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Chart } from 'chart.js';\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service for Graph\n*/\nexport class OverLapGraphForWeatherPredictionService {\n\n/**\n * @ignore\n */\n  constructor() { }\n\n/**\n * Show Weather Graph\n * @param {Chart} lineChart Chart object\n * @param lineCanvas Canvas object\n * @param mDate Date array\n * @param mDateTemp Minumun temprature\n * @param label For hoover\n * @param color Fill color of graph\n * @param yAxisMin Minimum temprature of graph\n * @param yAxisMax Minimum temprature of graph\n */\n  public showGrapg(lineChart,lineCanvas,mDate,mDateTemp,label,color,yAxisMin,yAxisMax) {\n    lineChart = new Chart(lineCanvas.nativeElement,\n      {\n        options: {\n          legend: {\n            display: false\n          },\n          hover: {\n            animationDuration: 0\n          },\n          animation: {\n            onComplete: function () {\n              const chartInstance = this.chart,\n                ctx = chartInstance.ctx;\n\n              ctx.font = Chart.helpers.fontString(\n                8,\n                Chart.defaults.global.defaultFontStyle,\n                Chart.defaults.global.defaultFontFamily\n              );\n              ctx.textAlign = \"center\";\n              ctx.textBaseline = \"bottom\";\n             \n            \n              this.data.datasets.forEach(function (dataset, i) {\n                const meta = chartInstance.controller.getDatasetMeta(i);\n                meta.data.forEach(function (bar, index) {\n                  const data = dataset.data[index];\n                  \n                  if(index!=5)\n                  ctx.fillText(data, bar._model.x +10, bar._model.y - 2);\n                  else\n                  ctx.fillText(data, bar._model.x -6, bar._model.y - 2);\n                });\n              });\n            }\n          },\n          tooltips: {\n            enabled: true\n          },\n          responsive: true, \n          maintainAspectRatio: false,\n          scales: {\n            xAxes: [\n              {\n                display: false,\n                gridLines: {\n                  drawOnChartArea: false\n                },\n                ticks: {\n                  display: false\n                }\n              }\n            ],\n            yAxes: [\n              {\n                display: true,\n                gridLines: {\n                  drawOnChartArea: false,\n                  display: false\n                },\n                ticks: {\n                  // beginAtZero: true,\n                  min: yAxisMin,\n                  max: yAxisMax,\n                  display: false\n                }\n              }\n            ]\n          }\n        },\n        type: 'line',\n        data: {\n          labels: mDate,\n          datasets: [\n\n            {\n              label: label,\n              fill: true,\n              lineTension: 0.1,\n              backgroundColor: color,\n              borderColor: 'rgba(75,192,192,1)',\n              borderCapStyle: 'butt',\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: 'round',\n              pointBorderColor: 'rgba(75,192,192,1)',\n              pointBackgroundColor: '#fff',\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n              pointHoverBorderColor: 'rgba(220,220,220,1)',\n              pointHoverBorderWidth: 1,\n              pointRadius: 1,\n              pointHitRadius: 10,\n              data: mDateTemp,\n              spanGaps: false,\n            }\n\n          ]\n        }\n      });\n\n\n\n\n\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepositoryService.html":{"url":"injectables/RepositoryService.html","title":"injectable - RepositoryService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RepositoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/repository.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                http\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getWeatherValueCurrent\n                            \n                            \n                                    Async\n                                getWeatherValueFiveDays\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/repository.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor description\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                From angular/common/http\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getWeatherValueCurrent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeatherValueCurrent(params: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/repository.service.ts:45\n                \n            \n\n\n            \n                \n                    Get Current value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        CityName\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        JSON Object or 'Error'\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getWeatherValueFiveDays\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeatherValueFiveDays(params: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/repository.service.ts:27\n                \n            \n\n\n            \n                \n                    Get five days Value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        CityName\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        JSON Object or 'Error'\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            http\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HttpClient\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/repository.service.ts:19\n                            \n                        \n\n                \n                    \n                        From angular/common/http\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service for Get JSON from URL\n*/\nexport class RepositoryService {  \n  \n\n /**\n * Constructor description\n * @param {HttpClient} http From angular/common/http\n */\n  constructor(public http: HttpClient) { }\n\n\n/**\n * Get five days Value\n * @param params CityName\n * @returns JSON Object or 'Error'\n */\n  async getWeatherValueFiveDays(params:string) {  \n\n    const mValue=await this.http.get('http://api.openweathermap.org/data/2.5/forecast?q='+params+'&APPID=d994b85acc1528b1a51fb0273b7ca7c4').toPromise().then(data => {      \n      return data\n    }, err => {\n      console.log(err);\n      return \"Error\"\n    });\n\n    return JSON.stringify(mValue)   \n  \n  }\n\n  /**\n   * Get Current value\n   * @param params CityName\n   * @returns JSON Object or 'Error'\n   */\n  async getWeatherValueCurrent(params:string) {  \n\n    const mValue=await this.http.get('http://api.openweathermap.org/data/2.5//weather?q='+params+'&APPID=d994b85acc1528b1a51fb0273b7ca7c4').toPromise().then(data => {      \n      return data\n    }, err => {\n      console.log(err);\n      return \"Error\"\n    });\n\n    return JSON.stringify(mValue)   \n  \n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TemperatureConverterService.html":{"url":"injectables/TemperatureConverterService.html","title":"injectable - TemperatureConverterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TemperatureConverterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/temperature-converter.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                kelvinToCelcius\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            kelvinToCelcius\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    kelvinToCelcius(params)\n                \n            \n\n\n            \n                \n                    Defined in src/app/temperature-converter.service.ts:22\n                \n            \n\n\n            \n                \n                    Convert from Kelvin to Celcius\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Kelvin temperature\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service for Temperature Converter\n*/\nexport class TemperatureConverterService {\n\n  /**\n   * @ignore\n   */\n  constructor() { }\n\n  /**\n   * Convert from Kelvin to Celcius\n   * @param params Kelvin temperature\n   */\n  public kelvinToCelcius(params){\n    return (params-273.15)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UIServiceServiceService.html":{"url":"injectables/UIServiceServiceService.html","title":"injectable - UIServiceServiceService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UIServiceServiceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/uiservice-service.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                loader\n                            \n                            \n                                    Private\n                                loaderLoading\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dismissLoading\n                            \n                            \n                                    Public\n                                showLoading\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loading: LoadingController)\n                    \n                \n                        \n                            \n                                Defined in src/app/uiservice-service.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor description\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        loading\n                                                  \n                                                        \n                                                                    LoadingController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                From ionic/angular\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            dismissLoading\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    dismissLoading()\n                \n            \n\n\n            \n                \n                    Defined in src/app/uiservice-service.service.ts:49\n                \n            \n\n\n            \n                \n                    Dismiss Loading Dialog\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            showLoading\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showLoading(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/uiservice-service.service.ts:35\n                \n            \n\n\n            \n                \n                    Show Loading Dialog\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        UI Loading Message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loader\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLIonLoadingElement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/uiservice-service.service.ts:24\n                            \n                        \n\n                \n                    \n                        Loader nstace create\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loaderLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/uiservice-service.service.ts:29\n                            \n                        \n\n                \n                    \n                        Continue show loading dialog\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { LoadingController } from '@ionic/angular';\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n\n/**\n * Service for UILoading\n*/\nexport class UIServiceServiceService {\n\n/**\n * Constructor description\n * @param {LoadingController} loading From ionic/angular\n */\n  constructor(private loading: LoadingController) { }\n\n/**\n * Loader nstace create\n */\n  private loader: HTMLIonLoadingElement;\n\n/**\n * Continue show loading dialog\n */\n  private loaderLoading = false;\n\n  /**\n   * Show Loading Dialog\n   * @param message UI Loading Message\n   */\n  public showLoading(message: string) {\n      this.loaderLoading = true;\n      this.loading.create({\n          message,\n          showBackdrop: true\n      }).then(load => {\n          this.loader = load;\n          load.present().then(() => { this.loaderLoading = false; });\n      });\n  }\n\n  /**\n   * Dismiss Loading Dialog\n   */\n  public dismissLoading() {\n      const interval = setInterval(() => {\n          if (this.loader || !this.loaderLoading) {\n              this.loader.dismiss().then(() => { this.loader = null; clearInterval(interval)});\n          } else if (!this.loader && !this.loaderLoading) {\n              clearInterval(interval);\n          }\n      }, 500);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UIToastService.html":{"url":"injectables/UIToastService.html","title":"injectable - UIToastService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UIToastService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/uitoast.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toastController\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                presentToast\n                            \n                            \n                                    Public\n                                    Async\n                                presentToastWithOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(toastController: ToastController)\n                    \n                \n                        \n                            \n                                Defined in src/app/uitoast.service.ts:14\n                            \n                        \n\n                \n                    \n                            Constructor description\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        toastController\n                                                  \n                                                        \n                                                                    ToastController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                From ionic/angular\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            presentToast\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    presentToast()\n                \n            \n\n\n            \n                \n                    Defined in src/app/uitoast.service.ts:26\n                \n            \n\n\n            \n                \n                    Network issue Toast\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            presentToastWithOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    presentToastWithOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/uitoast.service.ts:38\n                \n            \n\n\n            \n                \n                    Toast With Option\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toastController\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ToastController\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/uitoast.service.ts:21\n                            \n                        \n\n                \n                    \n                        From ionic/angular\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ToastController } from '@ionic/angular';\n\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n\n/**\n * Service for Toast\n*/\nexport class UIToastService {\n  \n\n /**\n * Constructor description\n * @param {ToastController} toastController From ionic/angular\n */\n  constructor(public toastController: ToastController) { }\n\n/**\n* Network issue Toast\n*/\n  public async presentToast() {\n    const toast = await this.toastController.create({\n      message: 'Network issue ...',\n      duration: 1200,\n      cssClass:\"toast-width-class\"\n    });\n    toast.present();\n  }\n\n/**\n* Toast With Option\n*/\n  public async presentToastWithOptions() {\n    const toast = await this.toastController.create({\n      header: 'Toast header',\n      message: 'Click to Close',\n      position: 'top',\n      buttons: [\n        {\n          side: 'start',\n          icon: 'star',\n          text: 'Favorite',\n          handler: () => {\n            console.log('Favorite clicked');\n          }\n        }, {\n          text: 'Done',\n          role: 'cancel',\n          handler: () => {\n            console.log('Cancel clicked');\n          }\n        }\n      ]\n    });\n    toast.present();\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/buisness-logic.service.ts\n            \n            injectable\n            BuisnessLogicService\n            \n                28 %\n                (2/7)\n            \n        \n        \n            \n                \n                src/app/get-city-name-geocoder.service.ts\n            \n            injectable\n            GetCityNameGeocoderService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/get-location-lat-lon.service.ts\n            \n            injectable\n            GetLocationLatLonService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/home/home.page.ts\n            \n            component\n            HomePage\n            \n                83 %\n                (30/36)\n            \n        \n        \n            \n                \n                src/app/over-lap-graph-for-weather-prediction.service.ts\n            \n            injectable\n            OverLapGraphForWeatherPredictionService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/repository.service.ts\n            \n            injectable\n            RepositoryService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/temperature-converter.service.ts\n            \n            injectable\n            TemperatureConverterService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/uiservice-service.service.ts\n            \n            injectable\n            UIServiceServiceService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/uitoast.service.ts\n            \n            injectable\n            UIToastService\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/common : ~8.2.14\n        \n            @angular/core : ~8.2.14\n        \n            @angular/forms : ~8.2.14\n        \n            @angular/platform-browser : ~8.2.14\n        \n            @angular/platform-browser-dynamic : ~8.2.14\n        \n            @angular/router : ~8.2.14\n        \n            @capacitor/android : ^2.0.1\n        \n            @capacitor/core : 2.0.1\n        \n            @capacitor/ios : ^2.0.1\n        \n            @ionic-native/core : ^5.0.7\n        \n            @ionic-native/geolocation : ^5.24.0\n        \n            @ionic-native/native-geocoder : ^5.24.0\n        \n            @ionic-native/splash-screen : ^5.0.0\n        \n            @ionic-native/status-bar : ^5.0.0\n        \n            @ionic/angular : ^5.0.7\n        \n            chart.js : ^2.9.3\n        \n            cordova-android : 8.1.0\n        \n            cordova-plugin-geolocation : ^4.0.2\n        \n            cordova-plugin-nativegeocoder : ^3.4.0\n        \n            core-js : ^2.5.4\n        \n            rxjs : ~6.5.1\n        \n            tslib : ^1.9.0\n        \n            zone.js : ~0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_HomePageModule\n\n\n\ncluster_HomePageModule_declarations\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nBuisnessLogicService\n\nBuisnessLogicService\n\nAppModule -->\n\nBuisnessLogicService->AppModule\n\n\n\n\n\nGetCityNameGeocoderService\n\nGetCityNameGeocoderService\n\nAppModule -->\n\nGetCityNameGeocoderService->AppModule\n\n\n\n\n\nGetLocationLatLonService\n\nGetLocationLatLonService\n\nAppModule -->\n\nGetLocationLatLonService->AppModule\n\n\n\n\n\nOverLapGraphForWeatherPredictionService\n\nOverLapGraphForWeatherPredictionService\n\nAppModule -->\n\nOverLapGraphForWeatherPredictionService->AppModule\n\n\n\n\n\nRepositoryService\n\nRepositoryService\n\nAppModule -->\n\nRepositoryService->AppModule\n\n\n\n\n\nTemperatureConverterService\n\nTemperatureConverterService\n\nAppModule -->\n\nTemperatureConverterService->AppModule\n\n\n\n\n\nUIServiceServiceService\n\nUIServiceServiceService\n\nAppModule -->\n\nUIServiceServiceService->AppModule\n\n\n\n\n\nUIToastService\n\nUIToastService\n\nAppModule -->\n\nUIToastService->AppModule\n\n\n\n\n\nHomePage\n\nHomePage\n\n\n\nHomePageModule\n\nHomePageModule\n\nHomePageModule -->\n\nHomePage->HomePageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        2 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomePageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
