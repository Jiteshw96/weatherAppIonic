var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,1.472,1,1.267]],["body/components/AppComponent.html",[0,2.622,1,2.077,2,3.148,3,0.409,4,0.409,5,2.48,6,2.48,7,2.48,8,2.48,9,0.334,10,1.981,11,0.677,12,3.435,13,3.435,14,3.941,15,1.107,16,4.254,17,0.938,18,3.435,19,3.941,20,3.435,21,3.435,22,0.49,23,0.938,24,4.254,25,1.22,26,1.653,27,2.782,28,3.965,29,3.965,30,0.938,31,2.48,32,3.435,33,0.677,34,0.057,35,0.779,36,0.677,37,0.677,38,2.48,39,3.435,40,2.289,41,3.435,42,0.677,43,1.981,44,0.702,45,0.334,46,0.786,47,1.677,48,1.653,49,1.981,50,1.653,51,1.981,52,0.409,53,0.409,54,1.076,55,2.236,56,2.48,57,2.48,58,2.48,59,2.48,60,2.744,61,3.435,62,1.211,63,3.435,64,3.435,65,2.48,66,3.398,67,2.48,68,2.48,69,1.407,70,1.981,71,2.48,72,2.48,73,0.026,74,0.036,75,0.026]],["title/modules/AppModule.html",[76,1.096,77,1.472]],["body/modules/AppModule.html",[1,2.416,3,0.362,4,0.362,9,0.295,15,0.512,27,1.787,28,2.516,29,2.516,34,0.057,35,0.434,44,0.855,45,0.295,46,0.998,47,1.967,48,1.461,49,1.752,50,1.461,51,1.752,52,0.362,53,0.362,62,1.071,73,0.023,74,0.033,75,0.023,76,0.927,77,2.984,78,0.927,79,1.071,80,2.456,81,2.456,82,2.456,83,1.244,84,1.752,85,1.752,86,1.752,87,1.752,88,1.752,89,2.083,90,2.168,91,2.168,92,2.168,93,2.168,94,2.168,95,1.876,96,2.168,97,2.168,98,2.099,99,1.461,100,1.461,101,2.193,102,2.099,103,2.099,104,3.15,105,1.752,106,1.461,107,3.15,108,1.244,109,1.752,110,3.15,111,2.193,112,2.193,113,2.193,114,2.193,115,1.752,116,2.193,117,2.193,118,2.193,119,2.193,120,2.193,121,1.752,122,1.752,123,2.193,124,1.461,125,1.071,126,1.244,127,2.193,128,1.787,129,1.461,130,1.787,131,1.461,132,1.244,133,1.461,134,1.244,135,1.461,136,2.193,137,1.461,138,2.193,139,2.193,140,2.193,141,2.193,142,2.193,143,2.193]],["title/modules/AppRoutingModule.html",[76,1.096,89,1.267]],["body/modules/AppRoutingModule.html",[3,0.574,4,0.574,9,0.469,34,0.057,44,0.708,45,0.469,52,0.574,53,0.574,70,3.428,73,0.037,74,0.045,75,0.037,78,1.472,83,1.976,89,2.095,102,2.321,103,2.859,108,1.976,144,3.483,145,3.483,146,4.291,147,3.428,148,2.638,149,1.701,150,2.859,151,3.483,152,3.483,153,3.483,154,3.483,155,3.483,156,3.483,157,3.483,158,3.483,159,3.483]],["title/injectables/BuisnessLogicService.html",[90,1.267,160,0.084]],["body/injectables/BuisnessLogicService.html",[3,0.22,4,0.22,9,0.18,11,1.157,15,0.503,17,0.74,22,0.264,23,0.588,25,0.74,30,1.126,33,1.048,34,0.057,35,0.79,36,0.932,37,1.048,42,1.157,44,0.355,45,0.18,52,0.22,53,0.22,54,1.048,66,2.726,73,0.014,74,0.023,75,0.014,90,1.519,95,1.442,121,1.066,122,1.066,125,1.052,126,1.764,150,2.823,160,0.07,161,0.364,162,3.384,163,1.066,164,0.683,165,0.91,166,1.738,167,3.11,168,2.915,169,2.155,170,2.155,171,2.155,172,2.155,173,2.155,174,2.155,175,1.335,176,1.335,177,2.165,178,2.165,179,0.858,180,1.335,181,1.335,182,2.43,183,3.11,184,2.155,185,3.11,186,2.484,187,1.335,188,1.335,189,2.71,190,1.335,191,2.726,192,1.335,193,1.335,194,2.71,195,2.155,196,1.335,197,1.335,198,3.413,199,1.335,200,2.155,201,2.155,202,2.915,203,2.155,204,2.155,205,2.072,206,1.875,207,1.721,208,2.155,209,2.155,210,1.335,211,3.11,212,2.155,213,2.317,214,2.165,215,1.335,216,4.414,217,3.649,218,3.11,219,2.155,220,1.335,221,1.335,222,1.805,223,1.335,224,1.335,225,2.155,226,2.155,227,2.155,228,0.423,229,1.335,230,1.335,231,1.335,232,0.652,233,1.335,234,1.335,235,1.335,236,2.155,237,4.85,238,1.335,239,2.155,240,1.335,241,4.907,242,2.155,243,3.11,244,1.335,245,1.335,246,1.335,247,1.335,248,1.335,249,1.335,250,2.71,251,1.335,252,1.335,253,1.335,254,1.335,255,1.335,256,1.335,257,1.335,258,1.335,259,1.335,260,2.71,261,1.335,262,1.335,263,1.335,264,1.335,265,1.335,266,1.335,267,2.155,268,1.335,269,1.335,270,1.335,271,1.335,272,1.335,273,1.335,274,1.335,275,1.335,276,1.335,277,1.335,278,1.335,279,1.335,280,1.335,281,1.335,282,1.335,283,1.335,284,1.335,285,1.335,286,1.335,287,1.335,288,2.155,289,1.335,290,1.335,291,1.335,292,1.335,293,1.721,294,2.155,295,1.335,296,1.335,297,1.335,298,1.335,299,1.335,300,1.335,301,1.335,302,1.335,303,1.335]],["title/injectables/GetCityNameGeocoderService.html",[91,1.267,160,0.084]],["body/injectables/GetCityNameGeocoderService.html",[3,0.325,4,0.325,9,0.265,11,1.045,15,0.68,17,0.946,22,0.389,23,0.795,25,0.538,26,1.312,27,2.777,30,1.168,33,0.946,34,0.057,35,0.933,36,1.045,37,0.946,40,2.309,42,0.795,44,0.631,45,0.265,46,0.624,47,1.422,52,0.325,53,0.325,54,1.168,55,1.652,73,0.021,74,0.031,75,0.021,91,1.869,128,2.677,129,1.312,130,2.677,131,2.722,132,1.117,133,1.312,137,3.027,160,0.094,161,0.538,164,0.923,165,1.23,166,1.496,179,1.402,182,1.995,205,1.94,206,0.962,213,0.962,222,1.312,228,0.624,232,0.962,304,2.948,305,1.573,306,2.912,307,2.768,308,2.912,309,1.692,310,2.326,311,2.912,312,2.326,313,2.768,314,2.912,315,1.969,316,4.639,317,3.465,318,1.94,319,1.969,320,3.416,321,1.969,322,3.058,323,3.058,324,1.573,325,2.912,326,2.912,327,1.94,328,2.912,329,2.326,330,1.969,331,2.326,332,1.969,333,2.326,334,1.969,335,1.969,336,1.969,337,1.117,338,1.969,339,1.969,340,1.969,341,2.768,342,1.969,343,1.969,344,1.573,345,1.117,346,1.969,347,1.969,348,2.912,349,1.969,350,1.969,351,1.969,352,2.912,353,1.969,354,1.969,355,1.969,356,1.312]],["title/injectables/GetLocationLatLonService.html",[92,1.267,160,0.084]],["body/injectables/GetLocationLatLonService.html",[3,0.357,4,0.357,9,0.291,11,0.851,15,0.728,17,0.998,22,0.428,23,0.851,25,0.851,26,1.441,27,2.866,30,1.207,33,0.59,34,0.057,35,0.428,36,1.158,37,0.59,40,2.436,42,0.851,44,0.66,45,0.291,46,0.685,47,1.522,52,0.357,53,0.357,54,0.998,55,1.769,73,0.023,74,0.033,75,0.023,92,1.785,128,2.736,129,1.441,130,2.736,131,1.441,132,1.227,133,1.441,134,2.645,135,3.107,160,0.101,161,0.59,164,0.988,165,1.317,166,1.141,179,1.443,182,1.785,228,0.685,232,1.056,304,3.035,309,2.071,310,2.921,312,2.49,313,2.921,320,2.49,322,2.49,323,3.53,324,2.921,333,1.727,337,1.227,341,1.727,344,1.727,345,2.074,357,1.727,358,3.118,359,3.656,360,3.656,361,3.118,362,3.118,363,2.162,364,3.118,365,3.118,366,3.389,367,3.118,368,2.162,369,2.162,370,2.162,371,2.162,372,2.162,373,2.162,374,2.162,375,2.162,376,2.162,377,2.162,378,2.162,379,2.162,380,2.162,381,2.162,382,2.162,383,2.162,384,2.162,385,2.162,386,2.162]],["title/modules/HomePageModule.html",[76,1.096,387,1.472]],["body/modules/HomePageModule.html",[0,1.864,3,0.542,4,0.542,9,0.442,34,0.057,44,0.825,45,0.442,46,1.041,52,0.542,53,0.542,62,1.604,69,2.881,73,0.035,74,0.043,75,0.035,76,1.388,78,1.388,79,1.604,80,3.017,81,2.189,82,2.189,83,1.864,98,2.757,99,2.189,100,2.189,102,2.189,103,2.757,108,1.864,109,3.305,147,2.624,150,2.189,387,2.838,388,2.624,389,2.624,390,3.285,391,4.137,392,2.624,393,4.137,394,2.624,395,3.285,396,3.285]],["title/injectables/OverLapGraphForWeatherPredictionService.html",[93,1.267,160,0.084]],["body/injectables/OverLapGraphForWeatherPredictionService.html",[3,0.307,4,0.307,9,0.25,11,0.762,15,0.652,17,0.915,22,0.552,23,0.762,25,0.508,30,0.508,33,0.508,34,0.057,35,0.368,36,0.508,37,0.508,42,0.508,43,1.486,44,0.46,45,0.25,52,0.307,53,0.307,54,1.22,62,0.909,73,0.02,74,0.029,75,0.02,93,1.363,124,1.86,125,2.307,126,2.112,149,1.636,160,0.09,161,0.508,164,0.884,166,1.227,179,0.59,186,2.974,191,2.23,228,0.59,293,1.486,307,1.486,318,2.48,327,2.658,329,1.486,397,2.23,398,1.486,399,2.792,400,1.861,401,3.35,402,3.723,403,3.989,404,4.188,405,3.723,406,3.723,407,1.861,408,2.23,409,3.35,410,3.723,411,2.792,412,2.792,413,2.792,414,4.188,415,2.792,416,3.35,417,3.723,418,1.486,419,1.486,420,1.861,421,1.486,422,1.861,423,4.188,424,3.65,425,1.861,426,1.861,427,1.861,428,1.861,429,1.861,430,1.861,431,1.861,432,1.861,433,1.861,434,2.792,435,1.861,436,1.486,437,1.861,438,1.861,439,1.861,440,1.861,441,1.861,442,1.861,443,1.861,444,1.861,445,1.861,446,1.861,447,1.861,448,1.861,449,1.861,450,1.486,451,2.232,452,1.861,453,1.861,454,2.792,455,3.723,456,3.723,457,3.35,458,3.723,459,2.792,460,2.792,461,1.861,462,2.792,463,1.861,464,1.861,465,1.861,466,1.861,467,1.861,468,1.861,469,2.792,470,2.792,471,2.792,472,1.861,473,1.861,474,1.861,475,1.861,476,1.861,477,1.861,478,1.861,479,1.861,480,1.861,481,1.861,482,1.861,483,3.35,484,1.861,485,1.861,486,1.861,487,1.861,488,1.861,489,1.861,490,1.861,491,1.861,492,1.861,493,1.861,494,1.861,495,1.861,496,3.35,497,1.861,498,1.861,499,1.861,500,1.861,501,1.861,502,1.861,503,1.861,504,1.861]],["title/injectables/RepositoryService.html",[94,1.267,160,0.084]],["body/injectables/RepositoryService.html",[3,0.385,4,0.385,9,0.315,11,1.238,15,0.77,17,1.042,22,0.462,23,0.9,25,1.042,30,1.193,33,1.042,34,0.057,35,0.755,36,1.132,37,1.042,42,1.132,44,0.629,45,0.315,52,0.385,53,0.629,54,1.042,73,0.025,74,0.035,75,0.025,94,1.609,115,3.311,149,1.609,160,0.107,161,0.638,164,1.044,165,1.392,166,1.206,168,1.867,179,0.74,182,2.214,202,2.632,205,2.912,206,2.134,207,2.632,213,2.134,228,0.74,232,1.141,309,2.214,318,3.022,345,2.352,451,2.196,505,1.867,506,4.371,507,3.817,508,3.295,509,3.295,510,2.337,511,4.535,512,3.295,513,2.337,514,2.337,515,2.632,516,3.311,517,3.311,518,2.337,519,2.337,520,2.337,521,3.295,522,1.867,523,2.337,524,2.337,525,2.337,526,3.295,527,2.337,528,2.337,529,3.295,530,3.295,531,3.295,532,3.295,533,2.337,534,2.337]],["title/injectables/TemperatureConverterService.html",[95,1.096,160,0.084]],["body/injectables/TemperatureConverterService.html",[3,0.535,4,0.535,9,0.436,11,1.12,15,0.958,17,1.229,22,0.641,23,1.12,25,0.885,30,0.885,33,0.885,34,0.057,35,0.641,37,0.885,42,0.885,44,0.535,45,0.436,52,0.535,53,0.535,54,0.885,73,0.034,74,0.043,75,0.034,95,1.733,160,0.133,161,0.885,164,1.3,166,1.648,177,3.277,178,3.595,179,1.027,182,1.583,228,1.027,366,2.589,419,2.589,516,3.595,535,3.277,536,2.589,537,4.102,538,4.102,539,3.242,540,4.731,541,4.102,542,3.242,543,3.242]],["title/injectables/UIServiceServiceService.html",[96,1.267,160,0.084]],["body/injectables/UIServiceServiceService.html",[3,0.348,4,0.348,9,0.284,11,1.147,15,0.715,17,0.984,22,0.417,23,0.836,25,0.984,30,1.196,33,0.836,34,0.058,35,0.606,36,0.984,37,0.836,42,0.836,44,0.505,45,0.284,46,1.142,52,0.348,53,0.348,54,0.836,55,2.486,73,0.022,74,0.032,75,0.022,96,1.495,149,1.495,160,0.099,161,0.576,164,0.97,165,1.294,179,0.668,206,1.03,213,1.76,222,1.406,228,0.668,309,2.14,327,2.041,331,2.446,337,2.045,408,3.16,424,2.88,451,1.406,544,3.612,545,1.685,546,4.201,547,3.605,548,3.605,549,3.956,550,3.063,551,2.11,552,4.201,553,2.11,554,3.96,555,2.11,556,3.063,557,4.382,558,3.063,559,2.11,560,3.501,561,3.063,562,3.063,563,2.11,564,3.063,565,2.11,566,3.063,567,2.11,568,3.063,569,2.11,570,2.11,571,3.956,572,3.063,573,2.11,574,2.11,575,3.956,576,2.11,577,2.11,578,2.11,579,1.685,580,2.11,581,1.685,582,2.11,583,2.11,584,2.11,585,2.11,586,2.11,587,2.11,588,3.063,589,2.11,590,1.685,591,2.11]],["title/injectables/UIToastService.html",[97,1.267,160,0.084]],["body/injectables/UIToastService.html",[3,0.372,4,0.372,9,0.303,11,1.177,15,0.75,17,1.022,22,0.446,23,0.877,25,1.022,30,1.177,33,0.877,34,0.057,35,0.635,36,1.022,37,0.877,42,1.022,44,0.53,45,0.303,46,1.292,52,0.372,53,0.617,54,0.877,60,1.801,73,0.024,74,0.034,75,0.024,97,1.569,149,1.827,160,0.104,161,0.616,164,1.018,165,1.357,166,1.803,179,0.714,213,1.569,214,1.801,228,0.714,232,1.101,309,2.343,337,2.123,517,1.801,560,3.684,581,2.566,590,1.801,592,1.801,593,4.924,594,4.079,595,3.212,596,4.079,597,2.255,598,2.255,599,2.255,600,2.99,601,3.212,602,4.924,603,2.255,604,2.255,605,3.212,606,3.743,607,2.255,608,3.212,609,2.255,610,2.255,611,3.743,612,3.212,613,3.212,614,3.212,615,3.743,616,1.801,617,1.801,618,3.212,619,2.255,620,2.255,621,2.255,622,2.255,623,2.255,624,2.255,625,2.255,626,3.212,627,2.255,628,3.212,629,2.255,630,3.212,631,2.255,632,2.255,633,2.255]],["title/coverage.html",[634,2.831]],["body/coverage.html",[0,2.343,1,1.6,9,0.441,10,2.617,34,0.055,35,0.648,36,0.895,69,1.859,73,0.034,74,0.043,75,0.034,90,1.6,91,1.6,92,1.6,93,1.6,94,1.6,95,1.384,96,1.6,97,1.6,124,2.183,125,1.6,126,1.859,134,1.859,135,2.183,137,2.183,160,0.166,162,2.617,163,2.617,304,2.752,305,2.617,357,2.617,397,2.617,398,2.617,421,2.617,505,2.617,535,2.617,536,2.617,544,2.617,545,2.617,592,2.617,634,2.617,635,3.277,636,3.277,637,3.277,638,5.218,639,3.277,640,3.277,641,4.523,642,3.277,643,3.277,644,4.13,645,4.13,646,3.277,647,3.277]],["title/dependencies.html",[79,1.524,648,2.166]],["body/dependencies.html",[34,0.057,45,0.435,46,1.024,47,2.381,48,2.154,50,2.154,73,0.034,74,0.043,75,0.034,79,1.579,105,3.271,106,2.729,108,1.834,128,1.834,130,1.834,132,1.834,392,2.582,394,2.582,418,2.582,450,2.582,649,4.982,650,3.233,651,3.233,652,4.495,653,3.233,654,3.233,655,3.233,656,4.095,657,3.233,658,4.095,659,3.233,660,3.233,661,4.095,662,3.233,663,4.495,664,3.233,665,3.233,666,4.095,667,3.233,668,3.233,669,3.233,670,3.233,671,3.233,672,3.233,673,3.233,674,3.233,675,3.233,676,3.233,677,3.233]],["title/miscellaneous/enumerations.html",[678,1.73,679,2.493]],["body/miscellaneous/enumerations.html",[22,0.653,34,0.056,73,0.035,74,0.044,75,0.035,134,2.355,206,2.607,345,2.576,356,2.201,515,2.639,522,3.316,554,3.316,579,3.627,600,2.639,616,3.316,617,2.639,678,2.639,679,2.639,680,3.303,681,4.151,682,3.303,683,3.303,684,3.303,685,3.303,686,3.303,687,3.303,688,3.303,689,3.303,690,3.303,691,3.303,692,3.303,693,3.303,694,4.151,695,4.151,696,3.303,697,3.303,698,3.303,699,3.303,700,3.303,701,3.303,702,3.303,703,3.303,704,3.303,705,3.303]],["title/index.html",[22,0.513,706,2.073]],["body/index.html",[1,2.447,2,2.477,34,0.055,62,1.514,69,2.501,73,0.033,74,0.042,75,0.033,76,1.31,77,3.062,78,1.31,79,1.514,80,2.066,81,2.066,82,2.066,83,1.759,84,2.477,85,2.477,86,2.477,87,2.477,88,2.477,89,2.152,90,2.152,91,2.152,92,2.152,93,2.152,94,2.152,95,1.862,96,2.152,97,2.152,98,2.657,99,2.066,100,2.066,148,1.759,161,0.847,356,2.657,387,2.64,388,2.477,389,2.477,436,2.477,706,2.477,707,3.101]],["title/modules.html",[78,1.497]],["body/modules.html",[34,0.049,73,0.042,74,0.049,75,0.042,77,2.269,78,1.69,89,1.953,106,3.106,125,1.953,387,2.269,708,4.661,709,4.661,710,4.934,711,4]],["title/routes.html",[148,2.01]],["body/routes.html",[34,0.05,73,0.044,74,0.05,75,0.044,148,2.379]]],"invertedIndex":[["",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"routes.html":{}}}],["0",{"_index":293,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["0.0",{"_index":488,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["0.1",{"_index":480,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["0.9.1",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["01d",{"_index":266,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["02d",{"_index":268,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["03d",{"_index":270,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["04d",{"_index":272,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["09d",{"_index":274,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["1",{"_index":496,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["1.9.0",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":457,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["10/10",{"_index":640,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":638,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":582,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["10d",{"_index":276,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["11d",{"_index":278,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["1200",{"_index":612,"title":{},"body":{"injectables/UIToastService.html":{}}}],["12px",{"_index":443,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["13d",{"_index":280,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["14",{"_index":462,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["2",{"_index":356,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["2.0.1",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["2.5.4",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["2.9.3",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":644,"title":{},"body":{"coverage.html":{}}}],["273.15",{"_index":543,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["3",{"_index":707,"title":{},"body":{"index.html":{}}}],["3.4.0",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":639,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":459,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["4.0.2",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["44/44",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":329,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["5.0.0",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["5.0.7",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["5.24.0",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":589,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["50d",{"_index":282,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["6",{"_index":460,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["6.5.1",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":645,"title":{},"body":{"coverage.html":{}}}],["7/7",{"_index":641,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":436,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"index.html":{}}}],["8.1.0",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["8.2.14",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["accuracy",{"_index":367,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["actual_component",{"_index":72,"title":{},"body":{"components/AppComponent.html":{}}}],["address",{"_index":316,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["address.slice(0",{"_index":355,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["addressobj",{"_index":317,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["android",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":392,"title":{},"body":{"modules/HomePageModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"injectables/RepositoryService.html":{}}}],["angular/core",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":394,"title":{},"body":{"modules/HomePageModule.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"dependencies.html":{}}}],["animation",{"_index":427,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["animationduration",{"_index":426,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["app",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["app.component",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":21,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":19,"title":{},"body":{"components/AppComponent.html":{}}}],["app/buisness",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["app/over",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["app/repository.service",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["app/temperature",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{}}}],["app/uiservice",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["app/uitoast.service",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"coverage.html":{},"index.html":{}}}],["appcomponent.ts",{"_index":32,"title":{},"body":{"components/AppComponent.html":{}}}],["appid",{"_index":704,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["application",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["appmodule",{"_index":77,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["approutingmodule",{"_index":89,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"index.html":{},"modules.html":{}}}],["approutingmodule,httpclientmodule",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["argument",{"_index":605,"title":{},"body":{"injectables/UIToastService.html":{}}}],["array",{"_index":412,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["assets/images/01d.png",{"_index":267,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/02d.png",{"_index":269,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/03d.png",{"_index":271,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/04d.png",{"_index":273,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/09d.png",{"_index":275,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/10d.png",{"_index":277,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/11d.png",{"_index":279,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/13d.png",{"_index":281,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/50d.png",{"_index":283,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/broken_clouds.png",{"_index":248,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/clear_sky.png",{"_index":240,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/cleat_sky_night.png",{"_index":261,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/few",{"_index":262,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/few_clouds.png",{"_index":244,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/mist.png",{"_index":256,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/rain.png",{"_index":252,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/rain_night.png",{"_index":264,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/scattered_clouds.png",{"_index":246,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/shower_rain.png",{"_index":251,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/snow.png",{"_index":254,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/thunderstorm.png",{"_index":258,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["async",{"_index":309,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["available",{"_index":711,"title":{},"body":{"modules.html":{}}}],["await",{"_index":337,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["backgroundcolor",{"_index":481,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bar",{"_index":450,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"dependencies.html":{}}}],["bar._model.x",{"_index":456,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bar._model.y",{"_index":458,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bar/ngx",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["beginatzero",{"_index":473,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["beginning",{"_index":41,"title":{},"body":{"components/AppComponent.html":{}}}],["bootstrap",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["bordercapstyle",{"_index":484,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bordercolor",{"_index":482,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["borderdash",{"_index":486,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["borderdashoffset",{"_index":487,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["borderjoinstyle",{"_index":489,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["borderwidth:'1",{"_index":491,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bottom",{"_index":442,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["break",{"_index":241,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["broken",{"_index":247,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["browse",{"_index":710,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browsermodule",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["buisness",{"_index":229,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["buisnesslogicservice",{"_index":90,"title":{"injectables/BuisnessLogicService.html":{}},"body":{"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{},"coverage.html":{},"index.html":{}}}],["butt",{"_index":485,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["buttons",{"_index":623,"title":{},"body":{"injectables/UIToastService.html":{}}}],["cancel",{"_index":632,"title":{},"body":{"injectables/UIToastService.html":{}}}],["canvas",{"_index":411,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["capacitor/android",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["capacitor/core",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["capacitor/ios",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["case",{"_index":237,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["catch((error",{"_index":344,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["celcius",{"_index":541,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["center",{"_index":440,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["characters",{"_index":699,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["chart",{"_index":410,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart(linecanvas.nativeelement",{"_index":422,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart.defaults.global.defaultfontfamily",{"_index":438,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart.defaults.global.defaultfontstyle",{"_index":437,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart.helpers.fontstring",{"_index":435,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart.js",{"_index":418,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"dependencies.html":{}}}],["chartinstance",{"_index":430,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chartinstance.controller.getdatasetmeta(i",{"_index":448,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chartinstance.ctx",{"_index":433,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["check",{"_index":617,"title":{},"body":{"injectables/UIToastService.html":{},"miscellaneous/enumerations.html":{}}}],["city",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"coverage.html":{}}}],["cityname",{"_index":517,"title":{},"body":{"injectables/RepositoryService.html":{},"injectables/UIToastService.html":{}}}],["class",{"_index":53,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["clear",{"_index":238,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["clearinterval(interval",{"_index":588,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["cleat",{"_index":259,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["click",{"_index":619,"title":{},"body":{"injectables/UIToastService.html":{}}}],["clicked",{"_index":630,"title":{},"body":{"injectables/UIToastService.html":{}}}],["close",{"_index":620,"title":{},"body":{"injectables/UIToastService.html":{}}}],["clouds",{"_index":243,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["clouds_night.png",{"_index":263,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["cluster_appmodule",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_bootstrap",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_declarations",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_homepagemodule",{"_index":388,"title":{},"body":{"modules/HomePageModule.html":{},"index.html":{}}}],["cluster_homepagemodule_declarations",{"_index":389,"title":{},"body":{"modules/HomePageModule.html":{},"index.html":{}}}],["color",{"_index":404,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["comma",{"_index":346,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["commonmodule",{"_index":391,"title":{},"body":{"modules/HomePageModule.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/HomePageModule.html":{},"coverage.html":{}}}],["component_template",{"_index":67,"title":{},"body":{"components/AppComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["configuration",{"_index":13,"title":{},"body":{"components/AppComponent.html":{}}}],["connection",{"_index":692,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["console.log('cancel",{"_index":633,"title":{},"body":{"injectables/UIToastService.html":{}}}],["console.log('favorite",{"_index":629,"title":{},"body":{"injectables/UIToastService.html":{}}}],["console.log(err",{"_index":530,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["console.log(this.mtemperatureconverterservice.kelvintocelcius(mheigh",{"_index":299,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["const",{"_index":149,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["constant",{"_index":568,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["constractor",{"_index":312,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["constructor",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["constructor(http",{"_index":510,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["constructor(loading",{"_index":551,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["constructor(mtemperatureconverterservice",{"_index":175,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["constructor(platform",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["constructor(private",{"_index":570,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["constructor(public",{"_index":232,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/RepositoryService.html":{},"injectables/UIToastService.html":{}}}],["constructor(toastcontroller",{"_index":597,"title":{},"body":{"injectables/UIToastService.html":{}}}],["continue",{"_index":566,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["convert",{"_index":177,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/TemperatureConverterService.html":{}}}],["converter",{"_index":542,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["converter.service",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{}}}],["converter.service.ts",{"_index":536,"title":{},"body":{"injectables/TemperatureConverterService.html":{},"coverage.html":{}}}],["converter.service.ts:22",{"_index":539,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["cordova",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["core",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":634,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":331,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/UIServiceServiceService.html":{}}}],["cssclass:\"toast",{"_index":613,"title":{},"body":{"injectables/UIToastService.html":{}}}],["ctx",{"_index":432,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["ctx.filltext(data",{"_index":455,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["ctx.font",{"_index":434,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["ctx.textalign",{"_index":439,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["ctx.textbaseline",{"_index":441,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["current",{"_index":515,"title":{},"body":{"injectables/RepositoryService.html":{},"miscellaneous/enumerations.html":{}}}],["d994b85acc1528b1a51fb0273b7ca7c4",{"_index":705,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["data",{"_index":451,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{}}}],["dataset",{"_index":446,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["dataset.data[index",{"_index":452,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["datasets",{"_index":478,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["date",{"_index":191,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["dates",{"_index":187,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["day",{"_index":194,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["days",{"_index":202,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/RepositoryService.html":{}}}],["dd",{"_index":183,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["declarations",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["declare",{"_index":225,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["default",{"_index":222,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/UIServiceServiceService.html":{}}}],["defined",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["dependencies",{"_index":79,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["dialog",{"_index":557,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["directive",{"_index":65,"title":{},"body":{"components/AppComponent.html":{}}}],["directives",{"_index":71,"title":{},"body":{"components/AppComponent.html":{}}}],["dismiss",{"_index":556,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["dismissloading",{"_index":549,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["display",{"_index":423,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["documentation",{"_index":635,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AppComponent.html":{}}}],["done",{"_index":631,"title":{},"body":{"injectables/UIToastService.html":{}}}],["drawonchartarea",{"_index":470,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["duration",{"_index":581,"title":{},"body":{"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["dynamic",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":292,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["element",{"_index":64,"title":{},"body":{"components/AppComponent.html":{}}}],["enable",{"_index":686,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enabled",{"_index":464,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["enableyourgps",{"_index":683,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enter",{"_index":697,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["entrycomponents",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":521,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["enum.enum",{"_index":523,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["enum.enum.ts",{"_index":681,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":679,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":529,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["err.statustext.tostring",{"_index":531,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["error",{"_index":345,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/RepositoryService.html":{},"miscellaneous/enumerations.html":{}}}],["export",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["exports",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["false",{"_index":424,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/UIServiceServiceService.html":{}}}],["favorite",{"_index":627,"title":{},"body":{"injectables/UIToastService.html":{}}}],["fetch",{"_index":226,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["few",{"_index":242,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["fff",{"_index":494,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{}}}],["fill",{"_index":416,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["five",{"_index":207,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/RepositoryService.html":{}}}],["forcast",{"_index":203,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["format",{"_index":185,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["formatdatefordateandmonth",{"_index":169,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["formatdatefordateandmonth(mdate",{"_index":180,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["formated",{"_index":190,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["formsmodule",{"_index":393,"title":{},"body":{"modules/HomePageModule.html":{}}}],["found",{"_index":616,"title":{},"body":{"injectables/UIToastService.html":{},"miscellaneous/enumerations.html":{}}}],["full",{"_index":153,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["function",{"_index":429,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["generateaddress",{"_index":308,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["generateaddress(addressobj",{"_index":314,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geo",{"_index":323,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["geoaccuracy",{"_index":358,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["geoaccuracy:number",{"_index":372,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["geoaddress",{"_index":306,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geoaddress:string",{"_index":335,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geocoder",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["geocoder.service",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["geocoder.service.ts",{"_index":305,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"coverage.html":{}}}],["geocoder.service.ts:19",{"_index":311,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geocoder.service.ts:26",{"_index":332,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geocoder.service.ts:32",{"_index":330,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geocoder.service.ts:41",{"_index":321,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geocoder.service.ts:64",{"_index":315,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geocoder/ngx",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["geolatitude",{"_index":359,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["geolocation",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"dependencies.html":{}}}],["geolongitude",{"_index":360,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["getcitynamegeocoderservice",{"_index":91,"title":{"injectables/GetCityNameGeocoderService.html":{}},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"coverage.html":{},"index.html":{}}}],["getdayofweek",{"_index":170,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getdayofweek(mdateinday",{"_index":192,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getfivedaysvalueinformat",{"_index":171,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getfivedaysvalueinformat(mdate",{"_index":197,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getfivedaysvalueinformat(mdate,mfivedaysvalue",{"_index":284,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getgeolocation",{"_index":310,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["getgeolocation():promise",{"_index":373,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["getgeolocation(latitude",{"_index":319,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["getgeolocation(latitude,longitude):promise",{"_index":336,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["gethigh",{"_index":289,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getlocationlatlon",{"_index":362,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["getlocationlatlonservice",{"_index":92,"title":{"injectables/GetLocationLatLonService.html":{}},"body":{"modules/AppModule.html":{},"injectables/GetLocationLatLonService.html":{},"coverage.html":{},"index.html":{}}}],["getnoofdays",{"_index":172,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getnoofdays(mfivedaysvalue",{"_index":209,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getting",{"_index":383,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["getweatherbannericonfromassetfolder",{"_index":173,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getweatherbannericonfromassetfolder(mweathertype",{"_index":212,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getweatherforcasticonfromassetfolder",{"_index":174,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getweatherforcasticonfromassetfolder(mweathertype",{"_index":219,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getweathervaluecurrent",{"_index":508,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluecurrent(params",{"_index":513,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluecurrent(params:string",{"_index":533,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluefivedays",{"_index":509,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluefivedays(params",{"_index":518,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluefivedays(params:string",{"_index":525,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["gps",{"_index":687,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["graph",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{},"modules.html":{}}}],["gridlines",{"_index":469,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["handler",{"_index":628,"title":{},"body":{"injectables/UIToastService.html":{}}}],["header",{"_index":618,"title":{},"body":{"injectables/UIToastService.html":{}}}],["highest",{"_index":694,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["home",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{}}}],["home.page",{"_index":395,"title":{},"body":{"modules/HomePageModule.html":{}}}],["homepage",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"modules/HomePageModule.html":{},"coverage.html":{},"index.html":{}}}],["homepage.ts",{"_index":231,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["homepagemodule",{"_index":387,"title":{"modules/HomePageModule.html":{}},"body":{"modules/HomePageModule.html":{},"index.html":{},"modules.html":{}}}],["hoover",{"_index":415,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["hover",{"_index":425,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["html",{"_index":63,"title":{},"body":{"components/AppComponent.html":{}}}],["htmlionloadingelement",{"_index":562,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["http",{"_index":506,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["http://api.openweathermap.org/data/2.5//weather?q",{"_index":703,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["http://api.openweathermap.org/data/2.5/forecast?q",{"_index":701,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["http://openweathermap.org/img/w",{"_index":223,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["httpclient",{"_index":511,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["httpclientmodule",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["icon",{"_index":214,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/UIToastService.html":{}}}],["identifier",{"_index":636,"title":{},"body":{"coverage.html":{}}}],["if(index!=5",{"_index":454,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["if(label==\"highest",{"_index":453,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["if(label==\"lowest",{"_index":461,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["if(obj[val].length",{"_index":353,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["ignore",{"_index":419,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/TemperatureConverterService.html":{}}}],["image",{"_index":216,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["import",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["import('./home/home.module').then",{"_index":155,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["imports",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"miscellaneous/enumerations.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["information",{"_index":334,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["initialize",{"_index":39,"title":{},"body":{"components/AppComponent.html":{}}}],["initializeapp",{"_index":24,"title":{},"body":{"components/AppComponent.html":{}}}],["inject",{"_index":164,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["injectable",{"_index":160,"title":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{}}}],["injectables",{"_index":161,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"index.html":{}}}],["interval",{"_index":584,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["ionic",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"dependencies.html":{}}}],["ionic/angular",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"dependencies.html":{}}}],["ionicmodule",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{}}}],["ionicmodule.forroot",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["ionicroutestrategy",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["issue",{"_index":601,"title":{},"body":{"injectables/UIToastService.html":{}}}],["js",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":205,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/RepositoryService.html":{}}}],["json.parse(mfivedaysvalue).list[j].main.temp_min",{"_index":294,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["json.stringify(error",{"_index":384,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["json.stringify(mvalue",{"_index":532,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["kelvin",{"_index":540,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["kelvintocelcius",{"_index":537,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["kelvintocelcius(params",{"_index":538,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["key",{"_index":349,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["label",{"_index":403,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["labels",{"_index":477,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["lap",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["lat",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetLocationLatLonService.html":{},"coverage.html":{}}}],["lat,lon",{"_index":365,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["latitude",{"_index":322,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["legend",{"_index":62,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"index.html":{}}}],["line",{"_index":476,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["linecanvas",{"_index":401,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["linechart",{"_index":409,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["linetension",{"_index":479,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["load",{"_index":576,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["load.present().then",{"_index":577,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["loadchildren",{"_index":154,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["loader",{"_index":546,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["loaderloading",{"_index":547,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["loading",{"_index":554,"title":{},"body":{"injectables/UIServiceServiceService.html":{},"miscellaneous/enumerations.html":{}}}],["loadingcontroller",{"_index":552,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["local",{"_index":218,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["location",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetLocationLatLonService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["locationnotfound",{"_index":693,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["log",{"_index":290,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic",{"_index":230,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["logic.service.ts",{"_index":163,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"coverage.html":{}}}],["logic.service.ts:100",{"_index":220,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:12",{"_index":176,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:155",{"_index":199,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:18",{"_index":221,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:213",{"_index":210,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:22",{"_index":224,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:227",{"_index":181,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:241",{"_index":193,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:29",{"_index":215,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["lon",{"_index":371,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["lon.service",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["lon.service.ts",{"_index":357,"title":{},"body":{"injectables/GetLocationLatLonService.html":{},"coverage.html":{}}}],["lon.service.ts:19",{"_index":368,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["lon.service.ts:23",{"_index":369,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["lon.service.ts:27",{"_index":361,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["lon.service.ts:37",{"_index":370,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["lon.service.ts:45",{"_index":363,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["longitude",{"_index":320,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["lowest",{"_index":695,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["m",{"_index":156,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["m.homepagemodule",{"_index":157,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["maintainaspectratio",{"_index":466,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["matching",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"routes.html":{}}}],["max",{"_index":475,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["maxresults",{"_index":328,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["mdate",{"_index":186,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["mdateinday",{"_index":196,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mdatetemp",{"_index":402,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["mdatetempmax",{"_index":285,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mdatetempmax.push(math.floor(this.mtemperatureconverterservice.kelvintocelcius(mheigh",{"_index":296,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mdatetempmin",{"_index":286,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mdatetempmin.push(math.floor(this.mtemperatureconverterservice.kelvintocelcius(mlow",{"_index":297,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["menu",{"_index":61,"title":{},"body":{"components/AppComponent.html":{}}}],["message",{"_index":560,"title":{},"body":{"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["meta",{"_index":447,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["meta.data.foreach(function",{"_index":449,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["metadata",{"_index":14,"title":{},"body":{"components/AppComponent.html":{}}}],["methods",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["mfivedaysvalue",{"_index":198,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mfivedaysweathericon",{"_index":287,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mfivedaysweathericon.push(mweathericon",{"_index":298,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["min",{"_index":474,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["minimum",{"_index":417,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["minumun",{"_index":413,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["miscellaneous",{"_index":678,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["mist",{"_index":255,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mloading",{"_index":548,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["mlow",{"_index":295,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mm",{"_index":189,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mmessage",{"_index":606,"title":{},"body":{"injectables/UIToastService.html":{}}}],["module",{"_index":76,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["modules",{"_index":78,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"index.html":{},"modules.html":{}}}],["month",{"_index":184,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["more",{"_index":698,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["morethan",{"_index":200,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mstringvalueenum",{"_index":507,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["mtemperatureconverterservice",{"_index":167,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mtemperatureconverterservice:temperatureconverterservice",{"_index":233,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mvalue=await",{"_index":526,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["mweathertype",{"_index":217,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["name",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{}}}],["native/core",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["native/geolocation",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["native/geolocation/ngx",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["native/native",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"dependencies.html":{}}}],["native/splash",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["native/status",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["nativegeocoder",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"dependencies.html":{}}}],["nativegeocoderoptions",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["nativegeocoderresult",{"_index":333,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["network",{"_index":600,"title":{},"body":{"injectables/UIToastService.html":{},"miscellaneous/enumerations.html":{}}}],["new",{"_index":421,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["ngmodule",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{}}}],["night",{"_index":260,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["notfound",{"_index":690,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["nstace",{"_index":564,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["null",{"_index":587,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["number",{"_index":366,"title":{},"body":{"injectables/GetLocationLatLonService.html":{},"injectables/TemperatureConverterService.html":{}}}],["obj",{"_index":348,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["obj.push(addressobj[key",{"_index":350,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["obj.reverse",{"_index":351,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["obj[val",{"_index":354,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["object",{"_index":318,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{}}}],["occurance",{"_index":211,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["oncomplete",{"_index":428,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["one",{"_index":201,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["option",{"_index":608,"title":{},"body":{"injectables/UIToastService.html":{}}}],["optional",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["options",{"_index":307,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["out",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["overlapgraphforweatherpredictionservice",{"_index":93,"title":{"injectables/OverLapGraphForWeatherPredictionService.html":{}},"body":{"modules/AppModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{},"index.html":{}}}],["overview",{"_index":706,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":648,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["parameters",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["params",{"_index":516,"title":{},"body":{"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{}}}],["path",{"_index":150,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"modules/HomePageModule.html":{}}}],["pathmatch",{"_index":152,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["platform",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["please",{"_index":579,"title":{},"body":{"injectables/UIServiceServiceService.html":{},"miscellaneous/enumerations.html":{}}}],["pleasechecknetworkconnection",{"_index":691,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pleaseentermorethantwocharacters",{"_index":696,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["plugin",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["pointbackgroundcolor",{"_index":493,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointbordercolor",{"_index":492,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointborderwidth",{"_index":495,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhitradius",{"_index":503,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhoverbackgroundcolor",{"_index":498,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhoverbordercolor",{"_index":499,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhoverborderwidth",{"_index":501,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhoverradius",{"_index":497,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointradius",{"_index":502,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["position",{"_index":621,"title":{},"body":{"injectables/UIToastService.html":{}}}],["prediction.service",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["prediction.service.ts",{"_index":398,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["prediction.service.ts:30",{"_index":407,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["preloadallmodules",{"_index":146,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["preloadingstrategy",{"_index":159,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["presenttoast",{"_index":594,"title":{},"body":{"injectables/UIToastService.html":{}}}],["presenttoastwithargumentmessage",{"_index":595,"title":{},"body":{"injectables/UIToastService.html":{}}}],["presenttoastwithargumentmessage(mmessage",{"_index":603,"title":{},"body":{"injectables/UIToastService.html":{}}}],["presenttoastwithargumentmessage(mmessage:string",{"_index":610,"title":{},"body":{"injectables/UIToastService.html":{}}}],["presenttoastwithoptions",{"_index":596,"title":{},"body":{"injectables/UIToastService.html":{}}}],["private",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/UIServiceServiceService.html":{}}}],["problem",{"_index":684,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["promise",{"_index":324,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["properties",{"_index":165,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["provide",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["providedin",{"_index":228,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["providers",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["public",{"_index":166,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIToastService.html":{}}}],["rain",{"_index":250,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["redirectto",{"_index":151,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["render",{"_index":208,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["repositoryservice",{"_index":94,"title":{"injectables/RepositoryService.html":{}},"body":{"modules/AppModule.html":{},"injectables/RepositoryService.html":{},"coverage.html":{},"index.html":{}}}],["reset",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["resp.coords.accuracy",{"_index":382,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["resp.coords.latitude",{"_index":378,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["resp.coords.longitude",{"_index":380,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["responsive",{"_index":465,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["result",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"routes.html":{}}}],["result[0].countrycode",{"_index":343,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["result[0].locality",{"_index":342,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["results",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"routes.html":{}}}],["retry",{"_index":685,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["return",{"_index":182,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{}}}],["returns",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["rgba(220,220,220,1",{"_index":500,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["rgba(75,192,192,1",{"_index":483,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["role",{"_index":590,"title":{},"body":{"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["root",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["root'},{'name",{"_index":68,"title":{},"body":{"components/AppComponent.html":{}}}],["round",{"_index":490,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["routereusestrategy",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["routermodule",{"_index":147,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{}}}],["routermodule.forchild",{"_index":396,"title":{},"body":{"modules/HomePageModule.html":{}}}],["routermodule.forroot(routes",{"_index":158,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":148,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"index.html":{},"routes.html":{}}}],["routing.module",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":145,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["run",{"_index":313,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["rxjs",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["saperated",{"_index":347,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["scales",{"_index":467,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["scattered",{"_index":245,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["screen",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["screen/ngx",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["selector",{"_index":16,"title":{},"body":{"components/AppComponent.html":{}}}],["server",{"_index":227,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["service",{"_index":179,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["service.service",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["service.service.ts",{"_index":545,"title":{},"body":{"injectables/UIServiceServiceService.html":{},"coverage.html":{}}}],["service.service.ts:13",{"_index":553,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["service.service.ts:24",{"_index":563,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["service.service.ts:29",{"_index":565,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["service.service.ts:35",{"_index":567,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["service.service.ts:41",{"_index":559,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["service.service.ts:60",{"_index":555,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["setinterval",{"_index":585,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["show",{"_index":408,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/UIServiceServiceService.html":{}}}],["showbackdrop",{"_index":573,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["shower",{"_index":249,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["showgrapg",{"_index":399,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["showgrapg(linechart",{"_index":400,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["showgrapg(linechart,linecanvas,mdate,mdatetemp,label,color,yaxismin,yaxismax",{"_index":420,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["showloading",{"_index":550,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["showloading(message",{"_index":558,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["side",{"_index":624,"title":{},"body":{"injectables/UIToastService.html":{}}}],["sky",{"_index":239,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["snow",{"_index":253,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["spangaps",{"_index":504,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["splashscreen",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["src/.../string",{"_index":680,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/app",{"_index":144,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:17",{"_index":31,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:35",{"_index":38,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/buisness",{"_index":162,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"coverage.html":{}}}],["src/app/get",{"_index":304,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"coverage.html":{}}}],["src/app/home/home.module.ts",{"_index":390,"title":{},"body":{"modules/HomePageModule.html":{}}}],["src/app/home/home.page.ts",{"_index":642,"title":{},"body":{"coverage.html":{}}}],["src/app/over",{"_index":397,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["src/app/repository.service.ts",{"_index":505,"title":{},"body":{"injectables/RepositoryService.html":{},"coverage.html":{}}}],["src/app/repository.service.ts:18",{"_index":512,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["src/app/repository.service.ts:24",{"_index":520,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["src/app/repository.service.ts:34",{"_index":519,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["src/app/repository.service.ts:52",{"_index":514,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["src/app/string",{"_index":682,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/temperature",{"_index":535,"title":{},"body":{"injectables/TemperatureConverterService.html":{},"coverage.html":{}}}],["src/app/uiservice",{"_index":544,"title":{},"body":{"injectables/UIServiceServiceService.html":{},"coverage.html":{}}}],["src/app/uitoast.service.ts",{"_index":592,"title":{},"body":{"injectables/UIToastService.html":{},"coverage.html":{}}}],["src/app/uitoast.service.ts:14",{"_index":598,"title":{},"body":{"injectables/UIToastService.html":{}}}],["src/app/uitoast.service.ts:21",{"_index":609,"title":{},"body":{"injectables/UIToastService.html":{}}}],["src/app/uitoast.service.ts:27",{"_index":604,"title":{},"body":{"injectables/UIToastService.html":{}}}],["src/app/uitoast.service.ts:40",{"_index":599,"title":{},"body":{"injectables/UIToastService.html":{}}}],["src/app/uitoast.service.ts:52",{"_index":607,"title":{},"body":{"injectables/UIToastService.html":{}}}],["star",{"_index":625,"title":{},"body":{"injectables/UIToastService.html":{}}}],["start",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"injectables/UIToastService.html":{}}}],["statements",{"_index":637,"title":{},"body":{"coverage.html":{}}}],["statusbar",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["store",{"_index":325,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["string",{"_index":213,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["string,icon:string",{"_index":235,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["stringvalueenum",{"_index":522,"title":{},"body":{"injectables/RepositoryService.html":{},"miscellaneous/enumerations.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AppComponent.html":{}}}],["styleurls",{"_index":18,"title":{},"body":{"components/AppComponent.html":{}}}],["supplies",{"_index":12,"title":{},"body":{"components/AppComponent.html":{}}}],["support",{"_index":708,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":709,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":236,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["table",{"_index":647,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":646,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":364,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["temp",{"_index":291,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["temperature",{"_index":178,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/TemperatureConverterService.html":{}}}],["temperatureconverterservice",{"_index":95,"title":{"injectables/TemperatureConverterService.html":{}},"body":{"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/TemperatureConverterService.html":{},"coverage.html":{},"index.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{}}}],["templateurl",{"_index":20,"title":{},"body":{"components/AppComponent.html":{}}}],["temprature",{"_index":414,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["text",{"_index":626,"title":{},"body":{"injectables/UIToastService.html":{}}}],["then((result",{"_index":340,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["then(load",{"_index":574,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.chart",{"_index":431,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["this.data.datasets.foreach(function",{"_index":445,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["this.geoaccuracy",{"_index":381,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.geoaddress",{"_index":341,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["this.geolatitude",{"_index":377,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.geolatitude).tostring",{"_index":385,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.geolocation.getcurrentposition().then((resp",{"_index":376,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.geolongitude",{"_index":379,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.geolongitude).tostring",{"_index":386,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.http.get",{"_index":527,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["this.http.get(this.mstringvalueenum.urlcurrent+params+'&appid='+this.mstringvalueenum.appid).topromise().then(data",{"_index":534,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["this.initializeapp",{"_index":56,"title":{},"body":{"components/AppComponent.html":{}}}],["this.loader",{"_index":575,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.loader.dismiss().then",{"_index":586,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.loaderloading",{"_index":571,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.loading.create",{"_index":572,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.mloading",{"_index":578,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.mloading.ondiddismiss",{"_index":591,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.mloading.present",{"_index":583,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.mstringvalueenum.urlforcast+params+'&appid='+this.mstringvalueenum.appid).topromise().then(data",{"_index":528,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["this.mstringvalueenum=stringvalueenum",{"_index":524,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["this.mtemperatureconverterservice.kelvintocelcius(mlow",{"_index":300,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["this.nativegeocoder.reversegeocode(latitude",{"_index":338,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["this.options",{"_index":339,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["this.platform.is('android",{"_index":374,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.platform.is('ios",{"_index":375,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.platform.ready().then",{"_index":57,"title":{},"body":{"components/AppComponent.html":{}}}],["this.splashscreen.hide",{"_index":59,"title":{},"body":{"components/AppComponent.html":{}}}],["this.statusbar.styledefault",{"_index":58,"title":{},"body":{"components/AppComponent.html":{}}}],["this.toastcontroller.create",{"_index":611,"title":{},"body":{"injectables/UIToastService.html":{}}}],["this.url+icon+\".png",{"_index":265,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["thunderstorm",{"_index":257,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["ticks",{"_index":471,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["toast",{"_index":602,"title":{},"body":{"injectables/UIToastService.html":{}}}],["toast.present",{"_index":615,"title":{},"body":{"injectables/UIToastService.html":{}}}],["toastcontroller",{"_index":593,"title":{},"body":{"injectables/UIToastService.html":{}}}],["tooltips",{"_index":463,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["top",{"_index":622,"title":{},"body":{"injectables/UIToastService.html":{}}}],["totlreturn",{"_index":288,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["totlreturn.push(mdatetempmax",{"_index":301,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["totlreturn.push(mdatetempmin",{"_index":302,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["totlreturn.push(mfivedaysweathericon",{"_index":303,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AppComponent.html":{}}}],["true",{"_index":327,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/UIServiceServiceService.html":{}}}],["tslib",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{}}}],["ui",{"_index":561,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["uiloading",{"_index":569,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["uiserviceserviceservice",{"_index":96,"title":{"injectables/UIServiceServiceService.html":{}},"body":{"modules/AppModule.html":{},"injectables/UIServiceServiceService.html":{},"coverage.html":{},"index.html":{}}}],["uitoastservice",{"_index":97,"title":{"injectables/UIToastService.html":{}},"body":{"modules/AppModule.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"index.html":{}}}],["unknown",{"_index":689,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unknownerror",{"_index":688,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["url",{"_index":168,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/RepositoryService.html":{}}}],["url:string=\"http://openweathermap.org/img/w",{"_index":234,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["urlcurrent",{"_index":702,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["urlforcast",{"_index":700,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["useclass",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["uselocale",{"_index":326,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["val",{"_index":352,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["value",{"_index":206,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"miscellaneous/enumerations.html":{}}}],["var",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{}}}],["verdana",{"_index":444,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["void",{"_index":43,"title":{},"body":{"components/AppComponent.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["wait",{"_index":580,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["weather",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["week",{"_index":195,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["width",{"_index":614,"title":{},"body":{"injectables/UIToastService.html":{}}}],["xaxes",{"_index":468,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["yaxes",{"_index":472,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["yaxismax",{"_index":406,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["yaxismin",{"_index":405,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["yyyu",{"_index":204,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["yyyy",{"_index":188,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["zone.js",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        Supplies configuration metadata for an App component.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                app.component.scss\n            \n\n\n\n            \n                templateUrl\n                app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                initializeApp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(platform: Platform, splashScreen: SplashScreen, statusBar: StatusBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor of AppComponent.ts\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        platform\n                                                  \n                                                        \n                                                                    Platform\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        splashScreen\n                                                  \n                                                        \n                                                                    SplashScreen\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusBar\n                                                  \n                                                        \n                                                                    StatusBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            initializeApp\n                        \n                        \n                    \n                \n            \n            \n                \ninitializeApp()\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:35\n                \n            \n\n\n            \n                \n                    Initialize Application at beginning\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\nimport { Platform } from '@ionic/angular';\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\n/**\n * Supplies configuration metadata for an App component.\n*/\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss']\n})\n/**\n * Components of platform, splashScreen, statusBar\n*/\nexport class AppComponent {\n/**\n * Constructor of AppComponent.ts\n * @constructor for App Component\n * @param {Platform} platform\n * @param {SplashScreen} splashScreen\n * @param {StatusBar} statusBar\n*/\n  constructor(\n    private platform: Platform,\n    private splashScreen: SplashScreen,\n    private statusBar: StatusBar\n  ) {\n    this.initializeApp();\n  }\n/**\n * Initialize Application at beginning\n*/\n  initializeApp() {\n    this.platform.ready().then(() => {\n      this.statusBar.styleDefault();\n      this.splashScreen.hide();\n    });\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        Start Menu\n      \n    \n    \n      \n        \n      \n    \n  \n  \n\n\n    \n\n    \n                \n                    app.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Start Menu                                          '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'HomePage', 'selector': 'app-home'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nBuisnessLogicService\n\nBuisnessLogicService\n\nAppModule -->\n\nBuisnessLogicService->AppModule\n\n\n\n\n\nGetCityNameGeocoderService\n\nGetCityNameGeocoderService\n\nAppModule -->\n\nGetCityNameGeocoderService->AppModule\n\n\n\n\n\nGetLocationLatLonService\n\nGetLocationLatLonService\n\nAppModule -->\n\nGetLocationLatLonService->AppModule\n\n\n\n\n\nOverLapGraphForWeatherPredictionService\n\nOverLapGraphForWeatherPredictionService\n\nAppModule -->\n\nOverLapGraphForWeatherPredictionService->AppModule\n\n\n\n\n\nRepositoryService\n\nRepositoryService\n\nAppModule -->\n\nRepositoryService->AppModule\n\n\n\n\n\nTemperatureConverterService\n\nTemperatureConverterService\n\nAppModule -->\n\nTemperatureConverterService->AppModule\n\n\n\n\n\nUIServiceServiceService\n\nUIServiceServiceService\n\nAppModule -->\n\nUIServiceServiceService->AppModule\n\n\n\n\n\nUIToastService\n\nUIToastService\n\nAppModule -->\n\nUIToastService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            BuisnessLogicService\n                        \n                        \n                            GetCityNameGeocoderService\n                        \n                        \n                            GetLocationLatLonService\n                        \n                        \n                            OverLapGraphForWeatherPredictionService\n                        \n                        \n                            RepositoryService\n                        \n                        \n                            TemperatureConverterService\n                        \n                        \n                            UIServiceServiceService\n                        \n                        \n                            UIToastService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\n\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { RepositoryService } from '../app/repository.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BuisnessLogicService } from '../app/buisness-logic.service';\nimport { UIServiceServiceService } from '../app/uiservice-service.service';\nimport { UIToastService } from '../app/uitoast.service';\nimport { TemperatureConverterService } from '../app/temperature-converter.service';\nimport { OverLapGraphForWeatherPredictionService } from '../app/over-lap-graph-for-weather-prediction.service';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { NativeGeocoder, NativeGeocoderOptions } from '@ionic-native/native-geocoder/ngx';\nimport { GetLocationLatLonService } from './get-location-lat-lon.service';\nimport { GetCityNameGeocoderService } from './get-city-name-geocoder.service';\nimport { Platform } from '@ionic/angular';\n\n@NgModule({\n  declarations: [AppComponent],\n  entryComponents: [],\n  imports: [BrowserModule, IonicModule.forRoot(), AppRoutingModule,HttpClientModule],\n  providers: [\n    StatusBar,\n    Platform,\n    SplashScreen,\n    Geolocation,\n    NativeGeocoder,    \n    RepositoryService,\n    UIServiceServiceService,\n    UIToastService,\n    BuisnessLogicService,\n    TemperatureConverterService,\n    GetLocationLatLonService,\n    GetCityNameGeocoderService,\n    OverLapGraphForWeatherPredictionService,\n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'home', pathMatch: 'full' },\n  { path: 'home', loadChildren: () => \"import('./home/home.module').then( m => m.HomePageModule)\"},\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BuisnessLogicService.html":{"url":"injectables/BuisnessLogicService.html","title":"injectable - BuisnessLogicService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  BuisnessLogicService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/buisness-logic.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                mTemperatureConverterService\n                            \n                            \n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                formatDateForDateAndMonth\n                            \n                            \n                                    Public\n                                getDayOfWeek\n                            \n                            \n                                    Public\n                                getFiveDaysValueInFormat\n                            \n                            \n                                    Public\n                                getNoOfDays\n                            \n                            \n                                    Public\n                                getWeatherBannerIconFromAssetFolder\n                            \n                            \n                                    Public\n                                getWeatherForcastIconFromAssetFolder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mTemperatureConverterService: TemperatureConverterService)\n                    \n                \n                        \n                            \n                                Defined in src/app/buisness-logic.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor of BuisnessLogicService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        mTemperatureConverterService\n                                                  \n                                                        \n                                                                        TemperatureConverterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Convert Temperature Service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            formatDateForDateAndMonth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    formatDateForDateAndMonth(mDate)\n                \n            \n\n\n            \n                \n                    Defined in src/app/buisness-logic.service.ts:227\n                \n            \n\n\n            \n                \n                    Return as 'DD Month Name' format \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mDate\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Dates in YYYY-MM-DD format\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        Formated date and month\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDayOfWeek\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDayOfWeek(mDateinDay)\n                \n            \n\n\n            \n                \n                    Defined in src/app/buisness-logic.service.ts:241\n                \n            \n\n\n            \n                \n                    Return Day of Week\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mDateinDay\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        Day of Week\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getFiveDaysValueInFormat\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFiveDaysValueInFormat(mDate, mFiveDaysValue)\n                \n            \n\n\n            \n                \n                    Defined in src/app/buisness-logic.service.ts:155\n                \n            \n\n\n            \n                \n                    Get morethan one days forcast\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mDate\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Days in YYYU-MM-DD format\n\n                                    \n                                \n                                \n                                    mFiveDaysValue\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Json value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        Get Five days value to render graph\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getNoOfDays\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNoOfDays(mFiveDaysValue)\n                \n            \n\n\n            \n                \n                    Defined in src/app/buisness-logic.service.ts:213\n                \n            \n\n\n            \n                \n                    Get Occurance of date\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mFiveDaysValue\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Json value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        Occurance of date\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getWeatherBannerIconFromAssetFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeatherBannerIconFromAssetFolder(mWeatherType: string, icon: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/buisness-logic.service.ts:29\n                \n            \n\n\n            \n                \n                    Get image path from weather description string \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mWeatherType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String\n\n                                    \n                                \n                                \n                                    icon\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Image local path or image URL path\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getWeatherForcastIconFromAssetFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeatherForcastIconFromAssetFolder(mWeatherType: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/buisness-logic.service.ts:100\n                \n            \n\n\n            \n                \n                    Get image path from weather description string \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mWeatherType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Image local path \n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            mTemperatureConverterService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TemperatureConverterService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/buisness-logic.service.ts:18\n                            \n                        \n\n                \n                    \n                        Convert Temperature Service\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            url\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"http://openweathermap.org/img/w/\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/buisness-logic.service.ts:22\n                            \n                        \n\n                \n                    \n                        Declare url for image fetch from server\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { TemperatureConverterService } from '../app/temperature-converter.service';\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Buisness Logic for HomePage.ts\n*/\nexport class BuisnessLogicService {\n\n /**\n * Constructor of BuisnessLogicService\n * @param {TemperatureConverterService} mTemperatureConverterService Convert Temperature Service\n */\n  constructor(public mTemperatureConverterService:TemperatureConverterService) { }\n/**\n * Declare url for image fetch from server\n */\n  url:string=\"http://openweathermap.org/img/w/\";\n  /**\n  * Get image path from weather description string \n  * @param mWeatherType String\n  * @param icon\n  * @returns Image local path or image URL path\n  */\n  public getWeatherBannerIconFromAssetFolder(mWeatherType: string,icon:string): string {\n\n    switch (mWeatherType) {\n      case \"clear sky\": {\n        return \"../../assets/images/clear_sky.png\";\n        break;\n      }\n\n      case \"few clouds\": {\n        return \"../../assets/images/few_clouds.png\";\n        break;\n      }\n\n      case \"scattered clouds\": {\n        return \"../../assets/images/scattered_clouds.png\";\n        break;\n      }\n\n      case \"broken clouds\": {\n        return \"../../assets/images/broken_clouds.png\";\n        break;\n      }\n      case \"shower rain\": {\n        return \"../../assets/images/shower_rain.png\";\n        break;\n      }\n      case \"rain\": {\n        return \"../../assets/images/rain.png\";\n        break;\n      }\n      case \"snow\": {\n        return \"../../assets/images/snow.png\";\n        break;\n      }\n\n      case \"mist\": {\n        return \"../../assets/images/mist.png\";\n        break;\n      }\n      case \"thunderstorm\": {\n        return \"../../assets/images/thunderstorm.png\";\n        break;\n      }\n      case \"cleat sky night\": {\n        return \"../../assets/images/cleat_sky_night.png\";\n        break;\n      }\n      case \"few clouds night\": {\n        return \"../../assets/images/few-Clouds_night.png\";\n        break;\n      }\n      case \"rain night\": {\n        return \"../../assets/images/rain_night.png\";\n        break;\n      }\n\n\n      default: {\n        return this.url+icon+\".png\";\n        break;\n      }\n    }\n\n  }\n\n\n   /**\n  * Get image path from weather description string \n  * @param mWeatherType \n  * @returns Image local path \n  */\n public getWeatherForcastIconFromAssetFolder(mWeatherType: string): string {\n\n  switch (mWeatherType) {\n   \n    case \"01d\": {\n      return \"../../assets/images/01d.png\";\n      break;\n    }\n\n    case \"02d\": {\n      return \"../../assets/images/02d.png\";\n      break;\n    }\n    case \"03d\": {\n      return \"../../assets/images/03d.png\";\n      break;\n    }\n\n    case \"04d\": {\n      return \"../../assets/images/04d.png\";\n      break;\n    }\n    case \"09d\": {\n      return \"../../assets/images/09d.png\";\n      break;\n    }\n    case \"10d\": {\n      return \"../../assets/images/10d.png\";\n      break;\n    }\n    case \"11d\": {\n      return \"../../assets/images/11d.png\";\n      break;\n    }\n    case \"13d\": {\n      return \"../../assets/images/13d.png\";\n      break;\n    }\n    case \"50d\": {\n      return \"../../assets/images/50d.png\";\n      break;\n    }\n    default: {\n      return \"../../assets/images/01d.png\";\n      break;\n    }\n  }\n\n}\n/**\n * Get morethan one days forcast\n * @param mDate Days in YYYU-MM-DD format\n * @param mFiveDaysValue Json value\n * @returns Get Five days value to render graph\n */\npublic getFiveDaysValueInFormat(mDate,mFiveDaysValue){\n  var mDateTempMax = [];\n  var mDateTempMin = [];\n  var mFiveDaysWeatherIcon=[];\n\n  var totlReturn=[];\n        /////// getHigh Log Temp Of Each Day /////\n        for (let i = 0; i  JSON.parse(mFiveDaysValue).list[j].main.temp_min) {\n                  mLow = JSON.parse(mFiveDaysValue).list[j].main.temp_min;\n                }\n              }\n\n            }\n\n          }\n\n          mDateTempMax.push(Math.floor(this.mTemperatureConverterService.kelvinToCelcius(mHeigh)));\n          mDateTempMin.push(Math.floor(this.mTemperatureConverterService.kelvinToCelcius(mLow)));\n          mFiveDaysWeatherIcon.push(mWeatherIcon);\n\n          // console.log(this.mTemperatureConverterService.kelvinToCelcius(mHeigh)\n          //   + \"     \" + this.mTemperatureConverterService.kelvinToCelcius(mLow));\n\n\n        }\n\n        totlReturn.push(mDateTempMax);\n        totlReturn.push(mDateTempMin);\n        totlReturn.push(mFiveDaysWeatherIcon);\n\n        return totlReturn;\n}\n/**\n * Get Occurance of date\n * @param mFiveDaysValue Json value\n *  @returns Occurance of date\n */\npublic getNoOfDays(mFiveDaysValue){\n  var mDate = [];\n  for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetCityNameGeocoderService.html":{"url":"injectables/GetCityNameGeocoderService.html","title":"injectable - GetCityNameGeocoderService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GetCityNameGeocoderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/get-city-name-geocoder.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                geoAddress\n                            \n                            \n                                options\n                            \n                            \n                                    Public\n                                platform\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                generateAddress\n                            \n                            \n                                    Async\n                                getGeolocation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(platform: Platform, geolocation: Geolocation, nativeGeocoder: NativeGeocoder)\n                    \n                \n                        \n                            \n                                Defined in src/app/get-city-name-geocoder.service.ts:19\n                            \n                        \n\n                \n                    \n                            Constractor of GetCityNameGeocoderService Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        platform\n                                                  \n                                                        \n                                                                    Platform\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                To get platform application run on\n\n                                                        \n                                                \n                                                \n                                                        geolocation\n                                                  \n                                                        \n                                                                    Geolocation\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Geolocation service\n\n                                                        \n                                                \n                                                \n                                                        nativeGeocoder\n                                                  \n                                                        \n                                                                    NativeGeocoder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                NativeGeocoder service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            generateAddress\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateAddress(addressObj)\n                \n            \n\n\n            \n                \n                    Defined in src/app/get-city-name-geocoder.service.ts:64\n                \n            \n\n\n            \n                \n                    Return Address\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    addressObj\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Json Object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getGeolocation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getGeolocation(latitude, longitude)\n                \n            \n\n\n            \n                \n                    Defined in src/app/get-city-name-geocoder.service.ts:41\n                \n            \n\n\n            \n                \n                    Get Address\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    latitude\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geo latitude\n\n                                    \n                                \n                                \n                                    longitude\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geo longitude\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            geoAddress\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-city-name-geocoder.service.ts:19\n                            \n                        \n\n                \n                    \n                        Store address\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     NativeGeocoderOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n      useLocale: true,\n      maxResults: 5\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-city-name-geocoder.service.ts:32\n                            \n                        \n\n                \n                    \n                        Create NativeGeocoderOptions \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            platform\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Platform\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-city-name-geocoder.service.ts:26\n                            \n                        \n\n                \n                    \n                        To get platform application run on\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { NativeGeocoder, NativeGeocoderResult, NativeGeocoderOptions } from '@ionic-native/native-geocoder/ngx';\n\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service for Get City information\n*/\nexport class GetCityNameGeocoderService {\n/**\n * Store address\n */\n  geoAddress:string;\n/**\n * Constractor of GetCityNameGeocoderService Service\n * @param platform To get platform application run on\n * @param geolocation Geolocation service\n * @param nativeGeocoder NativeGeocoder service\n */\n  constructor(public platform: Platform,\n    private geolocation: Geolocation,\n    private nativeGeocoder: NativeGeocoder) { }\n/**\n * Create NativeGeocoderOptions \n */\n    options: NativeGeocoderOptions = {\n      useLocale: true,\n      maxResults: 5\n    };\n/**\n * Get Address\n * @param latitude Geo latitude\n * @param longitude Geo longitude\n */\n    async getGeolocation(latitude,longitude):Promise {     \n   \n        await this.nativeGeocoder.reverseGeocode(latitude, longitude, this.options)\n        .then((result: NativeGeocoderResult[]) => {\n          this.geoAddress = result[0].locality+','+\n          result[0].countryCode;         \n        })\n        .catch((error: any) => {\n          this.geoAddress ='Error'; \n        });\n    \n\n  \n         return this.geoAddress;\n        \n      }\n\n\n  /**\n   * Return Address\n   * @param addressObj Json Object\n   */\n  //Return Comma saperated address\n  public generateAddress(addressObj){\n    let obj = [];\n    let address = \"\";\n    for (let key in addressObj) {\n      obj.push(addressObj[key]);\n    }\n    obj.reverse();\n    for (let val in obj) {\n      if(obj[val].length)\n      address += val+' '+obj[val]+', ';\n    }\n  return address.slice(0, -2);\n}\n        \n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetLocationLatLonService.html":{"url":"injectables/GetLocationLatLonService.html","title":"injectable - GetLocationLatLonService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GetLocationLatLonService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/get-location-lat-lon.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                geoAccuracy\n                            \n                            \n                                geoLatitude\n                            \n                            \n                                geoLongitude\n                            \n                            \n                                    Public\n                                platform\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getGeolocation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(platform: Platform, geolocation: Geolocation, nativeGeocoder: NativeGeocoder)\n                    \n                \n                        \n                            \n                                Defined in src/app/get-location-lat-lon.service.ts:27\n                            \n                        \n\n                \n                    \n                            Constractor of GetLocationLatLon Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        platform\n                                                  \n                                                        \n                                                                    Platform\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                To get platform application run on\n\n                                                        \n                                                \n                                                \n                                                        geolocation\n                                                  \n                                                        \n                                                                    Geolocation\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Geolocation service\n\n                                                        \n                                                \n                                                \n                                                        nativeGeocoder\n                                                  \n                                                        \n                                                                    NativeGeocoder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                NativeGeocoder service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getGeolocation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getGeolocation()\n                \n            \n\n\n            \n                \n                    Defined in src/app/get-location-lat-lon.service.ts:45\n                \n            \n\n\n            \n                \n                    Async task for get platform and get lat,lon\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            geoAccuracy\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-location-lat-lon.service.ts:27\n                            \n                        \n\n                \n                    \n                        Geo accuracy\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            geoLatitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-location-lat-lon.service.ts:19\n                            \n                        \n\n                \n                    \n                        Geo latitude\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            geoLongitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-location-lat-lon.service.ts:23\n                            \n                        \n\n                \n                    \n                        Geo longitude\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            platform\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Platform\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-location-lat-lon.service.ts:37\n                            \n                        \n\n                \n                    \n                        To get platform application run on\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { NativeGeocoder, NativeGeocoderResult, NativeGeocoderOptions } from '@ionic-native/native-geocoder/ngx';\n\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service for Get Lat and Lon\n*/\nexport class GetLocationLatLonService {\n  /**\n   * Geo latitude\n   */\n  geoLatitude: number;\n  /**\n   * Geo longitude\n   */\n  geoLongitude: number;\n  /**\n   * Geo accuracy\n   */\n  geoAccuracy:number;\n\n  /**\n   * Constractor of GetLocationLatLon Service\n   * @constructor GetLocationLatLonService\n   * @param platform To get platform application run on\n   * @param geolocation Geolocation service\n   * @param nativeGeocoder NativeGeocoder service\n   */\n\n  constructor(public platform: Platform,\n    private geolocation: Geolocation,\n    private nativeGeocoder: NativeGeocoder) { }\n\n    /**\n     * Async task for get platform and get lat,lon\n     * @returns Promise\n     */\n   async getGeolocation():Promise {\n    if (this.platform.is('android') || this.platform.is('ios')) {\n      await this.geolocation.getCurrentPosition().then((resp) => {\n        this.geoLatitude = resp.coords.latitude;\n        this.geoLongitude = resp.coords.longitude; \n        this.geoAccuracy = resp.coords.accuracy;       \n       }).catch((error) => {\n       // this.geoAddress ='Error getting location'+ JSON.stringify(error);  \n       return  'Error';\n       });\n      }\n      else{\n        return 'Error';\n      }\n\n       return (this.geoLatitude).toString()+\"---\"+(this.geoLongitude).toString();\n      \n    }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomePageModule.html":{"url":"modules/HomePageModule.html","title":"module - HomePageModule","body":"\n                   \n\n\n\n\n    Modules\n    HomePageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HomePageModule\n\n\n\ncluster_HomePageModule_declarations\n\n\n\n\nHomePage\n\nHomePage\n\n\n\nHomePageModule\n\nHomePageModule\n\nHomePageModule -->\n\nHomePage->HomePageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/home/home.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            HomePage\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { HomePage } from './home.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        component: HomePage\n      }\n    ])\n  ],\n  declarations: [HomePage]\n})\nexport class HomePageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OverLapGraphForWeatherPredictionService.html":{"url":"injectables/OverLapGraphForWeatherPredictionService.html","title":"injectable - OverLapGraphForWeatherPredictionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OverLapGraphForWeatherPredictionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/over-lap-graph-for-weather-prediction.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                showGrapg\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            showGrapg\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showGrapg(lineChart, lineCanvas, mDate, mDateTemp, label, color, yAxisMin, yAxisMax)\n                \n            \n\n\n            \n                \n                    Defined in src/app/over-lap-graph-for-weather-prediction.service.ts:30\n                \n            \n\n\n            \n                \n                    Show Weather Graph\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    lineChart\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Chart object\n\n                                    \n                                \n                                \n                                    lineCanvas\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Canvas object\n\n                                    \n                                \n                                \n                                    mDate\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Date array\n\n                                    \n                                \n                                \n                                    mDateTemp\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Minumun temprature\n\n                                    \n                                \n                                \n                                    label\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        For hoover\n\n                                    \n                                \n                                \n                                    color\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Fill color of graph\n\n                                    \n                                \n                                \n                                    yAxisMin\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Minimum temprature of graph\n\n                                    \n                                \n                                \n                                    yAxisMax\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Minimum temprature of graph\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Chart } from 'chart.js';\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service for Graph\n*/\nexport class OverLapGraphForWeatherPredictionService {\n\n/**\n * @ignore\n */\n  constructor() { }\n\n/**\n * Show Weather Graph\n * @param {Chart} lineChart Chart object\n * @param lineCanvas Canvas object\n * @param mDate Date array\n * @param mDateTemp Minumun temprature\n * @param label For hoover\n * @param color Fill color of graph\n * @param yAxisMin Minimum temprature of graph\n * @param yAxisMax Minimum temprature of graph\n */\n  public showGrapg(lineChart,lineCanvas,mDate,mDateTemp,label,color,yAxisMin,yAxisMax) {\n    lineChart = new Chart(lineCanvas.nativeElement,\n      {\n        options: {\n          legend: {\n            display: false\n          },\n          hover: {\n            animationDuration: 0\n          },\n          animation: {\n            onComplete: function () {\n              const chartInstance = this.chart,\n                ctx = chartInstance.ctx;\n\n              ctx.font = Chart.helpers.fontString(\n                8,\n                Chart.defaults.global.defaultFontStyle,\n                Chart.defaults.global.defaultFontFamily\n              );\n              ctx.textAlign = \"center\";\n              ctx.textBaseline = \"bottom\";\n               ctx.font = \"12px verdana\";\n             \n            \n              this.data.datasets.forEach(function (dataset, i) {\n                const meta = chartInstance.controller.getDatasetMeta(i);\n                meta.data.forEach(function (bar, index) {\n                  const data = dataset.data[index];\n                  if(label==\"Highest\"){\n                    if(index!=5)\n                      ctx.fillText(data, bar._model.x +10, bar._model.y - 4);\n                    else\n                    ctx.fillText(data, bar._model.x -6, bar._model.y - 4);\n                  }\n                  if(label==\"Lowest\"){\n                    if(index!=5)\n                      ctx.fillText(data, bar._model.x +10, bar._model.y +14);\n                    else\n                    ctx.fillText(data, bar._model.x -6, bar._model.y +14);\n                  }\n\n                });\n              });\n            }\n          },\n          tooltips: {\n            enabled: true\n          },\n          responsive: true, \n          maintainAspectRatio: false,\n          scales: {\n            xAxes: [\n              {\n                display: false,\n                gridLines: {\n                  drawOnChartArea: false\n                },\n                ticks: {\n                  display: false\n                }\n              }\n            ],\n            yAxes: [\n              {\n                display: true,\n                gridLines: {\n                  drawOnChartArea: false,\n                  display: false\n                },\n                ticks: {\n                  // beginAtZero: true,\n                  min: yAxisMin,\n                  max: yAxisMax,\n                  display: false\n                }\n              }\n            ]\n          }\n        },\n        type: 'line',\n        data: {\n          labels: mDate,\n          datasets: [\n\n            {\n              label: label,\n              fill: true,\n              lineTension: 0.1,\n              backgroundColor: color,\n              borderColor: 'rgba(75,192,192,1)',\n              borderCapStyle: 'butt',\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: 'round',\n              borderWidth:'1',\n              pointBorderColor: 'rgba(75,192,192,1)',\n              pointBackgroundColor: '#fff',\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n              pointHoverBorderColor: 'rgba(220,220,220,1)',\n              pointHoverBorderWidth: 1,\n              pointRadius: 1,\n              pointHitRadius: 10,\n              data: mDateTemp,\n              spanGaps: false,\n            }\n\n          ]\n        }\n      });\n\n\n\n\n\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepositoryService.html":{"url":"injectables/RepositoryService.html","title":"injectable - RepositoryService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RepositoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/repository.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                http\n                            \n                            \n                                mStringValueEnum\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getWeatherValueCurrent\n                            \n                            \n                                    Async\n                                getWeatherValueFiveDays\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/repository.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor description\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                From angular/common/http\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getWeatherValueCurrent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeatherValueCurrent(params: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/repository.service.ts:52\n                \n            \n\n\n            \n                \n                    Get Current value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        CityName\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        JSON Object or 'Error'\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getWeatherValueFiveDays\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeatherValueFiveDays(params: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/repository.service.ts:34\n                \n            \n\n\n            \n                \n                    Get five days Value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        CityName\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        JSON Object or 'Error'\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            http\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HttpClient\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/repository.service.ts:24\n                            \n                        \n\n                \n                    \n                        From angular/common/http\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mStringValueEnum\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/repository.service.ts:18\n                            \n                        \n\n                \n                    \n                        Enum class object\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { StringValueEnum} from './string-value-enum.enum';\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service for Get JSON from URL\n*/\nexport class RepositoryService {  \n  \n  /**\n   * Enum class object\n   */\n  mStringValueEnum;\n\n /**\n * Constructor description\n * @param {HttpClient} http From angular/common/http\n */\n  constructor(public http: HttpClient) { \n      this.mStringValueEnum=StringValueEnum;\n  }\n\n\n/**\n * Get five days Value\n * @param params CityName\n * @returns JSON Object or 'Error'\n */\n  async getWeatherValueFiveDays(params:string) {  \n\n    const mValue=await this.http.get( this.mStringValueEnum.URLForcast+params+'&APPID='+this.mStringValueEnum.AppID).toPromise().then(data => {      \n      return data\n    }, err => {\n      console.log(err);\n      return err.statusText.toString();\n    });\n\n    return JSON.stringify(mValue)   \n  \n  }\n\n  /**\n   * Get Current value\n   * @param params CityName\n   * @returns JSON Object or 'Error'\n   */\n  async getWeatherValueCurrent(params:string) {  \n\n    const mValue=await this.http.get(this.mStringValueEnum.URLCurrent+params+'&APPID='+this.mStringValueEnum.AppID).toPromise().then(data => {      \n      return data\n    }, err => {\n      console.log(err);\n      return  err.statusText.toString();\n    });\n\n    return JSON.stringify(mValue)   \n  \n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TemperatureConverterService.html":{"url":"injectables/TemperatureConverterService.html","title":"injectable - TemperatureConverterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TemperatureConverterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/temperature-converter.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                kelvinToCelcius\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            kelvinToCelcius\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    kelvinToCelcius(params)\n                \n            \n\n\n            \n                \n                    Defined in src/app/temperature-converter.service.ts:22\n                \n            \n\n\n            \n                \n                    Convert from Kelvin to Celcius\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Kelvin temperature\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service for Temperature Converter\n*/\nexport class TemperatureConverterService {\n\n  /**\n   * @ignore\n   */\n  constructor() { }\n\n  /**\n   * Convert from Kelvin to Celcius\n   * @param params Kelvin temperature\n   */\n  public kelvinToCelcius(params){\n    return (params-273.15)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UIServiceServiceService.html":{"url":"injectables/UIServiceServiceService.html","title":"injectable - UIServiceServiceService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UIServiceServiceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/uiservice-service.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                loader\n                            \n                            \n                                    Private\n                                loaderLoading\n                            \n                            \n                                mLoading\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                dismissLoading\n                            \n                            \n                                    Async\n                                showLoading\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loading: LoadingController)\n                    \n                \n                        \n                            \n                                Defined in src/app/uiservice-service.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor description\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        loading\n                                                  \n                                                        \n                                                                    LoadingController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                From ionic/angular\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            dismissLoading\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    dismissLoading()\n                \n            \n\n\n            \n                \n                    Defined in src/app/uiservice-service.service.ts:60\n                \n            \n\n\n            \n                \n                    Dismiss Loading Dialog\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            showLoading\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showLoading(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/uiservice-service.service.ts:41\n                \n            \n\n\n            \n                \n                    Show Loading Dialog\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        UI Loading Message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loader\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLIonLoadingElement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/uiservice-service.service.ts:24\n                            \n                        \n\n                \n                    \n                        Loader nstace create\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loaderLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/uiservice-service.service.ts:29\n                            \n                        \n\n                \n                    \n                        Continue show loading dialog\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mLoading\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/uiservice-service.service.ts:35\n                            \n                        \n\n                \n                    \n                        Loading constant \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { LoadingController } from '@ionic/angular';\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n\n/**\n * Service for UILoading\n*/\nexport class UIServiceServiceService {\n\n/**\n * Constructor description\n * @param {LoadingController} loading From ionic/angular\n */\n  constructor(private loading: LoadingController) { }\n\n/**\n * Loader nstace create\n */\n  private loader: HTMLIonLoadingElement;\n\n/**\n * Continue show loading dialog\n */\n  private loaderLoading = false;\n\n /**\n  * Loading constant \n  * */ \n\n  mLoading;\n\n  /**\n   * Show Loading Dialog\n   * @param message UI Loading Message\n   */\n  async showLoading(message: string) {\n    //   this.loaderLoading = true;\n    //   this.loading.create({\n    //       message,\n    //       showBackdrop: true\n    //   }).then(load => {\n    //       this.loader = load;\n    //       load.present().then(() => { this.loaderLoading = false; });\n    //   });\n    this.mLoading = await this.loading.create({\n        message: 'Please wait...',\n        duration: 1000\n      });\n      await this.mLoading.present();\n  }\n\n  /**\n   * Dismiss Loading Dialog\n   */\n  async dismissLoading() {\n    //   const interval = setInterval(() => {\n    //       if (this.loader || !this.loaderLoading) {\n    //           this.loader.dismiss().then(() => { /*this.loader = null; */clearInterval(interval)});\n    //       } else if (!this.loader && !this.loaderLoading) {\n    //           clearInterval(interval);\n    //       }\n    //   }, 500);\n    const { role, data } = await this.mLoading.onDidDismiss();\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UIToastService.html":{"url":"injectables/UIToastService.html","title":"injectable - UIToastService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UIToastService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/uitoast.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toastController\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                presentToast\n                            \n                            \n                                    Public\n                                    Async\n                                presentToastWithArgumentMessage\n                            \n                            \n                                    Public\n                                    Async\n                                presentToastWithOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(toastController: ToastController)\n                    \n                \n                        \n                            \n                                Defined in src/app/uitoast.service.ts:14\n                            \n                        \n\n                \n                    \n                            Constructor description\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        toastController\n                                                  \n                                                        \n                                                                    ToastController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                From ionic/angular\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            presentToast\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    presentToast()\n                \n            \n\n\n            \n                \n                    Defined in src/app/uitoast.service.ts:40\n                \n            \n\n\n            \n                \n                    Network issue Toast\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            presentToastWithArgumentMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    presentToastWithArgumentMessage(mMessage: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/uitoast.service.ts:27\n                \n            \n\n\n            \n                \n                    Toast with argument message\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            presentToastWithOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    presentToastWithOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/uitoast.service.ts:52\n                \n            \n\n\n            \n                \n                    Toast With Option\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toastController\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ToastController\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/uitoast.service.ts:21\n                            \n                        \n\n                \n                    \n                        From ionic/angular\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ToastController } from '@ionic/angular';\n\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n\n/**\n * Service for Toast\n*/\nexport class UIToastService {\n  \n\n /**\n * Constructor description\n * @param {ToastController} toastController From ionic/angular\n */\n  constructor(public toastController: ToastController) { }\n\n/**\n * Toast with argument message\n * @param mMessage Message\n */\n  public async presentToastWithArgumentMessage(mMessage:string) {\n    const toast = await this.toastController.create({\n      message: mMessage,\n      duration: 1200,\n      cssClass:\"toast-width-class\"\n    });\n    toast.present();\n  }\n\n\n  /**\n* Network issue Toast\n*/\npublic async presentToast() {\n  const toast = await this.toastController.create({\n    message: 'Cityname not found or check network...',\n    duration: 1200,\n    cssClass:\"toast-width-class\"\n  });\n  toast.present();\n}\n\n/**\n* Toast With Option\n*/\n  public async presentToastWithOptions() {\n    const toast = await this.toastController.create({\n      header: 'Toast header',\n      message: 'Click to Close',\n      position: 'top',\n      buttons: [\n        {\n          side: 'start',\n          icon: 'star',\n          text: 'Favorite',\n          handler: () => {\n            console.log('Favorite clicked');\n          }\n        }, {\n          text: 'Done',\n          role: 'cancel',\n          handler: () => {\n            console.log('Cancel clicked');\n          }\n        }\n      ]\n    });\n    toast.present();\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/buisness-logic.service.ts\n            \n            injectable\n            BuisnessLogicService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/get-city-name-geocoder.service.ts\n            \n            injectable\n            GetCityNameGeocoderService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/app/get-location-lat-lon.service.ts\n            \n            injectable\n            GetLocationLatLonService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/app/home/home.page.ts\n            \n            component\n            HomePage\n            \n                100 %\n                (44/44)\n            \n        \n        \n            \n                \n                src/app/over-lap-graph-for-weather-prediction.service.ts\n            \n            injectable\n            OverLapGraphForWeatherPredictionService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/repository.service.ts\n            \n            injectable\n            RepositoryService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/temperature-converter.service.ts\n            \n            injectable\n            TemperatureConverterService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/uiservice-service.service.ts\n            \n            injectable\n            UIServiceServiceService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/app/uitoast.service.ts\n            \n            injectable\n            UIToastService\n            \n                100 %\n                (6/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/common : ~8.2.14\n        \n            @angular/core : ~8.2.14\n        \n            @angular/forms : ~8.2.14\n        \n            @angular/platform-browser : ~8.2.14\n        \n            @angular/platform-browser-dynamic : ~8.2.14\n        \n            @angular/router : ~8.2.14\n        \n            @capacitor/android : ^2.0.1\n        \n            @capacitor/core : 2.0.1\n        \n            @capacitor/ios : ^2.0.1\n        \n            @ionic-native/core : ^5.0.7\n        \n            @ionic-native/geolocation : ^5.24.0\n        \n            @ionic-native/native-geocoder : ^5.24.0\n        \n            @ionic-native/splash-screen : ^5.0.0\n        \n            @ionic-native/status-bar : ^5.0.0\n        \n            @ionic/angular : ^5.0.7\n        \n            chart.js : ^2.9.3\n        \n            cordova-android : 8.1.0\n        \n            cordova-plugin-geolocation : ^4.0.2\n        \n            cordova-plugin-nativegeocoder : ^3.4.0\n        \n            core-js : ^2.5.4\n        \n            rxjs : ~6.5.1\n        \n            tslib : ^1.9.0\n        \n            zone.js : ~0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            StringValueEnum   (src/.../string-value-enum.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/string-value-enum.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        StringValueEnum\n                    \n                \n                        \n                            \n                                 Error\n                            \n                        \n                        \n                            \n                                Value : Error\n                            \n                        \n                        \n                            \n                                 EnableYourGPS\n                            \n                        \n                        \n                            \n                                Value : Problem to get current location, please retry or enable your GPS ...\n                            \n                        \n                        \n                            \n                                 Loading\n                            \n                        \n                        \n                            \n                                Value : Loading...\n                            \n                        \n                        \n                            \n                                 UnknownError\n                            \n                        \n                        \n                            \n                                Value : Unknown Error\n                            \n                        \n                        \n                            \n                                 NotFound\n                            \n                        \n                        \n                            \n                                Value : Not Found\n                            \n                        \n                        \n                            \n                                 PleaseCheckNetworkConnection\n                            \n                        \n                        \n                            \n                                Value : Please check network connection...\n                            \n                        \n                        \n                            \n                                 LocationNotFound\n                            \n                        \n                        \n                            \n                                Value : Location not found...\n                            \n                        \n                        \n                            \n                                 Highest\n                            \n                        \n                        \n                            \n                                Value : Highest\n                            \n                        \n                        \n                            \n                                 Lowest\n                            \n                        \n                        \n                            \n                                Value : Lowest\n                            \n                        \n                        \n                            \n                                 PleaseEnterMoreThanTwoCharacters\n                            \n                        \n                        \n                            \n                                Value : Please enter more than 2 characters\n                            \n                        \n                        \n                            \n                                 URLForcast\n                            \n                        \n                        \n                            \n                                Value : http://api.openweathermap.org/data/2.5/forecast?q=\n                            \n                        \n                        \n                            \n                                 URLCurrent\n                            \n                        \n                        \n                            \n                                Value : http://api.openweathermap.org/data/2.5//weather?q=\n                            \n                        \n                        \n                            \n                                 AppID\n                            \n                        \n                        \n                            \n                                Value : d994b85acc1528b1a51fb0273b7ca7c4\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_HomePageModule\n\n\n\ncluster_HomePageModule_declarations\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nBuisnessLogicService\n\nBuisnessLogicService\n\nAppModule -->\n\nBuisnessLogicService->AppModule\n\n\n\n\n\nGetCityNameGeocoderService\n\nGetCityNameGeocoderService\n\nAppModule -->\n\nGetCityNameGeocoderService->AppModule\n\n\n\n\n\nGetLocationLatLonService\n\nGetLocationLatLonService\n\nAppModule -->\n\nGetLocationLatLonService->AppModule\n\n\n\n\n\nOverLapGraphForWeatherPredictionService\n\nOverLapGraphForWeatherPredictionService\n\nAppModule -->\n\nOverLapGraphForWeatherPredictionService->AppModule\n\n\n\n\n\nRepositoryService\n\nRepositoryService\n\nAppModule -->\n\nRepositoryService->AppModule\n\n\n\n\n\nTemperatureConverterService\n\nTemperatureConverterService\n\nAppModule -->\n\nTemperatureConverterService->AppModule\n\n\n\n\n\nUIServiceServiceService\n\nUIServiceServiceService\n\nAppModule -->\n\nUIServiceServiceService->AppModule\n\n\n\n\n\nUIToastService\n\nUIToastService\n\nAppModule -->\n\nUIToastService->AppModule\n\n\n\n\n\nHomePage\n\nHomePage\n\n\n\nHomePageModule\n\nHomePageModule\n\nHomePageModule -->\n\nHomePage->HomePageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        2 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomePageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
