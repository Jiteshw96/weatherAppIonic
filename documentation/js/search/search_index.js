var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,1.403,1,1.2]],["body/components/AppComponent.html",[0,2.518,1,1.981,2,3.053,3,0.354,4,0.354,5,2.411,6,2.411,7,2.411,8,2.411,9,0.279,10,1.915,11,0.62,12,3.346,13,3.346,14,3.843,15,1.004,16,4.151,17,0.861,18,3.346,19,3.843,20,3.346,21,3.346,22,0.523,23,0.861,24,4.151,25,1.122,26,1.589,27,3.158,28,3.854,29,3.854,30,0.861,31,2.411,32,3.346,33,0.62,34,0.06,35,0.693,36,0.62,37,0.62,38,2.411,39,3.346,40,2.205,41,3.346,42,0.62,43,1.589,44,0.609,45,0.279,46,0.728,47,1.596,48,1.589,49,1.915,50,1.589,51,1.915,52,0.354,53,0.354,54,0.988,55,2.144,56,2.411,57,2.411,58,2.411,59,2.411,60,2.658,61,3.346,62,1.15,63,3.346,64,3.346,65,2.411,66,3.298,67,2.411,68,2.411,69,1.345,70,1.915,71,2.411,72,2.411,73,0.027,74,0.038,75,0.027]],["title/modules/AppModule.html",[76,1.031,77,1.403]],["body/modules/AppModule.html",[1,2.312,3,0.316,4,0.316,9,0.249,15,0.467,28,2.455,29,2.455,34,0.06,35,0.388,44,0.742,45,0.249,46,0.65,47,1.884,48,1.419,49,1.711,50,1.419,51,1.711,52,0.316,53,0.316,62,1.027,73,0.024,74,0.035,75,0.024,76,0.883,77,2.873,78,0.883,79,1.027,80,2.381,81,2.381,82,2.381,83,1.201,84,1.711,85,1.711,86,1.711,87,1.711,88,1.711,89,1.995,90,2.076,91,2.076,92,2.076,93,2.076,94,2.076,95,1.783,96,2.076,97,2.076,98,2.036,99,1.419,100,1.419,101,2.153,102,2.036,103,2.036,104,3.09,105,1.711,106,1.419,107,3.09,108,1.201,109,1.711,110,3.09,111,2.153,112,2.153,113,2.153,114,2.153,115,1.711,116,2.153,117,2.153,118,2.153,119,2.153,120,2.153,121,1.711,122,1.711,123,2.153,124,1.419,125,1.027,126,1.201,127,2.153,128,1.724,129,1.419,130,1.724,131,1.419,132,1.201,133,1.419,134,1.419,135,1.419,136,2.153,137,1.419,138,2.153,139,2.153,140,2.153,141,2.153,142,2.153,143,2.153]],["title/modules/AppRoutingModule.html",[76,1.031,89,1.2]],["body/modules/AppRoutingModule.html",[3,0.499,4,0.499,9,0.393,34,0.06,44,0.615,45,0.393,52,0.499,53,0.499,70,3.33,73,0.039,74,0.048,75,0.039,78,1.393,83,1.896,89,2,102,2.24,103,2.762,108,1.896,144,3.399,145,3.399,146,4.191,147,3.33,148,2.536,149,1.622,150,2.762,151,3.399,152,3.399,153,3.399,154,3.399,155,3.399,156,3.399,157,3.399,158,3.399,159,3.399]],["title/injectables/BuisnessLogicService.html",[90,1.2,160,0.029]],["body/injectables/BuisnessLogicService.html",[3,0.19,4,0.19,9,0.15,11,1.087,15,0.454,17,0.678,22,0.281,23,0.539,25,0.678,30,1.035,33,0.963,34,0.061,35,0.703,36,0.855,37,0.963,42,1.063,44,0.307,45,0.15,52,0.19,53,0.19,54,0.963,66,2.641,73,0.015,74,0.024,75,0.015,90,1.445,95,1.363,121,1.029,122,1.029,125,0.999,126,1.689,150,2.725,160,0.024,161,0.333,162,3.285,163,1.029,164,0.632,165,0.858,166,1.4,167,3.028,168,2.826,169,2.094,170,2.094,171,2.094,172,2.094,173,2.094,174,2.094,175,1.295,176,1.295,177,2.094,178,2.094,179,0.796,180,1.295,181,1.295,182,2.321,183,3.325,184,2.094,185,3.325,186,2.641,187,2.094,188,2.094,189,3.028,190,1.295,191,2.641,192,1.295,193,1.295,194,2.636,195,2.094,196,1.295,197,3.325,198,1.295,199,2.406,200,2.094,201,1.996,202,2.089,203,1.663,204,2.094,205,2.094,206,1.295,207,3.028,208,2.094,209,2.587,210,2.094,211,1.295,212,4.31,213,3.557,214,3.028,215,2.094,216,1.295,217,1.295,218,1.737,219,1.295,220,1.295,221,2.094,222,2.094,223,2.094,224,0.391,225,1.295,226,1.295,227,1.295,228,0.618,229,1.295,230,1.295,231,1.295,232,2.094,233,4.74,234,1.295,235,2.094,236,1.295,237,4.795,238,2.094,239,3.028,240,1.295,241,1.295,242,1.295,243,1.295,244,1.295,245,1.295,246,2.636,247,1.295,248,1.295,249,1.295,250,1.295,251,1.295,252,1.295,253,1.295,254,1.295,255,1.295,256,2.636,257,1.295,258,1.295,259,1.295,260,1.295,261,1.295,262,1.295,263,2.094,264,1.295,265,1.295,266,1.295,267,1.295,268,1.295,269,1.295,270,1.295,271,1.295,272,1.295,273,1.295,274,1.295,275,1.295,276,1.295,277,1.295,278,1.295,279,1.295,280,1.295,281,1.295,282,1.295,283,1.295,284,2.094,285,1.295,286,1.295,287,1.295,288,1.295,289,1.663,290,2.094,291,1.295,292,1.295,293,1.295,294,1.295,295,1.295,296,1.295,297,1.295,298,1.295,299,1.295]],["title/injectables/GetCityNameGeocoderService.html",[91,1.2,160,0.029]],["body/injectables/GetCityNameGeocoderService.html",[3,0.283,4,0.283,9,0.223,11,0.964,15,0.619,17,0.873,22,0.419,23,0.734,25,0.496,26,1.272,27,3.157,30,1.077,33,0.873,34,0.061,35,0.833,36,0.964,37,0.873,40,2.236,42,0.734,44,0.55,45,0.223,46,0.583,47,1.361,52,0.283,53,0.283,54,1.077,55,1.591,73,0.022,74,0.032,75,0.022,91,1.361,128,2.577,129,1.272,130,2.577,131,2.636,132,1.076,133,1.272,137,2.931,160,0.032,161,0.496,164,0.861,165,1.169,166,1.208,179,1.208,182,1.909,201,1.88,202,1.076,209,1.076,218,1.272,224,0.583,228,0.921,300,2.855,301,1.533,302,2.852,303,2.696,304,2.852,305,1.893,306,2.266,307,2.852,308,2.696,309,2.852,310,1.929,311,4.542,312,3.393,313,1.88,314,1.929,315,3.327,316,1.929,317,2.978,318,2.978,319,1.533,320,2.852,321,2.852,322,1.88,323,2.852,324,2.266,325,1.929,326,2.266,327,1.929,328,2.266,329,1.929,330,1.929,331,1.929,332,1.272,333,1.929,334,1.929,335,1.929,336,2.696,337,1.929,338,1.929,339,1.533,340,1.272,341,1.929,342,1.929,343,2.852,344,1.929,345,1.929,346,1.929,347,2.852,348,1.929,349,1.929,350,1.929,351,1.272]],["title/injectables/GetLocationLatLonService.html",[92,1.2,160,0.029]],["body/injectables/GetLocationLatLonService.html",[3,0.312,4,0.312,9,0.246,11,0.787,15,0.664,17,0.923,22,0.461,23,0.787,25,0.787,26,1.401,27,3.261,30,1.114,33,0.547,34,0.06,35,0.383,36,1.07,37,0.547,40,2.364,42,0.787,44,0.576,45,0.246,46,0.642,47,1.461,52,0.312,53,0.312,54,0.923,55,1.708,73,0.024,74,0.035,75,0.024,92,1.712,128,2.636,129,1.401,130,2.636,131,1.401,132,1.186,133,1.401,134,3.011,135,3.011,160,0.035,161,0.547,164,0.924,165,1.255,166,0.924,179,1.256,182,1.712,224,0.642,228,1.014,300,2.942,305,2.321,306,2.85,308,2.85,315,2.432,317,2.432,318,3.442,319,2.85,328,1.689,332,1.401,336,1.689,339,1.689,340,2.364,352,1.689,353,3.061,354,3.588,355,3.588,356,3.061,357,2.126,358,3.061,359,3.061,360,3.304,361,3.061,362,2.126,363,2.126,364,2.126,365,2.126,366,2.126,367,2.126,368,2.126,369,2.126,370,2.126,371,2.126,372,2.126,373,2.126,374,2.126,375,2.126,376,2.126,377,2.126,378,2.126,379,2.126,380,2.126]],["title/modules/HomePageModule.html",[76,1.031,381,1.403]],["body/modules/HomePageModule.html",[0,1.787,3,0.47,4,0.47,9,0.371,34,0.06,44,0.718,45,0.371,46,0.967,52,0.47,53,0.47,62,1.528,69,2.77,73,0.036,74,0.046,75,0.036,76,1.313,78,1.313,79,1.528,80,2.916,81,2.111,82,2.111,83,1.787,98,2.662,99,2.111,100,2.111,102,2.111,103,2.662,108,1.787,109,3.209,147,2.545,150,2.111,381,2.728,382,2.545,383,2.545,384,3.203,385,4.039,386,2.545,387,4.039,388,2.545,389,3.203,390,3.203]],["title/injectables/OverLapGraphForWeatherPredictionService.html",[93,1.2,160,0.029]],["body/injectables/OverLapGraphForWeatherPredictionService.html",[3,0.273,4,0.273,9,0.216,11,0.714,15,0.603,17,0.855,22,0.603,23,0.714,25,0.479,30,0.479,33,0.479,34,0.061,35,0.336,36,0.479,37,0.479,42,0.479,43,1.227,44,0.408,45,0.216,52,0.273,53,0.273,54,1.132,62,0.888,73,0.021,74,0.031,75,0.021,93,1.325,124,1.831,125,2.218,126,2.055,149,1.585,160,0.031,161,0.479,164,0.839,166,1.003,179,0.562,186,2.926,191,2.207,224,0.562,289,1.479,303,1.479,313,2.428,322,2.597,324,1.479,351,1.831,391,2.207,392,1.479,393,2.778,394,1.862,395,3.323,396,3.684,397,3.941,398,4.133,399,3.684,400,3.684,401,1.862,402,2.207,403,3.323,404,3.684,405,2.778,406,2.778,407,2.778,408,4.133,409,2.778,410,3.323,411,3.684,412,1.479,413,1.479,414,1.862,415,1.479,416,1.862,417,4.133,418,3.574,419,1.862,420,1.862,421,1.862,422,1.862,423,1.862,424,1.862,425,1.862,426,1.862,427,1.862,428,1.862,429,1.862,430,1.479,431,1.862,432,1.862,433,1.862,434,1.862,435,1.862,436,1.862,437,1.862,438,1.862,439,1.862,440,1.862,441,1.862,442,1.479,443,2.64,444,1.862,445,1.862,446,2.778,447,2.778,448,2.778,449,2.778,450,1.862,451,1.862,452,1.862,453,1.862,454,1.862,455,1.862,456,1.862,457,2.778,458,2.778,459,2.778,460,1.862,461,1.862,462,1.862,463,1.862,464,1.862,465,1.862,466,1.862,467,1.862,468,1.862,469,1.862,470,1.862,471,3.323,472,1.862,473,1.862,474,1.862,475,1.862,476,1.862,477,1.862,478,1.862,479,1.862,480,1.862,481,1.862,482,1.862,483,3.323,484,1.862,485,1.862,486,1.862,487,1.862,488,1.862,489,1.862,490,1.862,491,1.862]],["title/injectables/RepositoryService.html",[94,1.2,160,0.029]],["body/injectables/RepositoryService.html",[3,0.348,4,0.348,9,0.275,11,1.155,15,0.718,17,0.98,22,0.514,23,0.851,25,0.98,30,1.06,33,0.98,34,0.061,35,0.687,36,1.06,37,0.98,42,1.06,44,0.485,45,0.275,52,0.348,53,0.348,54,0.98,73,0.027,74,0.038,75,0.027,94,1.578,115,3.275,149,1.578,160,0.038,161,0.61,164,0.999,165,1.356,166,0.999,168,1.884,179,0.716,182,2.142,199,2.628,201,2.857,202,2.3,203,2.628,209,2.3,224,0.716,228,1.132,305,2.505,313,2.716,340,2.959,443,2.628,492,1.884,493,4.335,494,3.308,495,3.308,496,2.372,497,4.49,498,2.372,499,2.372,500,2.372,501,3.308,502,3.275,503,4.122,504,2.372,505,2.372,506,2.372,507,2.372,508,3.308,509,2.372,510,3.308,511,3.308,512,3.308,513,2.372,514,2.372]],["title/injectables/TemperatureConverterService.html",[95,1.031,160,0.029]],["body/injectables/TemperatureConverterService.html",[3,0.464,4,0.464,9,0.366,11,1.03,15,0.869,17,1.131,22,0.685,23,1.03,25,0.813,30,0.813,33,0.813,34,0.06,35,0.57,37,0.813,42,0.813,44,0.464,45,0.366,52,0.464,53,0.464,54,0.813,73,0.036,74,0.045,75,0.036,95,1.642,160,0.045,161,0.813,164,1.209,166,1.328,177,3.182,178,3.493,179,0.954,182,1.508,224,0.954,360,2.51,413,2.51,502,3.493,515,3.182,516,2.51,517,4.005,518,4.005,519,3.16,520,4.623,521,4.005,522,3.16,523,3.16]],["title/injectables/UIServiceServiceService.html",[96,1.2,160,0.029]],["body/injectables/UIServiceServiceService.html",[3,0.327,4,0.327,9,0.258,11,1.09,15,0.687,17,0.948,22,0.484,23,0.815,25,0.948,30,1.09,33,0.815,34,0.061,35,0.571,36,0.948,37,0.815,42,0.815,43,2.089,44,0.465,45,0.258,46,1.113,52,0.327,53,0.327,54,0.815,55,2.456,73,0.025,74,0.036,75,0.025,96,1.512,149,1.065,160,0.036,161,0.574,164,0.957,165,1.299,166,1.329,179,0.674,202,1.245,209,2.056,218,1.471,224,0.674,322,2.089,326,2.518,402,3.188,418,2.928,524,3.498,525,1.773,526,4.238,527,3.686,528,4.012,529,3.169,530,2.231,531,4.238,532,2.231,533,4.83,534,2.231,535,3.169,536,4.403,537,3.169,538,2.231,539,3.367,540,3.169,541,3.169,542,2.231,543,3.169,544,2.231,545,3.169,546,2.231,547,2.231,548,4.012,549,2.231,550,2.231,551,2.231,552,4.012,553,2.231,554,2.231,555,2.231,556,2.231,557,2.231,558,2.231,559,3.169,560,2.231]],["title/injectables/UIToastService.html",[97,1.2,160,0.029]],["body/injectables/UIToastService.html",[3,0.357,4,0.357,9,0.282,11,1.072,15,0.731,17,0.994,22,0.528,23,0.867,25,0.994,30,1.072,33,0.626,34,0.061,35,0.439,36,0.867,37,0.626,42,0.867,44,0.495,45,0.282,46,1.259,52,0.357,53,0.495,54,0.626,60,1.935,73,0.028,74,0.038,75,0.028,97,1.608,149,1.608,160,0.038,161,0.626,164,1.018,165,1.381,166,1.428,179,0.736,210,1.935,224,0.736,228,1.162,305,2.526,332,2.221,539,2.677,561,1.935,562,4.911,563,4.17,564,4.17,565,2.436,566,2.436,567,2.436,568,3.864,569,3.864,570,4.731,571,2.436,572,3.37,573,2.436,574,3.37,575,2.436,576,2.436,577,2.436,578,2.436,579,3.37,580,3.37,581,2.436,582,2.436,583,2.436,584,2.436,585,2.436,586,2.436,587,2.436,588,3.37,589,2.436,590,3.37,591,2.436,592,3.37,593,2.436,594,2.436,595,2.436,596,2.436]],["title/coverage.html",[597,2.736]],["body/coverage.html",[0,2.25,1,1.524,9,0.37,10,2.538,34,0.059,35,0.576,36,0.822,69,1.782,73,0.036,74,0.046,75,0.036,90,1.524,91,1.524,92,1.524,93,1.524,94,1.524,95,1.309,96,1.524,97,1.524,124,2.105,125,1.524,126,1.782,134,2.105,135,2.105,137,2.105,160,0.057,162,2.538,163,2.538,300,2.658,301,2.538,352,2.538,391,2.538,392,2.538,415,2.538,492,2.538,515,2.538,516,2.538,524,2.538,525,2.538,561,2.538,597,2.538,598,3.194,599,3.194,600,3.194,601,4.887,602,3.194,603,3.194,604,3.194,605,4.419,606,4.033,607,3.194,608,3.194,609,4.033,610,4.033,611,3.194,612,3.194,613,3.194]],["title/dependencies.html",[79,1.445,614,2.093]],["body/dependencies.html",[34,0.06,45,0.365,46,0.952,47,2.274,48,2.077,50,2.077,73,0.036,74,0.045,75,0.036,79,1.504,105,3.176,106,2.635,108,1.758,128,1.758,130,1.758,132,1.758,386,2.504,388,2.504,412,2.504,442,2.504,615,4.87,616,3.151,617,3.151,618,4.391,619,3.151,620,3.151,621,3.151,622,3.998,623,3.151,624,3.998,625,3.151,626,3.151,627,3.998,628,3.151,629,4.391,630,3.151,631,3.151,632,3.998,633,3.151,634,3.151,635,3.151,636,3.151,637,3.151,638,3.151,639,3.151,640,3.151,641,3.151,642,3.151,643,3.151]],["title/index.html",[22,0.545,644,1.997]],["body/index.html",[1,2.338,2,2.4,34,0.059,62,1.441,69,2.402,73,0.034,74,0.044,75,0.034,76,1.238,77,2.946,78,1.238,79,1.441,80,1.991,81,1.991,82,1.991,83,1.685,84,2.4,85,2.4,86,2.4,87,2.4,88,2.4,89,2.054,90,2.054,91,2.054,92,2.054,93,2.054,94,2.054,95,1.765,96,2.054,97,2.054,98,2.565,99,1.991,100,1.991,148,1.685,161,0.777,351,2.565,381,2.537,382,2.4,383,2.4,430,2.4,644,2.4,645,3.021]],["title/modules.html",[78,1.412]],["body/modules.html",[34,0.052,73,0.044,74,0.052,75,0.044,77,2.181,78,1.603,89,1.866,106,3.005,125,1.866,381,2.181,646,4.559,647,4.559,648,4.826,649,3.91]],["title/routes.html",[148,1.922]],["body/routes.html",[34,0.053,73,0.047,74,0.053,75,0.047,148,2.288]]],"invertedIndex":[["",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"routes.html":{}}}],["0",{"_index":289,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["0.0",{"_index":476,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["0.1",{"_index":468,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["0.9.1",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["01d",{"_index":262,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["02d",{"_index":264,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["03d",{"_index":266,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["04d",{"_index":268,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["09d",{"_index":270,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["1",{"_index":483,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["1.9.0",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":448,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["100",{"_index":601,"title":{},"body":{"coverage.html":{}}}],["10d",{"_index":272,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["11d",{"_index":274,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["1200",{"_index":576,"title":{},"body":{"injectables/UIToastService.html":{}}}],["13d",{"_index":276,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["2",{"_index":351,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"index.html":{}}}],["2.0.1",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["2.5.4",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["2.9.3",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":609,"title":{},"body":{"coverage.html":{}}}],["273.15",{"_index":523,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["3",{"_index":645,"title":{},"body":{"index.html":{}}}],["3.4.0",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":602,"title":{},"body":{"coverage.html":{}}}],["36/42",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["4.0.2",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":324,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["5.0.0",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["5.0.7",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["5.24.0",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":610,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":560,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["50d",{"_index":278,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["6",{"_index":450,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["6.5.1",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":611,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":606,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":430,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"index.html":{}}}],["8.1.0",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["8.2.14",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["85",{"_index":605,"title":{},"body":{"coverage.html":{}}}],["9/10",{"_index":604,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["accuracy",{"_index":361,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["actual_component",{"_index":72,"title":{},"body":{"components/AppComponent.html":{}}}],["address",{"_index":311,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["address.slice(0",{"_index":350,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["addressobj",{"_index":312,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["android",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":386,"title":{},"body":{"modules/HomePageModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"injectables/RepositoryService.html":{}}}],["angular/core",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":388,"title":{},"body":{"modules/HomePageModule.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"dependencies.html":{}}}],["animation",{"_index":421,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["animationduration",{"_index":420,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["app",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["app.component",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":21,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":19,"title":{},"body":{"components/AppComponent.html":{}}}],["app/buisness",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["app/over",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["app/repository.service",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["app/temperature",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{}}}],["app/uiservice",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["app/uitoast.service",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"coverage.html":{},"index.html":{}}}],["appcomponent.ts",{"_index":32,"title":{},"body":{"components/AppComponent.html":{}}}],["application",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["appmodule",{"_index":77,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["approutingmodule",{"_index":89,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"index.html":{},"modules.html":{}}}],["approutingmodule,httpclientmodule",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["array",{"_index":406,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["assets/images/01d.png",{"_index":263,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/02d.png",{"_index":265,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/03d.png",{"_index":267,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/04d.png",{"_index":269,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/09d.png",{"_index":271,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/10d.png",{"_index":273,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/11d.png",{"_index":275,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/13d.png",{"_index":277,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/50d.png",{"_index":279,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/broken_clouds.png",{"_index":244,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/clear_sky.png",{"_index":236,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/cleat_sky_night.png",{"_index":257,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/few",{"_index":258,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/few_clouds.png",{"_index":240,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/mist.png",{"_index":252,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/rain.png",{"_index":248,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/rain_night.png",{"_index":260,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/scattered_clouds.png",{"_index":242,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/shower_rain.png",{"_index":247,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/snow.png",{"_index":250,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["assets/images/thunderstorm.png",{"_index":254,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["async",{"_index":305,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/RepositoryService.html":{},"injectables/UIToastService.html":{}}}],["available",{"_index":649,"title":{},"body":{"modules.html":{}}}],["await",{"_index":332,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/UIToastService.html":{}}}],["backgroundcolor",{"_index":469,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bar",{"_index":442,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"dependencies.html":{}}}],["bar._model.x",{"_index":447,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bar._model.y",{"_index":449,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bar/ngx",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["beginatzero",{"_index":461,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["beginning",{"_index":41,"title":{},"body":{"components/AppComponent.html":{}}}],["bootstrap",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["bordercapstyle",{"_index":472,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bordercolor",{"_index":470,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["borderdash",{"_index":474,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["borderdashoffset",{"_index":475,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["borderjoinstyle",{"_index":477,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["bottom",{"_index":436,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["break",{"_index":237,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["broken",{"_index":243,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["browse",{"_index":648,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browsermodule",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["buisness",{"_index":225,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["buisnesslogicservice",{"_index":90,"title":{"injectables/BuisnessLogicService.html":{}},"body":{"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{},"coverage.html":{},"index.html":{}}}],["butt",{"_index":473,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["buttons",{"_index":585,"title":{},"body":{"injectables/UIToastService.html":{}}}],["cancel",{"_index":595,"title":{},"body":{"injectables/UIToastService.html":{}}}],["canvas",{"_index":405,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["capacitor/android",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["capacitor/core",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["capacitor/ios",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["case",{"_index":233,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["catch((error",{"_index":339,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["celcius",{"_index":521,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["center",{"_index":434,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart",{"_index":404,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart(linecanvas.nativeelement",{"_index":416,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart.defaults.global.defaultfontfamily",{"_index":432,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart.defaults.global.defaultfontstyle",{"_index":431,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart.helpers.fontstring",{"_index":429,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chart.js",{"_index":412,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"dependencies.html":{}}}],["chartinstance",{"_index":424,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chartinstance.controller.getdatasetmeta(i",{"_index":440,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["chartinstance.ctx",{"_index":427,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["city",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"coverage.html":{}}}],["cityname",{"_index":503,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["class",{"_index":53,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["clear",{"_index":234,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["clearinterval(interval",{"_index":559,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["cleat",{"_index":255,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["click",{"_index":581,"title":{},"body":{"injectables/UIToastService.html":{}}}],["clicked",{"_index":592,"title":{},"body":{"injectables/UIToastService.html":{}}}],["close",{"_index":582,"title":{},"body":{"injectables/UIToastService.html":{}}}],["clouds",{"_index":239,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["clouds_night.png",{"_index":259,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["cluster_appmodule",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_bootstrap",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_declarations",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_homepagemodule",{"_index":382,"title":{},"body":{"modules/HomePageModule.html":{},"index.html":{}}}],["cluster_homepagemodule_declarations",{"_index":383,"title":{},"body":{"modules/HomePageModule.html":{},"index.html":{}}}],["color",{"_index":398,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["comma",{"_index":341,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["commonmodule",{"_index":385,"title":{},"body":{"modules/HomePageModule.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/HomePageModule.html":{},"coverage.html":{}}}],["component_template",{"_index":67,"title":{},"body":{"components/AppComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["configuration",{"_index":13,"title":{},"body":{"components/AppComponent.html":{}}}],["console.log('cancel",{"_index":596,"title":{},"body":{"injectables/UIToastService.html":{}}}],["console.log('favorite",{"_index":591,"title":{},"body":{"injectables/UIToastService.html":{}}}],["console.log(err",{"_index":511,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["console.log(this.mtemperatureconverterservice.kelvintocelcius(mheigh",{"_index":295,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["const",{"_index":149,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["constructor",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["constructor(http",{"_index":496,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["constructor(loading",{"_index":530,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["constructor(mtemperatureconverterservice",{"_index":175,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["constructor(platform",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["constructor(private",{"_index":547,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["constructor(public",{"_index":228,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/RepositoryService.html":{},"injectables/UIToastService.html":{}}}],["constructor(toastcontroller",{"_index":565,"title":{},"body":{"injectables/UIToastService.html":{}}}],["continue",{"_index":545,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["convert",{"_index":177,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/TemperatureConverterService.html":{}}}],["converter",{"_index":522,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["converter.service",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{}}}],["converter.service.ts",{"_index":516,"title":{},"body":{"injectables/TemperatureConverterService.html":{},"coverage.html":{}}}],["converter.service.ts:22",{"_index":519,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["cordova",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["core",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":597,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":326,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/UIServiceServiceService.html":{}}}],["cssclass:\"toast",{"_index":577,"title":{},"body":{"injectables/UIToastService.html":{}}}],["ctx",{"_index":426,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["ctx.filltext(data",{"_index":446,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["ctx.font",{"_index":428,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["ctx.textalign",{"_index":433,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["ctx.textbaseline",{"_index":435,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["current",{"_index":501,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["data",{"_index":443,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{}}}],["dataset",{"_index":438,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["dataset.data[index",{"_index":444,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["datasets",{"_index":466,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["date",{"_index":191,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["dates",{"_index":187,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["day",{"_index":194,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["days",{"_index":199,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/RepositoryService.html":{}}}],["dd",{"_index":183,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["declarations",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["declare",{"_index":221,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["default",{"_index":218,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/UIServiceServiceService.html":{}}}],["defined",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["dependencies",{"_index":79,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["dialog",{"_index":536,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["directive",{"_index":65,"title":{},"body":{"components/AppComponent.html":{}}}],["directives",{"_index":71,"title":{},"body":{"components/AppComponent.html":{}}}],["dismiss",{"_index":535,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["dismissloading",{"_index":528,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["display",{"_index":417,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["documentation",{"_index":598,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AppComponent.html":{}}}],["done",{"_index":593,"title":{},"body":{"injectables/UIToastService.html":{}}}],["drawonchartarea",{"_index":458,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["duration",{"_index":575,"title":{},"body":{"injectables/UIToastService.html":{}}}],["dynamic",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":288,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["element",{"_index":64,"title":{},"body":{"components/AppComponent.html":{}}}],["enabled",{"_index":452,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["entrycomponents",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":510,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["error",{"_index":340,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/RepositoryService.html":{}}}],["export",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["exports",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["false",{"_index":418,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/UIServiceServiceService.html":{}}}],["favorite",{"_index":589,"title":{},"body":{"injectables/UIToastService.html":{}}}],["fetch",{"_index":222,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["few",{"_index":238,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["fff",{"_index":481,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{}}}],["fill",{"_index":410,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["five",{"_index":203,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/RepositoryService.html":{}}}],["format",{"_index":185,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["formatdatefordateandmonth",{"_index":169,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["formatdatefordateandmonth(mdate",{"_index":180,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["formated",{"_index":190,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["formsmodule",{"_index":387,"title":{},"body":{"modules/HomePageModule.html":{}}}],["full",{"_index":153,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["function",{"_index":423,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["generateaddress",{"_index":304,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["generateaddress(addressobj",{"_index":309,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geo",{"_index":318,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["geoaccuracy",{"_index":353,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["geoaccuracy:number",{"_index":366,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["geoaddress",{"_index":302,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geoaddress:string",{"_index":330,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geocoder",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["geocoder.service",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["geocoder.service.ts",{"_index":301,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"coverage.html":{}}}],["geocoder.service.ts:19",{"_index":307,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geocoder.service.ts:26",{"_index":327,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geocoder.service.ts:32",{"_index":325,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geocoder.service.ts:41",{"_index":316,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geocoder.service.ts:64",{"_index":310,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["geocoder/ngx",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["geolatitude",{"_index":354,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["geolocation",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"dependencies.html":{}}}],["geolongitude",{"_index":355,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["getcitynamegeocoderservice",{"_index":91,"title":{"injectables/GetCityNameGeocoderService.html":{}},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"coverage.html":{},"index.html":{}}}],["getdayofweek",{"_index":170,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getdayofweek(mdate",{"_index":192,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getfivedaysvalueinformat",{"_index":171,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getfivedaysvalueinformat(mdate",{"_index":196,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getfivedaysvalueinformat(mdate,mfivedaysvalue",{"_index":280,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getgeolocation",{"_index":306,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["getgeolocation():promise",{"_index":367,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["getgeolocation(latitude",{"_index":314,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["getgeolocation(latitude,longitude):promise",{"_index":331,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["gethigh",{"_index":285,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getlocationlatlonservice",{"_index":92,"title":{"injectables/GetLocationLatLonService.html":{}},"body":{"modules/AppModule.html":{},"injectables/GetLocationLatLonService.html":{},"coverage.html":{},"index.html":{}}}],["getnoofdays",{"_index":172,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getnoofdays(mfivedaysvalue",{"_index":205,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getting",{"_index":377,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["getweatherbannericonfromassetfolder",{"_index":173,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getweatherbannericonfromassetfolder(mweathertype",{"_index":208,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getweatherforcasticonfromassetfolder",{"_index":174,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getweatherforcasticonfromassetfolder(mweathertype",{"_index":215,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["getweathervaluecurrent",{"_index":494,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluecurrent(params",{"_index":499,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluecurrent(params:string",{"_index":513,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluefivedays",{"_index":495,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluefivedays(params",{"_index":504,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["getweathervaluefivedays(params:string",{"_index":507,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["graph",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{},"modules.html":{}}}],["gridlines",{"_index":457,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["handler",{"_index":590,"title":{},"body":{"injectables/UIToastService.html":{}}}],["header",{"_index":580,"title":{},"body":{"injectables/UIToastService.html":{}}}],["home",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{}}}],["home.page",{"_index":389,"title":{},"body":{"modules/HomePageModule.html":{}}}],["homepage",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"modules/HomePageModule.html":{},"coverage.html":{},"index.html":{}}}],["homepage.ts",{"_index":227,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["homepagemodule",{"_index":381,"title":{"modules/HomePageModule.html":{}},"body":{"modules/HomePageModule.html":{},"index.html":{},"modules.html":{}}}],["hoover",{"_index":409,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["hover",{"_index":419,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["html",{"_index":63,"title":{},"body":{"components/AppComponent.html":{}}}],["htmlionloadingelement",{"_index":541,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["http",{"_index":493,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["http://openweathermap.org/img/w",{"_index":219,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["httpclient",{"_index":497,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["httpclientmodule",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["icon",{"_index":210,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/UIToastService.html":{}}}],["identifier",{"_index":599,"title":{},"body":{"coverage.html":{}}}],["if(index!=5",{"_index":445,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["if(obj[val].length",{"_index":348,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["ignore",{"_index":413,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/TemperatureConverterService.html":{}}}],["image",{"_index":212,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["import",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["import('./home/home.module').then",{"_index":155,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["imports",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["information",{"_index":329,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["initialize",{"_index":39,"title":{},"body":{"components/AppComponent.html":{}}}],["initializeapp",{"_index":24,"title":{},"body":{"components/AppComponent.html":{}}}],["inject",{"_index":164,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["injectable",{"_index":160,"title":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{}}}],["injectables",{"_index":161,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"index.html":{}}}],["interval",{"_index":555,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["ionic",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"dependencies.html":{}}}],["ionic/angular",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"dependencies.html":{}}}],["ionicmodule",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{}}}],["ionicmodule.forroot",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["ionicroutestrategy",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["issue",{"_index":569,"title":{},"body":{"injectables/UIToastService.html":{}}}],["js",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":201,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/RepositoryService.html":{}}}],["json.parse(mfivedaysvalue).list[j].main.temp_min",{"_index":290,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["json.stringify(error",{"_index":378,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["json.stringify(mvalue",{"_index":512,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["kelvin",{"_index":520,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["kelvintocelcius",{"_index":517,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["kelvintocelcius(params",{"_index":518,"title":{},"body":{"injectables/TemperatureConverterService.html":{}}}],["key",{"_index":344,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["label",{"_index":397,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["labels",{"_index":465,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["lap",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["lat",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetLocationLatLonService.html":{},"coverage.html":{}}}],["lat,lon",{"_index":359,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["latitude",{"_index":317,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["legend",{"_index":62,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"index.html":{}}}],["line",{"_index":464,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["linecanvas",{"_index":395,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["linechart",{"_index":403,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["linetension",{"_index":467,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["load",{"_index":553,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["load.present().then",{"_index":554,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["loadchildren",{"_index":154,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["loader",{"_index":526,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["loaderloading",{"_index":527,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["loading",{"_index":533,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["loadingcontroller",{"_index":531,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["local",{"_index":214,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["location",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetLocationLatLonService.html":{},"coverage.html":{}}}],["log",{"_index":286,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic",{"_index":226,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["logic.service.ts",{"_index":163,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"coverage.html":{}}}],["logic.service.ts:100",{"_index":216,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:12",{"_index":176,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:155",{"_index":198,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:18",{"_index":217,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:213",{"_index":206,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:22",{"_index":220,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:227",{"_index":181,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:241",{"_index":193,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["logic.service.ts:29",{"_index":211,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["lon",{"_index":365,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["lon.service",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["lon.service.ts",{"_index":352,"title":{},"body":{"injectables/GetLocationLatLonService.html":{},"coverage.html":{}}}],["lon.service.ts:19",{"_index":362,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["lon.service.ts:23",{"_index":363,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["lon.service.ts:27",{"_index":356,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["lon.service.ts:36",{"_index":364,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["lon.service.ts:44",{"_index":357,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["longitude",{"_index":315,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["m",{"_index":156,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["m.homepagemodule",{"_index":157,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["maintainaspectratio",{"_index":454,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["matching",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"routes.html":{}}}],["max",{"_index":463,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["maxresults",{"_index":323,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["mdate",{"_index":186,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["mdatetemp",{"_index":396,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["mdatetempmax",{"_index":281,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mdatetempmax.push(math.floor(this.mtemperatureconverterservice.kelvintocelcius(mheigh",{"_index":292,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mdatetempmin",{"_index":282,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mdatetempmin.push(math.floor(this.mtemperatureconverterservice.kelvintocelcius(mlow",{"_index":293,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["menu",{"_index":61,"title":{},"body":{"components/AppComponent.html":{}}}],["message",{"_index":539,"title":{},"body":{"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["meta",{"_index":439,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["meta.data.foreach(function",{"_index":441,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["metadata",{"_index":14,"title":{},"body":{"components/AppComponent.html":{}}}],["methods",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["mfivedaysvalue",{"_index":197,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mfivedaysweathericon",{"_index":283,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mfivedaysweathericon.push(mweathericon",{"_index":294,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["min",{"_index":462,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["minimum",{"_index":411,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["minumun",{"_index":407,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["mist",{"_index":251,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mlow",{"_index":291,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mm",{"_index":189,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["module",{"_index":76,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["modules",{"_index":78,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{},"index.html":{},"modules.html":{}}}],["month",{"_index":184,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mtemperatureconverterservice",{"_index":167,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mtemperatureconverterservice:temperatureconverterservice",{"_index":229,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["mvalue=await",{"_index":508,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["mweathertype",{"_index":213,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["name",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{}}}],["native/core",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["native/geolocation",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["native/geolocation/ngx",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["native/native",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"dependencies.html":{}}}],["native/splash",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["native/status",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["nativegeocoder",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"dependencies.html":{}}}],["nativegeocoderoptions",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["nativegeocoderresult",{"_index":328,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["network",{"_index":568,"title":{},"body":{"injectables/UIToastService.html":{}}}],["new",{"_index":415,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["ngmodule",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{}}}],["night",{"_index":256,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["nstace",{"_index":543,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["null",{"_index":558,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["number",{"_index":360,"title":{},"body":{"injectables/GetLocationLatLonService.html":{},"injectables/TemperatureConverterService.html":{}}}],["obj",{"_index":343,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["obj.push(addressobj[key",{"_index":345,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["obj.reverse",{"_index":346,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["obj[val",{"_index":349,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["object",{"_index":313,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{}}}],["occurance",{"_index":207,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["oncomplete",{"_index":422,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["option",{"_index":572,"title":{},"body":{"injectables/UIToastService.html":{}}}],["optional",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["options",{"_index":303,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["out",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["overlapgraphforweatherpredictionservice",{"_index":93,"title":{"injectables/OverLapGraphForWeatherPredictionService.html":{}},"body":{"modules/AppModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{},"index.html":{}}}],["overview",{"_index":644,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":614,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["parameters",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["params",{"_index":502,"title":{},"body":{"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{}}}],["path",{"_index":150,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"modules/HomePageModule.html":{}}}],["pathmatch",{"_index":152,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["platform",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["plugin",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["pointbackgroundcolor",{"_index":480,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointbordercolor",{"_index":479,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointborderwidth",{"_index":482,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhitradius",{"_index":490,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhoverbackgroundcolor",{"_index":485,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhoverbordercolor",{"_index":486,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhoverborderwidth",{"_index":488,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointhoverradius",{"_index":484,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["pointradius",{"_index":489,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["position",{"_index":583,"title":{},"body":{"injectables/UIToastService.html":{}}}],["prediction.service",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["prediction.service.ts",{"_index":392,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["prediction.service.ts:30",{"_index":401,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["preloadallmodules",{"_index":146,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["preloadingstrategy",{"_index":159,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["presenttoast",{"_index":563,"title":{},"body":{"injectables/UIToastService.html":{}}}],["presenttoastwithoptions",{"_index":564,"title":{},"body":{"injectables/UIToastService.html":{}}}],["private",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/UIServiceServiceService.html":{}}}],["promise",{"_index":319,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["properties",{"_index":165,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["provide",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["providedin",{"_index":224,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["providers",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["public",{"_index":166,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["rain",{"_index":246,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["redirectto",{"_index":151,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["render",{"_index":204,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["repositoryservice",{"_index":94,"title":{"injectables/RepositoryService.html":{}},"body":{"modules/AppModule.html":{},"injectables/RepositoryService.html":{},"coverage.html":{},"index.html":{}}}],["reset",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}],["resp.coords.accuracy",{"_index":376,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["resp.coords.latitude",{"_index":372,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["resp.coords.longitude",{"_index":374,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["responsive",{"_index":453,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["result",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"routes.html":{}}}],["result[0].countrycode",{"_index":338,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["result[0].locality",{"_index":337,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["results",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"routes.html":{}}}],["return",{"_index":182,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{}}}],["returns",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["rgba(220,220,220,1",{"_index":487,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["rgba(75,192,192,1",{"_index":471,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["role",{"_index":594,"title":{},"body":{"injectables/UIToastService.html":{}}}],["root",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["root'},{'name",{"_index":68,"title":{},"body":{"components/AppComponent.html":{}}}],["round",{"_index":478,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["routereusestrategy",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["routermodule",{"_index":147,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/HomePageModule.html":{}}}],["routermodule.forchild",{"_index":390,"title":{},"body":{"modules/HomePageModule.html":{}}}],["routermodule.forroot(routes",{"_index":158,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":148,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"index.html":{},"routes.html":{}}}],["routing.module",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":145,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["run",{"_index":308,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["rxjs",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["saperated",{"_index":342,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["scales",{"_index":455,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["scattered",{"_index":241,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["screen",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["screen/ngx",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["selector",{"_index":16,"title":{},"body":{"components/AppComponent.html":{}}}],["server",{"_index":223,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["service",{"_index":179,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["service.service",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["service.service.ts",{"_index":525,"title":{},"body":{"injectables/UIServiceServiceService.html":{},"coverage.html":{}}}],["service.service.ts:13",{"_index":532,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["service.service.ts:24",{"_index":542,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["service.service.ts:29",{"_index":544,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["service.service.ts:35",{"_index":538,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["service.service.ts:49",{"_index":534,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["setinterval",{"_index":556,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["show",{"_index":402,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/UIServiceServiceService.html":{}}}],["showbackdrop",{"_index":550,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["shower",{"_index":245,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["showgrapg",{"_index":393,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["showgrapg(linechart",{"_index":394,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["showgrapg(linechart,linecanvas,mdate,mdatetemp,label,color,yaxismin,yaxismax",{"_index":414,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["showloading",{"_index":529,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["showloading(message",{"_index":537,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["side",{"_index":586,"title":{},"body":{"injectables/UIToastService.html":{}}}],["sky",{"_index":235,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["snow",{"_index":249,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"modules/HomePageModule.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/TemperatureConverterService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{}}}],["spangaps",{"_index":491,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["splashscreen",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["src/app/app",{"_index":144,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:17",{"_index":31,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:35",{"_index":38,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/buisness",{"_index":162,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"coverage.html":{}}}],["src/app/get",{"_index":300,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"coverage.html":{}}}],["src/app/home/home.module.ts",{"_index":384,"title":{},"body":{"modules/HomePageModule.html":{}}}],["src/app/home/home.page.ts",{"_index":607,"title":{},"body":{"coverage.html":{}}}],["src/app/over",{"_index":391,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["src/app/repository.service.ts",{"_index":492,"title":{},"body":{"injectables/RepositoryService.html":{},"coverage.html":{}}}],["src/app/repository.service.ts:12",{"_index":498,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["src/app/repository.service.ts:19",{"_index":506,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["src/app/repository.service.ts:27",{"_index":505,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["src/app/repository.service.ts:45",{"_index":500,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["src/app/temperature",{"_index":515,"title":{},"body":{"injectables/TemperatureConverterService.html":{},"coverage.html":{}}}],["src/app/uiservice",{"_index":524,"title":{},"body":{"injectables/UIServiceServiceService.html":{},"coverage.html":{}}}],["src/app/uitoast.service.ts",{"_index":561,"title":{},"body":{"injectables/UIToastService.html":{},"coverage.html":{}}}],["src/app/uitoast.service.ts:14",{"_index":566,"title":{},"body":{"injectables/UIToastService.html":{}}}],["src/app/uitoast.service.ts:21",{"_index":573,"title":{},"body":{"injectables/UIToastService.html":{}}}],["src/app/uitoast.service.ts:26",{"_index":567,"title":{},"body":{"injectables/UIToastService.html":{}}}],["src/app/uitoast.service.ts:38",{"_index":571,"title":{},"body":{"injectables/UIToastService.html":{}}}],["star",{"_index":587,"title":{},"body":{"injectables/UIToastService.html":{}}}],["start",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"injectables/UIToastService.html":{}}}],["statements",{"_index":600,"title":{},"body":{"coverage.html":{}}}],["statusbar",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["store",{"_index":320,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["string",{"_index":209,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{}}}],["string,icon:string",{"_index":231,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AppComponent.html":{}}}],["styleurls",{"_index":18,"title":{},"body":{"components/AppComponent.html":{}}}],["supplies",{"_index":12,"title":{},"body":{"components/AppComponent.html":{}}}],["support",{"_index":646,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":647,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":232,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["table",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":358,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["temp",{"_index":287,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["temperature",{"_index":178,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/TemperatureConverterService.html":{}}}],["temperatureconverterservice",{"_index":95,"title":{"injectables/TemperatureConverterService.html":{}},"body":{"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/TemperatureConverterService.html":{},"coverage.html":{},"index.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{}}}],["templateurl",{"_index":20,"title":{},"body":{"components/AppComponent.html":{}}}],["temprature",{"_index":408,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["text",{"_index":588,"title":{},"body":{"injectables/UIToastService.html":{}}}],["then((result",{"_index":335,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["then(load",{"_index":551,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.chart",{"_index":425,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["this.data.datasets.foreach(function",{"_index":437,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["this.geoaccuracy",{"_index":375,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.geoaddress",{"_index":336,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{}}}],["this.geolatitude",{"_index":371,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.geolatitude).tostring",{"_index":379,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.geolocation.getcurrentposition().then((resp",{"_index":370,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.geolongitude",{"_index":373,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.geolongitude).tostring",{"_index":380,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.http.get('http://api.openweathermap.org/data/2.5//weather?q='+params+'&appid=d994b85acc1528b1a51fb0273b7ca7c4').topromise().then(data",{"_index":514,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["this.http.get('http://api.openweathermap.org/data/2.5/forecast?q='+params+'&appid=d994b85acc1528b1a51fb0273b7ca7c4').topromise().then(data",{"_index":509,"title":{},"body":{"injectables/RepositoryService.html":{}}}],["this.initializeapp",{"_index":56,"title":{},"body":{"components/AppComponent.html":{}}}],["this.loader",{"_index":552,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.loader.dismiss().then",{"_index":557,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.loaderloading",{"_index":548,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.loading.create",{"_index":549,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["this.mtemperatureconverterservice.kelvintocelcius(mlow",{"_index":296,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["this.nativegeocoder.reversegeocode(latitude",{"_index":333,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["this.options",{"_index":334,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["this.platform.is('android",{"_index":368,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.platform.is('ios",{"_index":369,"title":{},"body":{"injectables/GetLocationLatLonService.html":{}}}],["this.platform.ready().then",{"_index":57,"title":{},"body":{"components/AppComponent.html":{}}}],["this.splashscreen.hide",{"_index":59,"title":{},"body":{"components/AppComponent.html":{}}}],["this.statusbar.styledefault",{"_index":58,"title":{},"body":{"components/AppComponent.html":{}}}],["this.toastcontroller.create",{"_index":574,"title":{},"body":{"injectables/UIToastService.html":{}}}],["this.url+icon+\".png",{"_index":261,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["thunderstorm",{"_index":253,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["ticks",{"_index":459,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["toast",{"_index":570,"title":{},"body":{"injectables/UIToastService.html":{}}}],["toast.present",{"_index":579,"title":{},"body":{"injectables/UIToastService.html":{}}}],["toastcontroller",{"_index":562,"title":{},"body":{"injectables/UIToastService.html":{}}}],["tooltips",{"_index":451,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["top",{"_index":584,"title":{},"body":{"injectables/UIToastService.html":{}}}],["totlreturn",{"_index":284,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["totlreturn.push(mdatetempmax",{"_index":297,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["totlreturn.push(mdatetempmin",{"_index":298,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["totlreturn.push(mfivedaysweathericon",{"_index":299,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AppComponent.html":{}}}],["true",{"_index":322,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/UIServiceServiceService.html":{}}}],["tslib",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/GetLocationLatLonService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{},"injectables/UIToastService.html":{},"coverage.html":{}}}],["ui",{"_index":540,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["uiloading",{"_index":546,"title":{},"body":{"injectables/UIServiceServiceService.html":{}}}],["uiserviceserviceservice",{"_index":96,"title":{"injectables/UIServiceServiceService.html":{}},"body":{"modules/AppModule.html":{},"injectables/UIServiceServiceService.html":{},"coverage.html":{},"index.html":{}}}],["uitoastservice",{"_index":97,"title":{"injectables/UIToastService.html":{}},"body":{"modules/AppModule.html":{},"injectables/UIToastService.html":{},"coverage.html":{},"index.html":{}}}],["url",{"_index":168,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/RepositoryService.html":{}}}],["url:string=\"http://openweathermap.org/img/w",{"_index":230,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["useclass",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["uselocale",{"_index":321,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["val",{"_index":347,"title":{},"body":{"injectables/GetCityNameGeocoderService.html":{}}}],["value",{"_index":202,"title":{},"body":{"injectables/BuisnessLogicService.html":{},"injectables/GetCityNameGeocoderService.html":{},"injectables/RepositoryService.html":{},"injectables/UIServiceServiceService.html":{}}}],["var",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"injectables/BuisnessLogicService.html":{}}}],["void",{"_index":43,"title":{},"body":{"components/AppComponent.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"injectables/UIServiceServiceService.html":{}}}],["weather",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"injectables/BuisnessLogicService.html":{},"injectables/OverLapGraphForWeatherPredictionService.html":{},"coverage.html":{}}}],["week",{"_index":195,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["width",{"_index":578,"title":{},"body":{"injectables/UIToastService.html":{}}}],["xaxes",{"_index":456,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["yaxes",{"_index":460,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["yaxismax",{"_index":400,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["yaxismin",{"_index":399,"title":{},"body":{"injectables/OverLapGraphForWeatherPredictionService.html":{}}}],["yyyu",{"_index":200,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["yyyy",{"_index":188,"title":{},"body":{"injectables/BuisnessLogicService.html":{}}}],["zone.js",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/HomePageModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        Supplies configuration metadata for an App component.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                app.component.scss\n            \n\n\n\n            \n                templateUrl\n                app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                initializeApp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(platform: Platform, splashScreen: SplashScreen, statusBar: StatusBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor of AppComponent.ts\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        platform\n                                                  \n                                                        \n                                                                    Platform\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        splashScreen\n                                                  \n                                                        \n                                                                    SplashScreen\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusBar\n                                                  \n                                                        \n                                                                    StatusBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            initializeApp\n                        \n                        \n                    \n                \n            \n            \n                \ninitializeApp()\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:35\n                \n            \n\n\n            \n                \n                    Initialize Application at beginning\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\nimport { Platform } from '@ionic/angular';\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\n/**\n * Supplies configuration metadata for an App component.\n*/\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss']\n})\n/**\n * Components of platform, splashScreen, statusBar\n*/\nexport class AppComponent {\n/**\n * Constructor of AppComponent.ts\n * @constructor for App Component\n * @param {Platform} platform\n * @param {SplashScreen} splashScreen\n * @param {StatusBar} statusBar\n*/\n  constructor(\n    private platform: Platform,\n    private splashScreen: SplashScreen,\n    private statusBar: StatusBar\n  ) {\n    this.initializeApp();\n  }\n/**\n * Initialize Application at beginning\n*/\n  initializeApp() {\n    this.platform.ready().then(() => {\n      this.statusBar.styleDefault();\n      this.splashScreen.hide();\n    });\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        Start Menu\n      \n    \n    \n      \n        \n      \n    \n  \n  \n\n\n    \n\n    \n                \n                    app.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Start Menu                                          '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'HomePage', 'selector': 'app-home'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nBuisnessLogicService\n\nBuisnessLogicService\n\nAppModule -->\n\nBuisnessLogicService->AppModule\n\n\n\n\n\nGetCityNameGeocoderService\n\nGetCityNameGeocoderService\n\nAppModule -->\n\nGetCityNameGeocoderService->AppModule\n\n\n\n\n\nGetLocationLatLonService\n\nGetLocationLatLonService\n\nAppModule -->\n\nGetLocationLatLonService->AppModule\n\n\n\n\n\nOverLapGraphForWeatherPredictionService\n\nOverLapGraphForWeatherPredictionService\n\nAppModule -->\n\nOverLapGraphForWeatherPredictionService->AppModule\n\n\n\n\n\nRepositoryService\n\nRepositoryService\n\nAppModule -->\n\nRepositoryService->AppModule\n\n\n\n\n\nTemperatureConverterService\n\nTemperatureConverterService\n\nAppModule -->\n\nTemperatureConverterService->AppModule\n\n\n\n\n\nUIServiceServiceService\n\nUIServiceServiceService\n\nAppModule -->\n\nUIServiceServiceService->AppModule\n\n\n\n\n\nUIToastService\n\nUIToastService\n\nAppModule -->\n\nUIToastService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            BuisnessLogicService\n                        \n                        \n                            GetCityNameGeocoderService\n                        \n                        \n                            GetLocationLatLonService\n                        \n                        \n                            OverLapGraphForWeatherPredictionService\n                        \n                        \n                            RepositoryService\n                        \n                        \n                            TemperatureConverterService\n                        \n                        \n                            UIServiceServiceService\n                        \n                        \n                            UIToastService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\n\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { RepositoryService } from '../app/repository.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BuisnessLogicService } from '../app/buisness-logic.service';\nimport { UIServiceServiceService } from '../app/uiservice-service.service';\nimport { UIToastService } from '../app/uitoast.service';\nimport { TemperatureConverterService } from '../app/temperature-converter.service';\nimport { OverLapGraphForWeatherPredictionService } from '../app/over-lap-graph-for-weather-prediction.service';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { NativeGeocoder, NativeGeocoderOptions } from '@ionic-native/native-geocoder/ngx';\nimport { GetLocationLatLonService } from './get-location-lat-lon.service';\nimport { GetCityNameGeocoderService } from './get-city-name-geocoder.service';\n\n@NgModule({\n  declarations: [AppComponent],\n  entryComponents: [],\n  imports: [BrowserModule, IonicModule.forRoot(), AppRoutingModule,HttpClientModule],\n  providers: [\n    StatusBar,\n    SplashScreen,\n    Geolocation,\n    NativeGeocoder,    \n    RepositoryService,\n    UIServiceServiceService,\n    UIToastService,\n    BuisnessLogicService,\n    TemperatureConverterService,\n    GetLocationLatLonService,\n    GetCityNameGeocoderService,\n    OverLapGraphForWeatherPredictionService,\n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'home', pathMatch: 'full' },\n  { path: 'home', loadChildren: () => \"import('./home/home.module').then( m => m.HomePageModule)\"},\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BuisnessLogicService.html":{"url":"injectables/BuisnessLogicService.html","title":"injectable - BuisnessLogicService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  BuisnessLogicService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/buisness-logic.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                mTemperatureConverterService\n                            \n                            \n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                formatDateForDateAndMonth\n                            \n                            \n                                    Public\n                                getDayOfWeek\n                            \n                            \n                                    Public\n                                getFiveDaysValueInFormat\n                            \n                            \n                                    Public\n                                getNoOfDays\n                            \n                            \n                                    Public\n                                getWeatherBannerIconFromAssetFolder\n                            \n                            \n                                    Public\n                                getWeatherForcastIconFromAssetFolder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mTemperatureConverterService: TemperatureConverterService)\n                    \n                \n                        \n                            \n                                Defined in src/app/buisness-logic.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor of BuisnessLogicService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        mTemperatureConverterService\n                                                  \n                                                        \n                                                                        TemperatureConverterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Convert Temperature Service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            formatDateForDateAndMonth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    formatDateForDateAndMonth(mDate)\n                \n            \n\n\n            \n                \n                    Defined in src/app/buisness-logic.service.ts:227\n                \n            \n\n\n            \n                \n                    Return as 'DD Month Name' format \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mDate\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Dates in YYYY-MM-DD format\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        Formated date and month\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDayOfWeek\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDayOfWeek(mDate)\n                \n            \n\n\n            \n                \n                    Defined in src/app/buisness-logic.service.ts:241\n                \n            \n\n\n            \n                \n                    Return Day of Week\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mDate\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Dates in YYYY-MM-DD format\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        Day of Week\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getFiveDaysValueInFormat\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFiveDaysValueInFormat(mDate, mFiveDaysValue)\n                \n            \n\n\n            \n                \n                    Defined in src/app/buisness-logic.service.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mDate\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Days in YYYU-MM-DD format\n\n                                    \n                                \n                                \n                                    mFiveDaysValue\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Json value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        Get Five days value to render graph\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getNoOfDays\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNoOfDays(mFiveDaysValue)\n                \n            \n\n\n            \n                \n                    Defined in src/app/buisness-logic.service.ts:213\n                \n            \n\n\n            \n                \n                    Get Occurance of date\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mFiveDaysValue\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Json value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        Occurance of date\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getWeatherBannerIconFromAssetFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeatherBannerIconFromAssetFolder(mWeatherType: string, icon: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/buisness-logic.service.ts:29\n                \n            \n\n\n            \n                \n                    Get image path from weather description string \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mWeatherType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String\n\n                                    \n                                \n                                \n                                    icon\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Image local path or image URL path\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getWeatherForcastIconFromAssetFolder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeatherForcastIconFromAssetFolder(mWeatherType: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/buisness-logic.service.ts:100\n                \n            \n\n\n            \n                \n                    Get image path from weather description string \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mWeatherType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Image local path \n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            mTemperatureConverterService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TemperatureConverterService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/buisness-logic.service.ts:18\n                            \n                        \n\n                \n                    \n                        Convert Temperature Service\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            url\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"http://openweathermap.org/img/w/\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/buisness-logic.service.ts:22\n                            \n                        \n\n                \n                    \n                        Declare url for image fetch from server\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { TemperatureConverterService } from '../app/temperature-converter.service';\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Buisness Logic for HomePage.ts\n*/\nexport class BuisnessLogicService {\n\n /**\n * Constructor of BuisnessLogicService\n * @param {TemperatureConverterService} mTemperatureConverterService Convert Temperature Service\n */\n  constructor(public mTemperatureConverterService:TemperatureConverterService) { }\n/**\n * Declare url for image fetch from server\n */\n  url:string=\"http://openweathermap.org/img/w/\";\n  /**\n  * Get image path from weather description string \n  * @param mWeatherType String\n  * @param icon\n  * @returns Image local path or image URL path\n  */\n  public getWeatherBannerIconFromAssetFolder(mWeatherType: string,icon:string): string {\n\n    switch (mWeatherType) {\n      case \"clear sky\": {\n        return \"../../assets/images/clear_sky.png\";\n        break;\n      }\n\n      case \"few clouds\": {\n        return \"../../assets/images/few_clouds.png\";\n        break;\n      }\n\n      case \"scattered clouds\": {\n        return \"../../assets/images/scattered_clouds.png\";\n        break;\n      }\n\n      case \"broken clouds\": {\n        return \"../../assets/images/broken_clouds.png\";\n        break;\n      }\n      case \"shower rain\": {\n        return \"../../assets/images/shower_rain.png\";\n        break;\n      }\n      case \"rain\": {\n        return \"../../assets/images/rain.png\";\n        break;\n      }\n      case \"snow\": {\n        return \"../../assets/images/snow.png\";\n        break;\n      }\n\n      case \"mist\": {\n        return \"../../assets/images/mist.png\";\n        break;\n      }\n      case \"thunderstorm\": {\n        return \"../../assets/images/thunderstorm.png\";\n        break;\n      }\n      case \"cleat sky night\": {\n        return \"../../assets/images/cleat_sky_night.png\";\n        break;\n      }\n      case \"few clouds night\": {\n        return \"../../assets/images/few-Clouds_night.png\";\n        break;\n      }\n      case \"rain night\": {\n        return \"../../assets/images/rain_night.png\";\n        break;\n      }\n\n\n      default: {\n        return this.url+icon+\".png\";\n        break;\n      }\n    }\n\n  }\n\n\n   /**\n  * Get image path from weather description string \n  * @param mWeatherType \n  * @returns Image local path \n  */\n public getWeatherForcastIconFromAssetFolder(mWeatherType: string): string {\n\n  switch (mWeatherType) {\n   \n    case \"01d\": {\n      return \"../../assets/images/01d.png\";\n      break;\n    }\n\n    case \"02d\": {\n      return \"../../assets/images/02d.png\";\n      break;\n    }\n    case \"03d\": {\n      return \"../../assets/images/03d.png\";\n      break;\n    }\n\n    case \"04d\": {\n      return \"../../assets/images/04d.png\";\n      break;\n    }\n    case \"09d\": {\n      return \"../../assets/images/09d.png\";\n      break;\n    }\n    case \"10d\": {\n      return \"../../assets/images/10d.png\";\n      break;\n    }\n    case \"11d\": {\n      return \"../../assets/images/11d.png\";\n      break;\n    }\n    case \"13d\": {\n      return \"../../assets/images/13d.png\";\n      break;\n    }\n    case \"50d\": {\n      return \"../../assets/images/50d.png\";\n      break;\n    }\n    default: {\n      return \"../../assets/images/01d.png\";\n      break;\n    }\n  }\n\n}\n/**\n * \n * @param mDate Days in YYYU-MM-DD format\n * @param mFiveDaysValue Json value\n * @returns Get Five days value to render graph\n */\npublic getFiveDaysValueInFormat(mDate,mFiveDaysValue){\n  var mDateTempMax = [];\n  var mDateTempMin = [];\n  var mFiveDaysWeatherIcon=[];\n\n  var totlReturn=[];\n        /////// getHigh Log Temp Of Each Day /////\n        for (let i = 0; i  JSON.parse(mFiveDaysValue).list[j].main.temp_min) {\n                  mLow = JSON.parse(mFiveDaysValue).list[j].main.temp_min;\n                }\n              }\n\n            }\n\n          }\n\n          mDateTempMax.push(Math.floor(this.mTemperatureConverterService.kelvinToCelcius(mHeigh)));\n          mDateTempMin.push(Math.floor(this.mTemperatureConverterService.kelvinToCelcius(mLow)));\n          mFiveDaysWeatherIcon.push(mWeatherIcon);\n\n          // console.log(this.mTemperatureConverterService.kelvinToCelcius(mHeigh)\n          //   + \"     \" + this.mTemperatureConverterService.kelvinToCelcius(mLow));\n\n\n        }\n\n        totlReturn.push(mDateTempMax);\n        totlReturn.push(mDateTempMin);\n        totlReturn.push(mFiveDaysWeatherIcon);\n\n        return totlReturn;\n}\n/**\n * Get Occurance of date\n * @param mFiveDaysValue Json value\n *  @returns Occurance of date\n */\npublic getNoOfDays(mFiveDaysValue){\n  var mDate = [];\n  for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetCityNameGeocoderService.html":{"url":"injectables/GetCityNameGeocoderService.html","title":"injectable - GetCityNameGeocoderService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GetCityNameGeocoderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/get-city-name-geocoder.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                geoAddress\n                            \n                            \n                                options\n                            \n                            \n                                    Public\n                                platform\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                generateAddress\n                            \n                            \n                                    Async\n                                getGeolocation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(platform: Platform, geolocation: Geolocation, nativeGeocoder: NativeGeocoder)\n                    \n                \n                        \n                            \n                                Defined in src/app/get-city-name-geocoder.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        platform\n                                                  \n                                                        \n                                                                    Platform\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                To get platform application run on\n\n                                                        \n                                                \n                                                \n                                                        geolocation\n                                                  \n                                                        \n                                                                    Geolocation\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Geolocation service\n\n                                                        \n                                                \n                                                \n                                                        nativeGeocoder\n                                                  \n                                                        \n                                                                    NativeGeocoder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                NativeGeocoder service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            generateAddress\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateAddress(addressObj)\n                \n            \n\n\n            \n                \n                    Defined in src/app/get-city-name-geocoder.service.ts:64\n                \n            \n\n\n            \n                \n                    Return Address\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    addressObj\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Json Object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getGeolocation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getGeolocation(latitude, longitude)\n                \n            \n\n\n            \n                \n                    Defined in src/app/get-city-name-geocoder.service.ts:41\n                \n            \n\n\n            \n                \n                    Get Address\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    latitude\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geo latitude\n\n                                    \n                                \n                                \n                                    longitude\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geo longitude\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            geoAddress\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-city-name-geocoder.service.ts:19\n                            \n                        \n\n                \n                    \n                        Store address\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     NativeGeocoderOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n      useLocale: true,\n      maxResults: 5\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-city-name-geocoder.service.ts:32\n                            \n                        \n\n                \n                    \n                        Create NativeGeocoderOptions \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            platform\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Platform\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-city-name-geocoder.service.ts:26\n                            \n                        \n\n                \n                    \n                        To get platform application run on\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { NativeGeocoder, NativeGeocoderResult, NativeGeocoderOptions } from '@ionic-native/native-geocoder/ngx';\n\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service for Get City information\n*/\nexport class GetCityNameGeocoderService {\n/**\n * Store address\n */\n  geoAddress:string;\n/**\n * \n * @param platform To get platform application run on\n * @param geolocation Geolocation service\n * @param nativeGeocoder NativeGeocoder service\n */\n  constructor(public platform: Platform,\n    private geolocation: Geolocation,\n    private nativeGeocoder: NativeGeocoder) { }\n/**\n * Create NativeGeocoderOptions \n */\n    options: NativeGeocoderOptions = {\n      useLocale: true,\n      maxResults: 5\n    };\n/**\n * Get Address\n * @param latitude Geo latitude\n * @param longitude Geo longitude\n */\n    async getGeolocation(latitude,longitude):Promise {     \n   \n        await this.nativeGeocoder.reverseGeocode(latitude, longitude, this.options)\n        .then((result: NativeGeocoderResult[]) => {\n          this.geoAddress = result[0].locality+','+\n          result[0].countryCode;         \n        })\n        .catch((error: any) => {\n          this.geoAddress ='Error'; \n        });\n    \n\n  \n         return this.geoAddress;\n        \n      }\n\n\n  /**\n   * Return Address\n   * @param addressObj Json Object\n   */\n  //Return Comma saperated address\n  public generateAddress(addressObj){\n    let obj = [];\n    let address = \"\";\n    for (let key in addressObj) {\n      obj.push(addressObj[key]);\n    }\n    obj.reverse();\n    for (let val in obj) {\n      if(obj[val].length)\n      address += val+' '+obj[val]+', ';\n    }\n  return address.slice(0, -2);\n}\n        \n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetLocationLatLonService.html":{"url":"injectables/GetLocationLatLonService.html","title":"injectable - GetLocationLatLonService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GetLocationLatLonService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/get-location-lat-lon.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                geoAccuracy\n                            \n                            \n                                geoLatitude\n                            \n                            \n                                geoLongitude\n                            \n                            \n                                    Public\n                                platform\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getGeolocation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(platform: Platform, geolocation: Geolocation, nativeGeocoder: NativeGeocoder)\n                    \n                \n                        \n                            \n                                Defined in src/app/get-location-lat-lon.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        platform\n                                                  \n                                                        \n                                                                    Platform\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                To get platform application run on\n\n                                                        \n                                                \n                                                \n                                                        geolocation\n                                                  \n                                                        \n                                                                    Geolocation\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Geolocation service\n\n                                                        \n                                                \n                                                \n                                                        nativeGeocoder\n                                                  \n                                                        \n                                                                    NativeGeocoder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                NativeGeocoder service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getGeolocation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getGeolocation()\n                \n            \n\n\n            \n                \n                    Defined in src/app/get-location-lat-lon.service.ts:44\n                \n            \n\n\n            \n                \n                    Async task for get platform and get lat,lon\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            geoAccuracy\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-location-lat-lon.service.ts:27\n                            \n                        \n\n                \n                    \n                        Geo accuracy\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            geoLatitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-location-lat-lon.service.ts:19\n                            \n                        \n\n                \n                    \n                        Geo latitude\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            geoLongitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-location-lat-lon.service.ts:23\n                            \n                        \n\n                \n                    \n                        Geo longitude\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            platform\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Platform\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/get-location-lat-lon.service.ts:36\n                            \n                        \n\n                \n                    \n                        To get platform application run on\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { NativeGeocoder, NativeGeocoderResult, NativeGeocoderOptions } from '@ionic-native/native-geocoder/ngx';\n\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service for Get Lat and Lon\n*/\nexport class GetLocationLatLonService {\n  /**\n   * Geo latitude\n   */\n  geoLatitude: number;\n  /**\n   * Geo longitude\n   */\n  geoLongitude: number;\n  /**\n   * Geo accuracy\n   */\n  geoAccuracy:number;\n\n  /**\n   * @constructor GetLocationLatLonService\n   * @param platform To get platform application run on\n   * @param geolocation Geolocation service\n   * @param nativeGeocoder NativeGeocoder service\n   */\n\n  constructor(public platform: Platform,\n    private geolocation: Geolocation,\n    private nativeGeocoder: NativeGeocoder) { }\n\n    /**\n     * Async task for get platform and get lat,lon\n     * @returns Promise\n     */\n   async getGeolocation():Promise {\n    if (this.platform.is('android') || this.platform.is('ios')) {\n      await this.geolocation.getCurrentPosition().then((resp) => {\n        this.geoLatitude = resp.coords.latitude;\n        this.geoLongitude = resp.coords.longitude; \n        this.geoAccuracy = resp.coords.accuracy;       \n       }).catch((error) => {\n       // this.geoAddress ='Error getting location'+ JSON.stringify(error);  \n       return  'Error';\n       });\n      }\n      else{\n        return 'Error';\n      }\n\n       return (this.geoLatitude).toString()+\"---\"+(this.geoLongitude).toString();\n      \n    }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomePageModule.html":{"url":"modules/HomePageModule.html","title":"module - HomePageModule","body":"\n                   \n\n\n\n\n    Modules\n    HomePageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HomePageModule\n\n\n\ncluster_HomePageModule_declarations\n\n\n\n\nHomePage\n\nHomePage\n\n\n\nHomePageModule\n\nHomePageModule\n\nHomePageModule -->\n\nHomePage->HomePageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/home/home.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            HomePage\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { HomePage } from './home.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        component: HomePage\n      }\n    ])\n  ],\n  declarations: [HomePage]\n})\nexport class HomePageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OverLapGraphForWeatherPredictionService.html":{"url":"injectables/OverLapGraphForWeatherPredictionService.html","title":"injectable - OverLapGraphForWeatherPredictionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OverLapGraphForWeatherPredictionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/over-lap-graph-for-weather-prediction.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                showGrapg\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            showGrapg\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showGrapg(lineChart, lineCanvas, mDate, mDateTemp, label, color, yAxisMin, yAxisMax)\n                \n            \n\n\n            \n                \n                    Defined in src/app/over-lap-graph-for-weather-prediction.service.ts:30\n                \n            \n\n\n            \n                \n                    Show Weather Graph\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    lineChart\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Chart object\n\n                                    \n                                \n                                \n                                    lineCanvas\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Canvas object\n\n                                    \n                                \n                                \n                                    mDate\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Date array\n\n                                    \n                                \n                                \n                                    mDateTemp\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Minumun temprature\n\n                                    \n                                \n                                \n                                    label\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        For hoover\n\n                                    \n                                \n                                \n                                    color\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Fill color of graph\n\n                                    \n                                \n                                \n                                    yAxisMin\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Minimum temprature of graph\n\n                                    \n                                \n                                \n                                    yAxisMax\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Minimum temprature of graph\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Chart } from 'chart.js';\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service for Graph\n*/\nexport class OverLapGraphForWeatherPredictionService {\n\n/**\n * @ignore\n */\n  constructor() { }\n\n/**\n * Show Weather Graph\n * @param {Chart} lineChart Chart object\n * @param lineCanvas Canvas object\n * @param mDate Date array\n * @param mDateTemp Minumun temprature\n * @param label For hoover\n * @param color Fill color of graph\n * @param yAxisMin Minimum temprature of graph\n * @param yAxisMax Minimum temprature of graph\n */\n  public showGrapg(lineChart,lineCanvas,mDate,mDateTemp,label,color,yAxisMin,yAxisMax) {\n    lineChart = new Chart(lineCanvas.nativeElement,\n      {\n        options: {\n          legend: {\n            display: false\n          },\n          hover: {\n            animationDuration: 0\n          },\n          animation: {\n            onComplete: function () {\n              const chartInstance = this.chart,\n                ctx = chartInstance.ctx;\n\n              ctx.font = Chart.helpers.fontString(\n                8,\n                Chart.defaults.global.defaultFontStyle,\n                Chart.defaults.global.defaultFontFamily\n              );\n              ctx.textAlign = \"center\";\n              ctx.textBaseline = \"bottom\";\n             \n            \n              this.data.datasets.forEach(function (dataset, i) {\n                const meta = chartInstance.controller.getDatasetMeta(i);\n                meta.data.forEach(function (bar, index) {\n                  const data = dataset.data[index];\n                  \n                  if(index!=5)\n                  ctx.fillText(data, bar._model.x +10, bar._model.y - 2);\n                  else\n                  ctx.fillText(data, bar._model.x -6, bar._model.y - 2);\n                });\n              });\n            }\n          },\n          tooltips: {\n            enabled: true\n          },\n          responsive: true, \n          maintainAspectRatio: false,\n          scales: {\n            xAxes: [\n              {\n                display: false,\n                gridLines: {\n                  drawOnChartArea: false\n                },\n                ticks: {\n                  display: false\n                }\n              }\n            ],\n            yAxes: [\n              {\n                display: true,\n                gridLines: {\n                  drawOnChartArea: false,\n                  display: false\n                },\n                ticks: {\n                  // beginAtZero: true,\n                  min: yAxisMin,\n                  max: yAxisMax,\n                  display: false\n                }\n              }\n            ]\n          }\n        },\n        type: 'line',\n        data: {\n          labels: mDate,\n          datasets: [\n\n            {\n              label: label,\n              fill: true,\n              lineTension: 0.1,\n              backgroundColor: color,\n              borderColor: 'rgba(75,192,192,1)',\n              borderCapStyle: 'butt',\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: 'round',\n              pointBorderColor: 'rgba(75,192,192,1)',\n              pointBackgroundColor: '#fff',\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n              pointHoverBorderColor: 'rgba(220,220,220,1)',\n              pointHoverBorderWidth: 1,\n              pointRadius: 1,\n              pointHitRadius: 10,\n              data: mDateTemp,\n              spanGaps: false,\n            }\n\n          ]\n        }\n      });\n\n\n\n\n\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepositoryService.html":{"url":"injectables/RepositoryService.html","title":"injectable - RepositoryService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RepositoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/repository.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                http\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getWeatherValueCurrent\n                            \n                            \n                                    Async\n                                getWeatherValueFiveDays\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/repository.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor description\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                From angular/common/http\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getWeatherValueCurrent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeatherValueCurrent(params: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/repository.service.ts:45\n                \n            \n\n\n            \n                \n                    Get Current value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        CityName\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        JSON Object or 'Error'\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getWeatherValueFiveDays\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeatherValueFiveDays(params: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/repository.service.ts:27\n                \n            \n\n\n            \n                \n                    Get five days Value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        CityName\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        JSON Object or 'Error'\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            http\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HttpClient\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/repository.service.ts:19\n                            \n                        \n\n                \n                    \n                        From angular/common/http\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service for Get JSON from URL\n*/\nexport class RepositoryService {  \n  \n\n /**\n * Constructor description\n * @param {HttpClient} http From angular/common/http\n */\n  constructor(public http: HttpClient) { }\n\n\n/**\n * Get five days Value\n * @param params CityName\n * @returns JSON Object or 'Error'\n */\n  async getWeatherValueFiveDays(params:string) {  \n\n    const mValue=await this.http.get('http://api.openweathermap.org/data/2.5/forecast?q='+params+'&APPID=d994b85acc1528b1a51fb0273b7ca7c4').toPromise().then(data => {      \n      return data\n    }, err => {\n      console.log(err);\n      return \"Error\"\n    });\n\n    return JSON.stringify(mValue)   \n  \n  }\n\n  /**\n   * Get Current value\n   * @param params CityName\n   * @returns JSON Object or 'Error'\n   */\n  async getWeatherValueCurrent(params:string) {  \n\n    const mValue=await this.http.get('http://api.openweathermap.org/data/2.5//weather?q='+params+'&APPID=d994b85acc1528b1a51fb0273b7ca7c4').toPromise().then(data => {      \n      return data\n    }, err => {\n      console.log(err);\n      return \"Error\"\n    });\n\n    return JSON.stringify(mValue)   \n  \n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TemperatureConverterService.html":{"url":"injectables/TemperatureConverterService.html","title":"injectable - TemperatureConverterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TemperatureConverterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/temperature-converter.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                kelvinToCelcius\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            kelvinToCelcius\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    kelvinToCelcius(params)\n                \n            \n\n\n            \n                \n                    Defined in src/app/temperature-converter.service.ts:22\n                \n            \n\n\n            \n                \n                    Convert from Kelvin to Celcius\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Kelvin temperature\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service for Temperature Converter\n*/\nexport class TemperatureConverterService {\n\n  /**\n   * @ignore\n   */\n  constructor() { }\n\n  /**\n   * Convert from Kelvin to Celcius\n   * @param params Kelvin temperature\n   */\n  public kelvinToCelcius(params){\n    return (params-273.15)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UIServiceServiceService.html":{"url":"injectables/UIServiceServiceService.html","title":"injectable - UIServiceServiceService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UIServiceServiceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/uiservice-service.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                loader\n                            \n                            \n                                    Private\n                                loaderLoading\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dismissLoading\n                            \n                            \n                                    Public\n                                showLoading\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loading: LoadingController)\n                    \n                \n                        \n                            \n                                Defined in src/app/uiservice-service.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor description\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        loading\n                                                  \n                                                        \n                                                                    LoadingController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                From ionic/angular\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            dismissLoading\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    dismissLoading()\n                \n            \n\n\n            \n                \n                    Defined in src/app/uiservice-service.service.ts:49\n                \n            \n\n\n            \n                \n                    Dismiss Loading Dialog\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            showLoading\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showLoading(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/uiservice-service.service.ts:35\n                \n            \n\n\n            \n                \n                    Show Loading Dialog\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        UI Loading Message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loader\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLIonLoadingElement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/uiservice-service.service.ts:24\n                            \n                        \n\n                \n                    \n                        Loader nstace create\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loaderLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/uiservice-service.service.ts:29\n                            \n                        \n\n                \n                    \n                        Continue show loading dialog\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { LoadingController } from '@ionic/angular';\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n\n/**\n * Service for UILoading\n*/\nexport class UIServiceServiceService {\n\n/**\n * Constructor description\n * @param {LoadingController} loading From ionic/angular\n */\n  constructor(private loading: LoadingController) { }\n\n/**\n * Loader nstace create\n */\n  private loader: HTMLIonLoadingElement;\n\n/**\n * Continue show loading dialog\n */\n  private loaderLoading = false;\n\n  /**\n   * Show Loading Dialog\n   * @param message UI Loading Message\n   */\n  public showLoading(message: string) {\n      this.loaderLoading = true;\n      this.loading.create({\n          message,\n          showBackdrop: true\n      }).then(load => {\n          this.loader = load;\n          load.present().then(() => { this.loaderLoading = false; });\n      });\n  }\n\n  /**\n   * Dismiss Loading Dialog\n   */\n  public dismissLoading() {\n      const interval = setInterval(() => {\n          if (this.loader || !this.loaderLoading) {\n              this.loader.dismiss().then(() => { /*this.loader = null; */clearInterval(interval)});\n          } else if (!this.loader && !this.loaderLoading) {\n              clearInterval(interval);\n          }\n      }, 500);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UIToastService.html":{"url":"injectables/UIToastService.html","title":"injectable - UIToastService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UIToastService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/uitoast.service.ts\n        \n\n            \n                Description\n            \n            \n                Inject to root of app\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toastController\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                presentToast\n                            \n                            \n                                    Public\n                                    Async\n                                presentToastWithOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(toastController: ToastController)\n                    \n                \n                        \n                            \n                                Defined in src/app/uitoast.service.ts:14\n                            \n                        \n\n                \n                    \n                            Constructor description\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        toastController\n                                                  \n                                                        \n                                                                    ToastController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                From ionic/angular\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            presentToast\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    presentToast()\n                \n            \n\n\n            \n                \n                    Defined in src/app/uitoast.service.ts:26\n                \n            \n\n\n            \n                \n                    Network issue Toast\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            presentToastWithOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    presentToastWithOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/uitoast.service.ts:38\n                \n            \n\n\n            \n                \n                    Toast With Option\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toastController\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ToastController\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/uitoast.service.ts:21\n                            \n                        \n\n                \n                    \n                        From ionic/angular\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ToastController } from '@ionic/angular';\n\n/**\n * Inject to root of app\n*/\n@Injectable({\n  providedIn: 'root'\n})\n\n/**\n * Service for Toast\n*/\nexport class UIToastService {\n  \n\n /**\n * Constructor description\n * @param {ToastController} toastController From ionic/angular\n */\n  constructor(public toastController: ToastController) { }\n\n/**\n* Network issue Toast\n*/\n  public async presentToast() {\n    const toast = await this.toastController.create({\n      message: 'Network issue ...',\n      duration: 1200,\n      cssClass:\"toast-width-class\"\n    });\n    toast.present();\n  }\n\n/**\n* Toast With Option\n*/\n  public async presentToastWithOptions() {\n    const toast = await this.toastController.create({\n      header: 'Toast header',\n      message: 'Click to Close',\n      position: 'top',\n      buttons: [\n        {\n          side: 'start',\n          icon: 'star',\n          text: 'Favorite',\n          handler: () => {\n            console.log('Favorite clicked');\n          }\n        }, {\n          text: 'Done',\n          role: 'cancel',\n          handler: () => {\n            console.log('Cancel clicked');\n          }\n        }\n      ]\n    });\n    toast.present();\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/buisness-logic.service.ts\n            \n            injectable\n            BuisnessLogicService\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/app/get-city-name-geocoder.service.ts\n            \n            injectable\n            GetCityNameGeocoderService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/app/get-location-lat-lon.service.ts\n            \n            injectable\n            GetLocationLatLonService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/app/home/home.page.ts\n            \n            component\n            HomePage\n            \n                85 %\n                (36/42)\n            \n        \n        \n            \n                \n                src/app/over-lap-graph-for-weather-prediction.service.ts\n            \n            injectable\n            OverLapGraphForWeatherPredictionService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/repository.service.ts\n            \n            injectable\n            RepositoryService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/temperature-converter.service.ts\n            \n            injectable\n            TemperatureConverterService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/uiservice-service.service.ts\n            \n            injectable\n            UIServiceServiceService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/uitoast.service.ts\n            \n            injectable\n            UIToastService\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/common : ~8.2.14\n        \n            @angular/core : ~8.2.14\n        \n            @angular/forms : ~8.2.14\n        \n            @angular/platform-browser : ~8.2.14\n        \n            @angular/platform-browser-dynamic : ~8.2.14\n        \n            @angular/router : ~8.2.14\n        \n            @capacitor/android : ^2.0.1\n        \n            @capacitor/core : 2.0.1\n        \n            @capacitor/ios : ^2.0.1\n        \n            @ionic-native/core : ^5.0.7\n        \n            @ionic-native/geolocation : ^5.24.0\n        \n            @ionic-native/native-geocoder : ^5.24.0\n        \n            @ionic-native/splash-screen : ^5.0.0\n        \n            @ionic-native/status-bar : ^5.0.0\n        \n            @ionic/angular : ^5.0.7\n        \n            chart.js : ^2.9.3\n        \n            cordova-android : 8.1.0\n        \n            cordova-plugin-geolocation : ^4.0.2\n        \n            cordova-plugin-nativegeocoder : ^3.4.0\n        \n            core-js : ^2.5.4\n        \n            rxjs : ~6.5.1\n        \n            tslib : ^1.9.0\n        \n            zone.js : ~0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_HomePageModule\n\n\n\ncluster_HomePageModule_declarations\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nBuisnessLogicService\n\nBuisnessLogicService\n\nAppModule -->\n\nBuisnessLogicService->AppModule\n\n\n\n\n\nGetCityNameGeocoderService\n\nGetCityNameGeocoderService\n\nAppModule -->\n\nGetCityNameGeocoderService->AppModule\n\n\n\n\n\nGetLocationLatLonService\n\nGetLocationLatLonService\n\nAppModule -->\n\nGetLocationLatLonService->AppModule\n\n\n\n\n\nOverLapGraphForWeatherPredictionService\n\nOverLapGraphForWeatherPredictionService\n\nAppModule -->\n\nOverLapGraphForWeatherPredictionService->AppModule\n\n\n\n\n\nRepositoryService\n\nRepositoryService\n\nAppModule -->\n\nRepositoryService->AppModule\n\n\n\n\n\nTemperatureConverterService\n\nTemperatureConverterService\n\nAppModule -->\n\nTemperatureConverterService->AppModule\n\n\n\n\n\nUIServiceServiceService\n\nUIServiceServiceService\n\nAppModule -->\n\nUIServiceServiceService->AppModule\n\n\n\n\n\nUIToastService\n\nUIToastService\n\nAppModule -->\n\nUIToastService->AppModule\n\n\n\n\n\nHomePage\n\nHomePage\n\n\n\nHomePageModule\n\nHomePageModule\n\nHomePageModule -->\n\nHomePage->HomePageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        2 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomePageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
